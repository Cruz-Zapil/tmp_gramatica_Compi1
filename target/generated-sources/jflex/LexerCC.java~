// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/main/jflex/LexerCC.lex


import java_cup.runtime.Symbol;


@SuppressWarnings("fallthrough")
public class LexerCC implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\25\0\1\3\1\4\1\5\1\6"+
    "\2\0\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\10\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\1\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\43\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\43\1\62"+
    "\1\0\1\63\1\0\1\64\1\0\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77"+
    "\1\100\1\101\1\102\1\103\1\104\1\105\1\106\1\107"+
    "\1\110\1\111\1\112\1\113\1\114\1\115\1\116\1\117"+
    "\1\120\1\121\101\0\1\1\1\0\1\1\7\0\1\1"+
    "\3\0\1\1\3\0\1\1\1\0\1\1\6\0\1\1"+
    "\1\0\1\1\4\0\1\1\7\0\1\1\3\0\1\1"+
    "\3\0\1\1\1\0\1\1\6\0\1\1\1\0\1\1"+
    "\u0103\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\2\1"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\2"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\1\16\2"+
    "\1\24\1\25\23\2\1\26\1\1\1\27\1\13\1\14"+
    "\1\30\1\16\1\0\1\31\1\32\5\0\1\33\2\0"+
    "\1\2\1\0\1\34\1\35\1\36\1\0\3\2\1\37"+
    "\1\2\1\37\6\2\1\40\27\2\1\41\30\2\1\42"+
    "\2\30\1\2\1\30\6\0\1\43\1\0\1\44\2\0"+
    "\2\2\1\45\1\2\7\37\1\46\2\37\2\2\1\47"+
    "\7\2\1\37\5\2\1\50\36\2\1\51\1\2\1\52"+
    "\2\2\1\53\10\2\2\30\1\54\1\30\1\55\4\0"+
    "\1\56\7\0\1\57\4\0\3\2\1\37\1\60\1\37"+
    "\1\61\1\37\1\62\12\37\1\63\1\64\1\65\2\2"+
    "\1\66\3\2\2\37\3\2\1\67\1\2\1\70\2\2"+
    "\1\71\2\2\1\72\3\2\1\73\5\2\1\74\2\2"+
    "\1\75\2\2\1\76\1\77\1\2\1\100\1\101\6\2"+
    "\1\102\3\2\1\103\1\104\1\105\1\106\3\2\2\30"+
    "\1\54\1\30\1\55\6\0\1\107\1\0\1\110\1\0"+
    "\1\111\14\0\3\2\2\37\1\112\1\37\1\113\10\37"+
    "\5\2\2\37\4\2\1\114\1\2\1\115\4\2\1\116"+
    "\2\2\1\117\2\2\1\120\5\2\1\121\2\2\1\122"+
    "\1\123\4\2\1\124\1\125\1\2\2\30\1\54\7\0"+
    "\1\126\1\0\1\127\12\0\1\37\1\130\1\2\1\131"+
    "\1\37\1\132\1\37\1\133\3\37\1\134\2\37\1\2"+
    "\1\135\1\136\2\2\2\37\1\2\1\137\4\2\1\140"+
    "\1\2\1\141\1\142\4\2\1\143\2\2\1\144\1\145"+
    "\1\2\1\146\1\2\1\147\1\150\1\2\1\151\1\2"+
    "\1\54\1\152\3\0\1\56\1\153\1\0\1\154\1\0"+
    "\1\155\3\0\1\156\2\0\1\31\1\157\1\37\1\2"+
    "\1\37\1\160\4\37\1\161\2\2\3\37\1\2\1\162"+
    "\2\2\1\163\1\2\1\164\2\2\1\165\1\166\1\167"+
    "\1\170\2\2\1\0\1\171\3\0\1\172\4\0\1\173"+
    "\1\37\1\2\1\174\1\175\1\37\1\176\2\37\1\2"+
    "\2\37\1\0\1\177\2\2\1\200\4\2\1\201\1\202"+
    "\1\56\1\203\1\204\1\0\1\205\1\0\4\37\1\0"+
    "\3\37\1\206\1\207\2\2\1\210\2\2\2\0\1\211"+
    "\2\37\1\212\1\213\1\37\1\214\1\37\1\215\1\2"+
    "\1\216\1\217\1\0\1\220\1\37\1\221\2\37\1\222"+
    "\1\223\1\37\1\224\2\37\1\225\4\37\1\226";

  private static int [] zzUnpackAction() {
    int [] result = new int[628];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\122\0\244\0\366\0\244\0\u0148\0\u019a\0\u01ec"+
    "\0\u023e\0\u0290\0\u02e2\0\366\0\366\0\366\0\366\0\366"+
    "\0\u0334\0\u0386\0\u03d8\0\366\0\366\0\u042a\0\u047c\0\u04ce"+
    "\0\u0520\0\u0572\0\u05c4\0\u0616\0\u0668\0\u06ba\0\u070c\0\u075e"+
    "\0\u07b0\0\u0802\0\u0854\0\u08a6\0\u08f8\0\u094a\0\u099c\0\244"+
    "\0\244\0\u09ee\0\u0a40\0\u0a92\0\u0ae4\0\u0b36\0\u0b88\0\u0bda"+
    "\0\u0c2c\0\u0c7e\0\u0cd0\0\u0d22\0\u0d74\0\u0dc6\0\u0e18\0\u0e6a"+
    "\0\u0ebc\0\u0f0e\0\u0f60\0\u0fb2\0\244\0\u1004\0\244\0\u1056"+
    "\0\u1056\0\u10a8\0\u10fa\0\u114c\0\u119e\0\244\0\u11f0\0\u1242"+
    "\0\u1294\0\u12e6\0\u1338\0\244\0\u138a\0\u13dc\0\u142e\0\u1480"+
    "\0\244\0\244\0\244\0\u14d2\0\u1524\0\u1576\0\u15c8\0\u161a"+
    "\0\u166c\0\u16be\0\u1710\0\u1762\0\u17b4\0\u1806\0\u1858\0\u18aa"+
    "\0\u05c4\0\u18fc\0\u194e\0\u19a0\0\u19f2\0\u1a44\0\u1a96\0\u1ae8"+
    "\0\u1b3a\0\u1b8c\0\u1bde\0\u1c30\0\u1c82\0\u1cd4\0\u1d26\0\u1d78"+
    "\0\u1dca\0\u1e1c\0\u1e6e\0\u1ec0\0\u1f12\0\u1f64\0\u1fb6\0\u2008"+
    "\0\u05c4\0\u205a\0\u20ac\0\u20fe\0\u2150\0\u21a2\0\u21f4\0\u2246"+
    "\0\u2298\0\u22ea\0\u233c\0\u238e\0\u23e0\0\u2432\0\u2484\0\u24d6"+
    "\0\u2528\0\u257a\0\u25cc\0\u261e\0\u2670\0\u26c2\0\u2714\0\u2766"+
    "\0\u27b8\0\244\0\u280a\0\u285c\0\u28ae\0\u2900\0\u2952\0\u29a4"+
    "\0\u29f6\0\u2a48\0\u2a9a\0\u2aec\0\244\0\u2b3e\0\366\0\u2b90"+
    "\0\u2be2\0\u2c34\0\u2c86\0\u05c4\0\u2cd8\0\u2d2a\0\u2d7c\0\u2dce"+
    "\0\u2e20\0\u2e72\0\u2ec4\0\u2f16\0\u161a\0\u2f68\0\u2fba\0\u300c"+
    "\0\u305e\0\u05c4\0\u30b0\0\u3102\0\u3154\0\u31a6\0\u31f8\0\u324a"+
    "\0\u329c\0\u32ee\0\u3340\0\u3392\0\u33e4\0\u3436\0\u3488\0\u05c4"+
    "\0\u34da\0\u352c\0\u357e\0\u35d0\0\u3622\0\u3674\0\u36c6\0\u3718"+
    "\0\u376a\0\u37bc\0\u380e\0\u3860\0\u38b2\0\u3904\0\u3956\0\u39a8"+
    "\0\u39fa\0\u3a4c\0\u3a9e\0\u3af0\0\u3b42\0\u3b94\0\u3be6\0\u3c38"+
    "\0\u3c8a\0\u3cdc\0\u3d2e\0\u3d80\0\u3dd2\0\u3e24\0\u05c4\0\u3e76"+
    "\0\u3ec8\0\u3f1a\0\u3f6c\0\u05c4\0\u3fbe\0\u4010\0\u4062\0\u40b4"+
    "\0\u4106\0\u4158\0\u41aa\0\u41fc\0\u424e\0\u42a0\0\u42f2\0\u4344"+
    "\0\u4396\0\u43e8\0\u443a\0\u448c\0\u44de\0\u4530\0\u4582\0\u45d4"+
    "\0\u4626\0\u4678\0\u46ca\0\u471c\0\u476e\0\244\0\u47c0\0\u4812"+
    "\0\u4864\0\u48b6\0\u4908\0\u495a\0\u49ac\0\u49fe\0\u161a\0\u4a50"+
    "\0\u161a\0\u4aa2\0\u161a\0\u4af4\0\u4b46\0\u4b98\0\u4bea\0\u4c3c"+
    "\0\u4c8e\0\u4ce0\0\u4d32\0\u4d84\0\u4dd6\0\u05c4\0\u05c4\0\u05c4"+
    "\0\u4e28\0\u4e7a\0\u05c4\0\u4ecc\0\u4f1e\0\u4f70\0\u4fc2\0\u5014"+
    "\0\u5066\0\u50b8\0\u510a\0\u515c\0\u51ae\0\u05c4\0\u5200\0\u5252"+
    "\0\u05c4\0\u52a4\0\u52f6\0\u05c4\0\u5348\0\u539a\0\u53ec\0\u05c4"+
    "\0\u543e\0\u5490\0\u54e2\0\u5534\0\u5586\0\u05c4\0\u55d8\0\u562a"+
    "\0\u05c4\0\u567c\0\u56ce\0\u05c4\0\u05c4\0\u5720\0\u05c4\0\u05c4"+
    "\0\u5772\0\u57c4\0\u5816\0\u5868\0\u58ba\0\u590c\0\u05c4\0\u595e"+
    "\0\u59b0\0\u5a02\0\u05c4\0\u5a54\0\u05c4\0\u05c4\0\u5aa6\0\u5af8"+
    "\0\u5b4a\0\u5b9c\0\u5bee\0\u5c40\0\u0386\0\u5c92\0\u5ce4\0\u5d36"+
    "\0\u5d88\0\u5dda\0\u5e2c\0\u5e7e\0\244\0\u5ed0\0\244\0\u5f22"+
    "\0\244\0\u5f74\0\u5fc6\0\u6018\0\u606a\0\u60bc\0\u610e\0\u6160"+
    "\0\u61b2\0\u6204\0\u6256\0\u62a8\0\u62fa\0\u634c\0\u639e\0\u63f0"+
    "\0\u6442\0\u6494\0\u161a\0\u64e6\0\u161a\0\u6538\0\u658a\0\u65dc"+
    "\0\u662e\0\u6680\0\u66d2\0\u6724\0\u6776\0\u67c8\0\u681a\0\u686c"+
    "\0\u68be\0\u6910\0\u6962\0\u69b4\0\u6a06\0\u6a58\0\u6aaa\0\u6afc"+
    "\0\u05c4\0\u6b4e\0\u05c4\0\u6ba0\0\u6bf2\0\u6c44\0\u6c96\0\u05c4"+
    "\0\u6ce8\0\u6d3a\0\u05c4\0\u6d8c\0\u6dde\0\u05c4\0\u6e30\0\u6e82"+
    "\0\u6ed4\0\u6f26\0\u6f78\0\u05c4\0\u6fca\0\u701c\0\u05c4\0\u05c4"+
    "\0\u706e\0\u70c0\0\u7112\0\u7164\0\u05c4\0\u05c4\0\u71b6\0\366"+
    "\0\u7208\0\u725a\0\u72ac\0\u72fe\0\u7350\0\u73a2\0\u73f4\0\u7446"+
    "\0\u7498\0\244\0\u74ea\0\244\0\u753c\0\u758e\0\u75e0\0\u7632"+
    "\0\u7684\0\u76d6\0\u7728\0\u777a\0\u77cc\0\u781e\0\u7870\0\366"+
    "\0\u78c2\0\u161a\0\u7914\0\u161a\0\u7966\0\u161a\0\u79b8\0\u7a0a"+
    "\0\u7a5c\0\u161a\0\u7aae\0\u7b00\0\u7b52\0\u05c4\0\u05c4\0\u7ba4"+
    "\0\u7bf6\0\u7c48\0\u7c9a\0\u7cec\0\u05c4\0\u7d3e\0\u7d90\0\u7de2"+
    "\0\u7e34\0\u05c4\0\u7e86\0\u05c4\0\u05c4\0\u7ed8\0\u7f2a\0\u7f7c"+
    "\0\u7fce\0\u05c4\0\u8020\0\u8072\0\u05c4\0\u05c4\0\u80c4\0\u05c4"+
    "\0\u8116\0\u05c4\0\u05c4\0\u8168\0\u05c4\0\u7208\0\366\0\244"+
    "\0\u81ba\0\u820c\0\u825e\0\u82b0\0\244\0\u8302\0\244\0\u8354"+
    "\0\244\0\u83a6\0\u83f8\0\u844a\0\244\0\u849c\0\u84ee\0\u4864"+
    "\0\244\0\u8540\0\u8592\0\u85e4\0\u161a\0\u8636\0\u8688\0\u86da"+
    "\0\u872c\0\u161a\0\u877e\0\u87d0\0\u8822\0\u8874\0\u88c6\0\u8918"+
    "\0\u05c4\0\u896a\0\u89bc\0\u05c4\0\u8a0e\0\u05c4\0\u8a60\0\u8ab2"+
    "\0\u05c4\0\u05c4\0\u05c4\0\u05c4\0\u8b04\0\u8b56\0\u8ba8\0\244"+
    "\0\u8bfa\0\u8c4c\0\u8c9e\0\244\0\u8cf0\0\u8d42\0\u8d94\0\u8de6"+
    "\0\244\0\u8e38\0\u8e8a\0\u161a\0\u161a\0\u8edc\0\u161a\0\u8f2e"+
    "\0\u8f80\0\u8fd2\0\u9024\0\u9076\0\u90c8\0\u05c4\0\u911a\0\u916c"+
    "\0\u05c4\0\u91be\0\u9210\0\u9262\0\u92b4\0\244\0\244\0\244"+
    "\0\244\0\244\0\u9306\0\244\0\u9358\0\u93aa\0\u93fc\0\u944e"+
    "\0\u94a0\0\u94f2\0\u9544\0\u9596\0\u95e8\0\244\0\u05c4\0\u963a"+
    "\0\u968c\0\366\0\u96de\0\u9730\0\u9782\0\u97d4\0\u161a\0\u9826"+
    "\0\u9878\0\u161a\0\244\0\u98ca\0\u161a\0\u991c\0\u05c4\0\u996e"+
    "\0\366\0\366\0\u99c0\0\244\0\u9a12\0\u161a\0\u9a64\0\u9ab6"+
    "\0\366\0\244\0\u9b08\0\u161a\0\u9b5a\0\u9bac\0\u161a\0\u9bfe"+
    "\0\u9c50\0\u9ca2\0\u9cf4\0\u161a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[628];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\4\1\20\1\4"+
    "\1\21\1\22\2\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\33"+
    "\1\40\1\41\2\33\1\42\1\33\1\43\1\44\1\33"+
    "\1\45\1\33\1\46\2\33\1\47\2\33\1\50\1\51"+
    "\1\3\1\52\1\53\1\54\1\55\1\33\1\56\1\57"+
    "\1\60\1\61\1\62\1\33\1\63\1\64\1\65\1\66"+
    "\1\67\1\33\1\70\1\71\1\72\2\33\1\73\1\33"+
    "\1\74\1\33\1\75\1\76\1\77\1\3\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\100\1\4\1\101\1\4\1\21\1\102\2\103"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\33\1\40\1\41\2\33"+
    "\1\42\1\33\1\43\1\44\1\33\1\45\1\33\1\46"+
    "\2\33\1\47\2\33\1\50\1\51\1\3\1\52\1\53"+
    "\1\54\1\55\1\33\1\56\1\57\1\60\1\61\1\62"+
    "\1\33\1\63\1\64\1\65\1\66\1\67\1\33\1\70"+
    "\1\71\1\72\2\33\1\73\1\33\1\74\1\33\1\75"+
    "\1\76\1\77\123\0\1\4\1\0\1\4\5\0\7\4"+
    "\1\104\5\4\4\0\30\4\3\0\32\4\4\0\1\4"+
    "\1\0\1\6\5\0\7\4\1\104\5\4\4\0\30\4"+
    "\3\0\32\4\7\0\1\105\22\0\1\106\124\0\1\107"+
    "\1\0\1\110\3\0\1\111\15\0\1\112\64\0\3\113"+
    "\6\0\6\113\25\0\6\113\36\0\1\114\112\0\122\115"+
    "\34\0\1\116\66\0\1\4\1\0\1\4\5\0\7\4"+
    "\1\104\3\22\2\4\4\0\30\4\3\0\17\4\1\117"+
    "\12\4\4\0\1\4\1\0\1\4\5\0\7\4\1\104"+
    "\3\23\2\4\4\0\30\4\3\0\17\4\1\117\12\4"+
    "\7\0\1\120\22\0\1\121\121\0\1\122\121\0\1\123"+
    "\165\0\1\124\27\0\1\4\1\0\1\4\5\0\7\4"+
    "\1\104\3\33\2\4\4\0\13\33\1\125\4\33\1\126"+
    "\1\127\6\33\2\0\1\130\32\33\4\0\1\4\1\0"+
    "\1\4\5\0\7\4\1\104\3\33\2\4\4\0\30\33"+
    "\2\0\1\130\32\33\4\0\1\4\1\0\1\4\5\0"+
    "\7\4\1\104\3\33\2\4\4\0\1\131\27\33\2\0"+
    "\1\132\32\33\4\0\1\4\1\0\1\4\5\0\7\4"+
    "\1\104\3\33\2\4\4\0\4\33\1\133\23\33\2\0"+
    "\1\130\32\33\4\0\1\4\1\0\1\4\5\0\7\4"+
    "\1\104\3\33\2\4\4\0\13\33\1\134\1\33\1\135"+
    "\10\33\1\136\1\33\2\0\1\130\32\33\4\0\1\4"+
    "\1\0\1\4\5\0\7\4\1\104\3\33\2\4\4\0"+
    "\23\33\1\137\4\33\2\0\1\130\32\33\4\0\1\4"+
    "\1\0\1\4\5\0\7\4\1\104\3\33\2\4\4\0"+
    "\23\33\1\140\4\33\2\0\1\130\32\33\4\0\1\4"+
    "\1\0\1\4\5\0\7\4\1\104\3\33\2\4\4\0"+
    "\5\33\1\141\7\33\1\142\12\33\2\0\1\130\32\33"+
    "\4\0\1\4\1\0\1\4\5\0\7\4\1\104\3\33"+
    "\2\4\4\0\4\33\1\143\23\33\2\0\1\130\32\33"+
    "\4\0\1\4\1\0\1\4\5\0\7\4\1\104\3\33"+
    "\2\4\4\0\23\33\1\144\4\33\2\0\1\130\32\33"+
    "\4\0\1\4\1\0\1\4\5\0\7\4\1\104\3\33"+
    "\2\4\4\0\15\33\1\145\12\33\2\0\1\130\32\33"+
    "\4\0\1\4\1\0\1\4\5\0\7\4\1\104\3\33"+
    "\2\4\4\0\4\33\1\146\23\33\2\0\1\130\32\33"+
    "\4\0\1\4\1\0\1\4\5\0\7\4\1\104\3\33"+
    "\2\4\4\0\7\33\1\147\20\33\2\0\1\130\32\33"+
    "\4\0\1\4\1\0\1\4\5\0\7\4\1\104\3\33"+
    "\2\4\4\0\7\33\1\150\20\33\2\0\1\130\32\33"+
    "\4\0\1\4\1\0\1\4\5\0\7\4\1\104\3\33"+
    "\2\4\4\0\30\33\2\0\1\130\13\33\1\151\4\33"+
    "\1\152\11\33\4\0\1\4\1\0\1\4\5\0\7\4"+
    "\1\104\3\33\2\4\4\0\30\33\2\0\1\130\1\153"+
    "\12\33\1\154\2\33\1\155\13\33\4\0\1\4\1\0"+
    "\1\4\5\0\7\4\1\104\3\33\2\4\4\0\30\33"+
    "\2\0\1\130\4\33\1\156\2\33\1\157\3\33\1\160"+
    "\2\33\1\161\13\33\4\0\1\4\1\0\1\4\5\0"+
    "\7\4\1\104\3\33\2\4\4\0\30\33\2\0\1\130"+
    "\4\33\1\162\25\33\4\0\1\4\1\0\1\4\5\0"+
    "\7\4\1\104\3\33\2\4\4\0\30\33\2\0\1\130"+
    "\1\163\15\33\1\164\5\33\1\165\5\33\4\0\1\4"+
    "\1\0\1\4\5\0\7\4\1\104\3\33\2\4\4\0"+
    "\30\33\2\0\1\130\21\33\1\166\10\33\4\0\1\4"+
    "\1\0\1\4\5\0\7\4\1\104\3\33\2\4\4\0"+
    "\30\33\2\0\1\130\4\33\1\167\14\33\1\170\10\33"+
    "\4\0\1\4\1\0\1\4\5\0\7\4\1\104\3\33"+
    "\2\4\4\0\30\33\2\0\1\130\3\33\1\171\11\33"+
    "\1\172\14\33\4\0\1\4\1\0\1\4\5\0\7\4"+
    "\1\104\3\33\2\4\4\0\30\33\2\0\1\130\24\33"+
    "\1\173\5\33\4\0\1\4\1\0\1\4\5\0\7\4"+
    "\1\104\3\33\2\4\4\0\30\33\2\0\1\130\4\33"+
    "\1\174\3\33\1\175\21\33\4\0\1\4\1\0\1\4"+
    "\5\0\7\4\1\104\3\33\2\4\4\0\30\33\2\0"+
    "\1\130\1\176\31\33\4\0\1\4\1\0\1\4\5\0"+
    "\7\4\1\104\3\33\2\4\4\0\30\33\2\0\1\130"+
    "\1\177\23\33\1\200\5\33\4\0\1\4\1\0\1\4"+
    "\5\0\7\4\1\104\3\33\2\4\4\0\30\33\2\0"+
    "\1\130\13\33\1\201\1\33\1\202\14\33\4\0\1\4"+
    "\1\0\1\4\5\0\7\4\1\104\3\33\2\4\4\0"+
    "\30\33\2\0\1\130\24\33\1\203\5\33\4\0\1\4"+
    "\1\0\1\4\5\0\7\4\1\104\3\33\2\4\4\0"+
    "\30\33\2\0\1\130\1\204\3\33\1\205\3\33\1\206"+
    "\5\33\1\207\13\33\4\0\1\4\1\0\1\4\5\0"+
    "\7\4\1\104\3\33\2\4\4\0\30\33\2\0\1\130"+
    "\1\210\7\33\1\211\10\33\1\212\1\33\1\213\6\33"+
    "\4\0\1\4\1\0\1\4\5\0\7\4\1\104\3\33"+
    "\2\4\4\0\30\33\2\0\1\130\4\33\1\214\14\33"+
    "\1\215\6\33\1\216\1\33\4\0\1\4\1\0\1\4"+
    "\5\0\7\4\1\104\3\33\2\4\4\0\30\33\2\0"+
    "\1\130\7\33\1\217\1\220\21\33\4\0\1\4\1\0"+
    "\1\4\5\0\7\4\1\104\3\33\2\4\4\0\30\33"+
    "\2\0\1\130\4\33\1\221\25\33\123\0\1\222\2\0"+
    "\1\4\1\0\1\4\5\0\7\4\1\104\1\223\2\224"+
    "\2\4\4\0\30\4\3\0\32\4\4\0\1\4\1\0"+
    "\1\4\5\0\6\4\1\225\1\104\3\226\2\4\4\0"+
    "\30\4\3\0\17\4\1\117\12\4\4\0\1\4\1\0"+
    "\1\4\5\0\6\4\1\225\1\104\3\103\2\4\4\0"+
    "\30\4\3\0\17\4\1\117\12\4\23\0\1\227\101\0"+
    "\2\105\1\0\117\105\106\0\1\230\116\0\1\231\107\0"+
    "\1\232\121\0\1\233\51\0\3\234\6\0\6\234\25\0"+
    "\6\234\37\0\1\235\175\0\1\236\36\0\1\4\1\0"+
    "\1\4\5\0\7\4\1\104\5\4\4\0\30\4\3\0"+
    "\27\4\1\237\2\4\21\0\1\240\203\0\1\241\22\0"+
    "\1\4\1\0\1\4\5\0\7\4\1\104\3\33\2\4"+
    "\4\0\4\33\1\242\23\33\2\0\1\130\32\33\4\0"+
    "\1\4\1\0\1\4\5\0\7\4\1\104\3\33\2\4"+
    "\4\0\10\33\1\243\17\33\2\0\1\130\32\33\4\0"+
    "\1\4\1\0\1\4\5\0\7\4\1\104\3\33\2\4"+
    "\4\0\2\33\1\244\25\33\2\0\1\130\32\33\24\0"+
    "\3\130\6\0\30\130\2\0\33\130\4\0\1\4\1\0"+
    "\1\4\5\0\7\4\1\104\3\33\2\4\4\0\20\33"+
    "\1\245\7\33\2\0\1\130\32\33\24\0\3\130\6\0"+
    "\1\130\1\246\1\247\1\250\3\130\1\251\1\252\2\130"+
    "\1\253\2\130\1\254\1\255\1\130\1\256\1\257\5\130"+
    "\2\0\33\130\4\0\1\4\1\0\1\4\5\0\7\4"+
    "\1\104\3\33\2\4\4\0\21\33\1\260\6\33\2\0"+
    "\1\130\32\33\4\0\1\4\1\0\1\4\5\0\7\4"+
    "\1\104\3\33\2\4\4\0\21\33\1\261\6\33\2\0"+
    "\1\130\32\33\4\0\1\4\1\0\1\4\5\0\7\4"+
    "\1\104\3\33\2\4\4\0\3\33\1\262\24\33\2\0"+
    "\1\130\32\33\4\0\1\4\1\0\1\4\5\0\7\4"+
    "\1\104\3\33\2\4\4\0\10\33\1\263\17\33\2\0"+
    "\1\130\32\33\4\0\1\4\1\0\1\4\5\0\7\4"+
    "\1\104\3\33\2\4\4\0\15\33\1\264\12\33\2\0"+
    "\1\130\32\33\4\0\1\4\1\0\1\4\5\0\7\4"+
    "\1\104\3\33\2\4\4\0\15\33\1\265\12\33\2\0"+
    "\1\130\32\33\4\0\1\4\1\0\1\4\5\0\7\4"+
    "\1\104\3\33\2\4\4\0\10\33\1\266\10\33\1\267"+
    "\6\33\2\0\1\130\32\33\4\0\1\4\1\0\1\4"+
    "\5\0\7\4\1\104\3\33\2\4\4\0\22\33\1\270"+
    "\5\33\2\0\1\130\32\33\4\0\1\4\1\0\1\4"+
    "\5\0\7\4\1\104\3\33\2\4\4\0\14\33\1\271"+
    "\13\33\2\0\1\130\32\33\4\0\1\4\1\0\1\4"+
    "\5\0\7\4\1\104\3\33\2\4\4\0\30\33\2\0"+
    "\1\272\32\33\4\0\1\4\1\0\1\4\5\0\7\4"+
    "\1\104\3\33\2\4\4\0\3\33\1\273\13\33\1\274"+
    "\4\33\1\275\3\33\2\0\1\130\32\33\4\0\1\4"+
    "\1\0\1\4\5\0\7\4\1\104\3\33\2\4\4\0"+
    "\4\33\1\276\23\33\2\0\1\130\32\33\4\0\1\4"+
    "\1\0\1\4\5\0\7\4\1\104\3\33\2\4\4\0"+
    "\10\33\1\277\17\33\2\0\1\130\32\33\4\0\1\4"+
    "\1\0\1\4\5\0\7\4\1\104\3\33\2\4\4\0"+
    "\30\33\2\0\1\130\23\33\1\300\6\33\4\0\1\4"+
    "\1\0\1\4\5\0\7\4\1\104\3\33\2\4\4\0"+
    "\30\33\2\0\1\130\24\33\1\301\5\33\4\0\1\4"+
    "\1\0\1\4\5\0\7\4\1\104\3\33\2\4\4\0"+
    "\30\33\2\0\1\130\2\33\1\302\27\33\4\0\1\4"+
    "\1\0\1\4\5\0\7\4\1\104\3\33\2\4\4\0"+
    "\30\33\2\0\1\130\1\303\23\33\1\304\5\33\4\0"+
    "\1\4\1\0\1\4\5\0\7\4\1\104\3\33\2\4"+
    "\4\0\30\33\2\0\1\130\16\33\1\305\13\33\4\0"+
    "\1\4\1\0\1\4\5\0\7\4\1\104\3\33\2\4"+
    "\4\0\30\33\2\0\1\130\15\33\1\306\14\33\4\0"+
    "\1\4\1\0\1\4\5\0\7\4\1\104\3\33\2\4"+
    "\4\0\30\33\2\0\1\130\1\307\3\33\1\310\25\33"+
    "\4\0\1\4\1\0\1\4\5\0\7\4\1\104\3\33"+
    "\2\4\4\0\30\33\2\0\1\130\1\311\31\33\4\0"+
    "\1\4\1\0\1\4\5\0\7\4\1\104\3\33\2\4"+
    "\4\0\30\33\2\0\1\130\13\33\1\312\16\33\4\0"+
    "\1\4\1\0\1\4\5\0\7\4\1\104\3\33\2\4"+
    "\4\0\30\33\2\0\1\130\2\33\1\313\27\33\4\0"+
    "\1\4\1\0\1\4\5\0\7\4\1\104\3\33\2\4"+
    "\4\0\30\33\2\0\1\130\13\33\1\314\16\33\4\0"+
    "\1\4\1\0\1\4\5\0\7\4\1\104\3\33\2\4"+
    "\4\0\30\33\2\0\1\130\15\33\1\315\14\33\4\0"+
    "\1\4\1\0\1\4\5\0\7\4\1\104\3\33\2\4"+
    "\4\0\30\33\2\0\1\130\2\33\1\316\27\33\4\0"+
    "\1\4\1\0\1\4\5\0\7\4\1\104\3\33\2\4"+
    "\4\0\30\33\2\0\1\130\1\317\3\33\1\320\25\33"+
    "\4\0\1\4\1\0\1\4\5\0\7\4\1\104\3\33"+
    "\2\4\4\0\30\33\2\0\1\130\10\33\1\321\21\33"+
    "\4\0\1\4\1\0\1\4\5\0\7\4\1\104\3\33"+
    "\2\4\4\0\30\33\2\0\1\130\4\33\1\322\25\33"+
    "\4\0\1\4\1\0\1\4\5\0\7\4\1\104\3\33"+
    "\2\4\4\0\30\33\2\0\1\130\23\33\1\323\6\33"+
    "\4\0\1\4\1\0\1\4\5\0\7\4\1\104\3\33"+
    "\2\4\4\0\30\33\2\0\1\130\22\33\1\324\7\33"+
    "\4\0\1\4\1\0\1\4\5\0\7\4\1\104\3\33"+
    "\2\4\4\0\30\33\2\0\1\130\5\33\1\325\24\33"+
    "\4\0\1\4\1\0\1\4\5\0\7\4\1\104\3\33"+
    "\2\4\4\0\30\33\2\0\1\130\14\33\1\326\15\33"+
    "\4\0\1\4\1\0\1\4\5\0\7\4\1\104\3\33"+
    "\2\4\4\0\30\33\2\0\1\130\21\33\1\327\10\33"+
    "\4\0\1\4\1\0\1\4\5\0\7\4\1\104\3\33"+
    "\2\4\4\0\30\33\2\0\1\130\14\33\1\330\10\33"+
    "\1\331\4\33\4\0\1\4\1\0\1\4\5\0\7\4"+
    "\1\104\3\33\2\4\4\0\30\33\2\0\1\130\14\33"+
    "\1\332\15\33\4\0\1\4\1\0\1\4\5\0\7\4"+
    "\1\104\3\33\2\4\4\0\30\33\2\0\1\130\10\33"+
    "\1\333\21\33\4\0\1\4\1\0\1\4\5\0\7\4"+
    "\1\104\3\33\2\4\4\0\30\33\2\0\1\130\2\33"+
    "\1\334\27\33\4\0\1\4\1\0\1\4\5\0\7\4"+
    "\1\104\3\33\2\4\4\0\30\33\2\0\1\130\21\33"+
    "\1\335\10\33\4\0\1\4\1\0\1\4\5\0\7\4"+
    "\1\104\3\33\2\4\4\0\30\33\2\0\1\130\3\33"+
    "\1\336\26\33\4\0\1\4\1\0\1\4\5\0\7\4"+
    "\1\104\3\33\2\4\4\0\30\33\2\0\1\130\3\33"+
    "\1\337\26\33\4\0\1\4\1\0\1\4\5\0\7\4"+
    "\1\104\3\33\2\4\4\0\30\33\2\0\1\130\6\33"+
    "\1\340\23\33\4\0\1\4\1\0\1\4\5\0\7\4"+
    "\1\104\3\33\2\4\4\0\30\33\2\0\1\130\26\33"+
    "\1\341\3\33\4\0\1\4\1\0\1\4\5\0\7\4"+
    "\1\104\3\33\2\4\4\0\30\33\2\0\1\130\15\33"+
    "\1\342\14\33\4\0\1\4\1\0\1\4\5\0\7\4"+
    "\1\104\3\33\2\4\4\0\30\33\2\0\1\130\13\33"+
    "\1\343\16\33\4\0\1\4\1\0\1\4\5\0\7\4"+
    "\1\104\3\33\2\4\4\0\30\33\2\0\1\130\2\33"+
    "\1\344\27\33\4\0\1\4\1\0\1\4\5\0\7\4"+
    "\1\104\3\33\2\4\4\0\30\33\2\0\1\130\21\33"+
    "\1\345\10\33\4\0\1\4\1\0\1\4\5\0\7\4"+
    "\1\104\3\33\2\4\4\0\30\33\2\0\1\130\1\346"+
    "\26\33\1\347\2\33\4\0\1\4\1\0\1\4\5\0"+
    "\7\4\1\104\3\33\2\4\4\0\30\33\2\0\1\130"+
    "\24\33\1\350\5\33\4\0\1\4\1\0\1\4\5\0"+
    "\7\4\1\104\3\33\2\4\4\0\30\33\2\0\1\130"+
    "\17\33\1\351\12\33\4\0\1\4\1\0\1\4\5\0"+
    "\7\4\1\104\3\33\2\4\4\0\30\33\2\0\1\130"+
    "\10\33\1\352\21\33\4\0\1\4\1\0\1\4\5\0"+
    "\7\4\1\104\3\33\2\4\4\0\30\33\2\0\1\130"+
    "\3\33\1\353\26\33\4\0\1\4\1\0\1\4\5\0"+
    "\7\4\1\104\3\33\2\4\4\0\30\33\2\0\1\130"+
    "\13\33\1\354\16\33\4\0\1\4\1\0\1\4\5\0"+
    "\6\4\1\225\1\104\3\355\2\4\4\0\30\4\3\0"+
    "\32\4\4\0\1\4\1\0\1\4\5\0\6\4\1\225"+
    "\1\104\3\356\2\4\4\0\30\4\3\0\32\4\4\0"+
    "\1\4\1\0\1\4\5\0\7\4\1\104\3\357\2\4"+
    "\4\0\30\4\3\0\32\4\4\0\1\4\1\0\1\4"+
    "\5\0\7\4\1\104\3\360\2\4\4\0\30\4\3\0"+
    "\17\4\1\117\12\4\4\0\1\361\1\0\1\361\5\0"+
    "\7\361\1\0\5\361\4\0\30\361\3\0\32\361\100\0"+
    "\1\362\135\0\1\363\112\0\1\364\125\0\1\365\34\0"+
    "\3\366\6\0\6\366\25\0\6\366\62\0\1\367\1\370"+
    "\1\371\3\0\1\372\1\373\2\0\1\374\2\0\1\375"+
    "\1\376\1\0\1\377\1\u0100\63\0\1\u0101\206\0\1\u0102"+
    "\17\0\1\4\1\0\1\4\5\0\7\4\1\104\3\33"+
    "\2\4\4\0\20\33\1\u0103\7\33\2\0\1\130\32\33"+
    "\4\0\1\4\1\0\1\4\5\0\7\4\1\104\3\33"+
    "\2\4\4\0\1\u0104\27\33\2\0\1\130\32\33\4\0"+
    "\1\4\1\0\1\4\5\0\7\4\1\104\3\33\2\4"+
    "\4\0\1\u0105\27\33\2\0\1\130\32\33\24\0\3\130"+
    "\6\0\16\130\1\u0106\1\130\1\u0107\2\130\1\u0108\4\130"+
    "\2\0\33\130\24\0\3\130\6\0\2\130\1\u0109\25\130"+
    "\2\0\33\130\24\0\3\130\6\0\10\130\1\u010a\17\130"+
    "\2\0\33\130\24\0\1\130\1\u010b\1\130\6\0\4\130"+
    "\1\u010c\23\130\2\0\33\130\24\0\3\130\6\0\14\130"+
    "\1\u010d\1\u010e\12\130\2\0\33\130\24\0\3\130\6\0"+
    "\10\130\1\u010f\17\130\2\0\33\130\24\0\3\130\6\0"+
    "\17\130\1\u0110\10\130\2\0\33\130\24\0\3\130\6\0"+
    "\2\130\1\u0111\1\130\1\u0112\12\130\1\u0113\10\130\2\0"+
    "\33\130\24\0\3\130\6\0\4\130\1\u0114\3\130\1\u0115"+
    "\17\130\2\0\33\130\4\0\1\4\1\0\1\4\5\0"+
    "\7\4\1\104\3\33\2\4\4\0\2\33\1\u0116\25\33"+
    "\2\0\1\130\32\33\4\0\1\4\1\0\1\4\5\0"+
    "\7\4\1\104\3\33\2\4\4\0\4\33\1\u0117\23\33"+
    "\2\0\1\130\32\33\4\0\1\4\1\0\1\4\5\0"+
    "\7\4\1\104\3\33\2\4\4\0\22\33\1\u0118\5\33"+
    "\2\0\1\130\32\33\4\0\1\4\1\0\1\4\5\0"+
    "\7\4\1\104\3\33\2\4\4\0\22\33\1\u0119\5\33"+
    "\2\0\1\130\32\33\4\0\1\4\1\0\1\4\5\0"+
    "\7\4\1\104\3\33\2\4\4\0\22\33\1\u011a\5\33"+
    "\2\0\1\130\32\33\4\0\1\4\1\0\1\4\5\0"+
    "\7\4\1\104\3\33\2\4\4\0\22\33\1\u011b\5\33"+
    "\2\0\1\130\32\33\4\0\1\4\1\0\1\4\5\0"+
    "\7\4\1\104\3\33\2\4\4\0\4\33\1\u011c\23\33"+
    "\2\0\1\130\32\33\4\0\1\4\1\0\1\4\5\0"+
    "\7\4\1\104\3\33\2\4\4\0\10\33\1\u011d\6\33"+
    "\1\u011e\10\33\2\0\1\130\32\33\4\0\1\4\1\0"+
    "\1\4\5\0\7\4\1\104\3\33\2\4\4\0\30\33"+
    "\2\0\1\u011f\32\33\24\0\3\130\6\0\13\130\1\u0120"+
    "\14\130\2\0\33\130\4\0\1\4\1\0\1\4\5\0"+
    "\7\4\1\104\3\33\2\4\4\0\10\33\1\u0121\17\33"+
    "\2\0\1\130\32\33\4\0\1\4\1\0\1\4\5\0"+
    "\7\4\1\104\3\33\2\4\4\0\4\33\1\u0122\23\33"+
    "\2\0\1\130\32\33\4\0\1\4\1\0\1\4\5\0"+
    "\7\4\1\104\3\33\2\4\4\0\4\33\1\u0123\23\33"+
    "\2\0\1\130\32\33\4\0\1\4\1\0\1\4\5\0"+
    "\7\4\1\104\3\33\2\4\4\0\15\33\1\u0124\12\33"+
    "\2\0\1\130\32\33\4\0\1\4\1\0\1\4\5\0"+
    "\7\4\1\104\3\33\2\4\4\0\13\33\1\u0125\14\33"+
    "\2\0\1\130\32\33\4\0\1\4\1\0\1\4\5\0"+
    "\7\4\1\104\3\33\2\4\4\0\30\33\2\0\1\130"+
    "\1\u0126\31\33\4\0\1\4\1\0\1\4\5\0\7\4"+
    "\1\104\3\33\2\4\4\0\30\33\2\0\1\130\12\33"+
    "\1\u0127\17\33\4\0\1\4\1\0\1\4\5\0\7\4"+
    "\1\104\3\33\2\4\4\0\30\33\2\0\1\130\2\33"+
    "\1\u0128\27\33\4\0\1\4\1\0\1\4\5\0\7\4"+
    "\1\104\3\33\2\4\4\0\30\33\2\0\1\130\4\33"+
    "\1\u0129\25\33\4\0\1\4\1\0\1\4\5\0\7\4"+
    "\1\104\3\33\2\4\4\0\30\33\2\0\1\130\13\33"+
    "\1\u012a\16\33\4\0\1\4\1\0\1\4\5\0\7\4"+
    "\1\104\3\33\2\4\4\0\30\33\2\0\1\130\23\33"+
    "\1\u012b\6\33\4\0\1\4\1\0\1\4\5\0\7\4"+
    "\1\104\3\33\2\4\4\0\30\33\2\0\1\130\21\33"+
    "\1\u012c\10\33\4\0\1\4\1\0\1\4\5\0\7\4"+
    "\1\104\3\33\2\4\4\0\30\33\2\0\1\130\2\33"+
    "\1\u012d\27\33\4\0\1\4\1\0\1\4\5\0\7\4"+
    "\1\104\3\33\2\4\4\0\30\33\2\0\1\130\22\33"+
    "\1\u012e\7\33\4\0\1\4\1\0\1\4\5\0\7\4"+
    "\1\104\3\33\2\4\4\0\30\33\2\0\1\130\16\33"+
    "\1\u012f\3\33\1\u0130\1\33\1\u0131\5\33\4\0\1\4"+
    "\1\0\1\4\5\0\7\4\1\104\3\33\2\4\4\0"+
    "\30\33\2\0\1\130\10\33\1\u0132\21\33\4\0\1\4"+
    "\1\0\1\4\5\0\7\4\1\104\3\33\2\4\4\0"+
    "\30\33\2\0\1\130\22\33\1\u0133\7\33\4\0\1\4"+
    "\1\0\1\4\5\0\7\4\1\104\3\33\2\4\4\0"+
    "\30\33\2\0\1\130\23\33\1\u0134\6\33\4\0\1\4"+
    "\1\0\1\4\5\0\7\4\1\104\3\33\2\4\4\0"+
    "\30\33\2\0\1\130\7\33\1\u0135\22\33\4\0\1\4"+
    "\1\0\1\4\5\0\7\4\1\104\3\33\2\4\4\0"+
    "\30\33\2\0\1\130\30\33\1\u0136\1\33\4\0\1\4"+
    "\1\0\1\4\5\0\7\4\1\104\3\33\2\4\4\0"+
    "\30\33\2\0\1\130\4\33\1\u0137\25\33\4\0\1\4"+
    "\1\0\1\4\5\0\7\4\1\104\3\33\2\4\4\0"+
    "\30\33\2\0\1\130\6\33\1\u0138\23\33\4\0\1\4"+
    "\1\0\1\4\5\0\7\4\1\104\3\33\2\4\4\0"+
    "\30\33\2\0\1\130\5\33\1\u0139\24\33\4\0\1\4"+
    "\1\0\1\4\5\0\7\4\1\104\3\33\2\4\4\0"+
    "\30\33\2\0\1\130\4\33\1\u013a\25\33\4\0\1\4"+
    "\1\0\1\4\5\0\7\4\1\104\3\33\2\4\4\0"+
    "\30\33\2\0\1\130\23\33\1\u013b\6\33\4\0\1\4"+
    "\1\0\1\4\5\0\7\4\1\104\3\33\2\4\4\0"+
    "\30\33\2\0\1\130\23\33\1\u013c\6\33\4\0\1\4"+
    "\1\0\1\4\5\0\7\4\1\104\3\33\2\4\4\0"+
    "\30\33\2\0\1\130\4\33\1\u013d\25\33\4\0\1\4"+
    "\1\0\1\4\5\0\7\4\1\104\3\33\2\4\4\0"+
    "\30\33\2\0\1\130\21\33\1\u013e\10\33\4\0\1\4"+
    "\1\0\1\4\5\0\7\4\1\104\3\33\2\4\4\0"+
    "\30\33\2\0\1\130\4\33\1\u013f\25\33\4\0\1\4"+
    "\1\0\1\4\5\0\7\4\1\104\3\33\2\4\4\0"+
    "\30\33\2\0\1\130\30\33\1\u0140\1\33\4\0\1\4"+
    "\1\0\1\4\5\0\7\4\1\104\3\33\2\4\4\0"+
    "\30\33\2\0\1\130\1\33\1\u0141\30\33\4\0\1\4"+
    "\1\0\1\4\5\0\7\4\1\104\3\33\2\4\4\0"+
    "\30\33\2\0\1\130\25\33\1\u0142\4\33\4\0\1\4"+
    "\1\0\1\4\5\0\7\4\1\104\3\33\2\4\4\0"+
    "\30\33\2\0\1\130\13\33\1\u0143\16\33\4\0\1\4"+
    "\1\0\1\4\5\0\7\4\1\104\3\33\2\4\4\0"+
    "\30\33\2\0\1\130\17\33\1\u0144\12\33\4\0\1\4"+
    "\1\0\1\4\5\0\7\4\1\104\3\33\2\4\4\0"+
    "\30\33\2\0\1\130\10\33\1\u0145\21\33\4\0\1\4"+
    "\1\0\1\4\5\0\7\4\1\104\3\33\2\4\4\0"+
    "\30\33\2\0\1\130\7\33\1\u0146\22\33\4\0\1\4"+
    "\1\0\1\4\5\0\7\4\1\104\3\33\2\4\4\0"+
    "\30\33\2\0\1\130\22\33\1\u0147\7\33\4\0\1\4"+
    "\1\0\1\4\5\0\7\4\1\104\3\33\2\4\4\0"+
    "\30\33\2\0\1\130\22\33\1\u0148\7\33\4\0\1\4"+
    "\1\0\1\4\5\0\7\4\1\104\3\33\2\4\4\0"+
    "\30\33\2\0\1\130\25\33\1\u0149\4\33\4\0\1\4"+
    "\1\0\1\4\5\0\7\4\1\104\3\33\2\4\4\0"+
    "\30\33\2\0\1\130\10\33\1\u014a\21\33\4\0\1\4"+
    "\1\0\1\4\5\0\7\4\1\104\3\33\2\4\4\0"+
    "\30\33\2\0\1\130\13\33\1\u014b\16\33\4\0\1\4"+
    "\1\0\1\4\5\0\7\4\1\104\3\33\2\4\4\0"+
    "\30\33\2\0\1\130\23\33\1\u014c\6\33\4\0\1\4"+
    "\1\0\1\4\5\0\7\4\1\104\3\33\2\4\4\0"+
    "\30\33\2\0\1\130\4\33\1\u014d\25\33\4\0\1\4"+
    "\1\0\1\4\5\0\7\4\1\104\3\33\2\4\4\0"+
    "\30\33\2\0\1\130\4\33\1\u014e\25\33\4\0\1\4"+
    "\1\0\1\4\5\0\7\4\1\104\3\33\2\4\4\0"+
    "\30\33\2\0\1\130\23\33\1\u014f\6\33\4\0\1\4"+
    "\1\0\1\4\5\0\7\4\1\104\3\33\2\4\4\0"+
    "\30\33\2\0\1\130\23\33\1\u0150\6\33\4\0\1\4"+
    "\1\0\1\4\5\0\7\4\1\104\3\33\2\4\4\0"+
    "\30\33\2\0\1\130\13\33\1\u0151\16\33\4\0\1\4"+
    "\1\0\1\4\5\0\7\4\1\104\3\u0152\2\4\4\0"+
    "\30\4\3\0\32\4\4\0\1\4\1\0\1\4\5\0"+
    "\6\4\1\225\1\104\3\u0153\2\4\4\0\30\4\3\0"+
    "\32\4\4\0\1\4\1\0\1\4\5\0\7\4\1\104"+
    "\3\u0154\2\4\4\0\30\4\3\0\32\4\4\0\1\4"+
    "\1\0\1\4\5\0\7\4\1\104\3\u0155\2\4\4\0"+
    "\30\4\3\0\17\4\1\117\12\4\4\0\1\u0156\1\0"+
    "\1\u0156\5\0\7\u0156\1\0\5\u0156\4\0\30\u0156\3\0"+
    "\32\u0156\70\0\1\u0157\142\0\1\u0158\104\0\1\u0159\120\0"+
    "\1\u015a\52\0\3\u015b\6\0\6\u015b\25\0\6\u015b\77\0"+
    "\1\u015c\1\0\1\u015d\2\0\1\u015e\100\0\1\u015f\127\0"+
    "\1\u0160\101\0\1\u0161\13\0\1\u0162\131\0\1\u0163\1\u0164"+
    "\114\0\1\u0165\130\0\1\u0166\104\0\1\u0167\1\0\1\u0168"+
    "\12\0\1\u0169\106\0\1\u016a\3\0\1\u016b\57\0\16\u0101"+
    "\1\u016c\103\u0101\66\0\1\u016d\34\0\1\4\1\0\1\4"+
    "\5\0\7\4\1\104\3\33\2\4\4\0\22\33\1\u016e"+
    "\5\33\2\0\1\130\32\33\4\0\1\4\1\0\1\4"+
    "\5\0\7\4\1\104\3\33\2\4\4\0\13\33\1\u016f"+
    "\14\33\2\0\1\130\32\33\4\0\1\4\1\0\1\4"+
    "\5\0\7\4\1\104\3\33\2\4\4\0\2\33\1\u0170"+
    "\25\33\2\0\1\130\32\33\24\0\3\130\6\0\3\130"+
    "\1\u0171\24\130\2\0\33\130\24\0\3\130\6\0\22\130"+
    "\1\u0172\5\130\2\0\33\130\24\0\3\130\6\0\24\130"+
    "\1\u0173\3\130\2\0\33\130\24\0\3\130\6\0\1\u0174"+
    "\27\130\2\0\33\130\24\0\3\130\6\0\6\130\1\u0175"+
    "\21\130\2\0\33\130\24\0\3\130\6\0\17\130\1\u0176"+
    "\10\130\2\0\33\130\24\0\3\130\6\0\15\130\1\u0177"+
    "\12\130\2\0\33\130\24\0\3\130\6\0\22\130\1\u0178"+
    "\5\130\2\0\33\130\24\0\3\130\6\0\20\130\1\u0179"+
    "\7\130\2\0\33\130\24\0\3\130\6\0\13\130\1\u017a"+
    "\14\130\2\0\33\130\24\0\3\130\6\0\1\u017b\27\130"+
    "\2\0\33\130\24\0\3\130\6\0\26\130\1\u017c\1\130"+
    "\2\0\33\130\24\0\3\130\6\0\22\130\1\u017d\5\130"+
    "\2\0\33\130\4\0\1\4\1\0\1\4\5\0\7\4"+
    "\1\104\3\33\2\4\4\0\10\33\1\u017e\17\33\2\0"+
    "\1\130\32\33\4\0\1\4\1\0\1\4\5\0\7\4"+
    "\1\104\3\33\2\4\4\0\10\33\1\u017f\17\33\2\0"+
    "\1\130\32\33\4\0\1\4\1\0\1\4\5\0\7\4"+
    "\1\104\3\33\2\4\4\0\20\33\1\u0180\7\33\2\0"+
    "\1\130\32\33\4\0\1\4\1\0\1\4\5\0\7\4"+
    "\1\104\3\33\2\4\4\0\14\33\1\u0181\13\33\2\0"+
    "\1\130\32\33\4\0\1\4\1\0\1\4\5\0\7\4"+
    "\1\104\3\33\2\4\4\0\1\u0182\27\33\2\0\1\130"+
    "\32\33\24\0\3\130\6\0\1\u0183\27\130\2\0\33\130"+
    "\24\0\3\130\6\0\16\130\1\u0184\11\130\2\0\33\130"+
    "\4\0\1\4\1\0\1\4\5\0\7\4\1\104\3\33"+
    "\2\4\4\0\20\33\1\u0185\7\33\2\0\1\130\32\33"+
    "\4\0\1\4\1\0\1\4\5\0\7\4\1\104\3\33"+
    "\2\4\4\0\1\u0186\27\33\2\0\1\130\32\33\4\0"+
    "\1\4\1\0\1\4\5\0\7\4\1\104\3\33\2\4"+
    "\4\0\20\33\1\u0187\7\33\2\0\1\130\32\33\4\0"+
    "\1\4\1\0\1\4\5\0\7\4\1\104\3\33\2\4"+
    "\4\0\25\33\1\u0188\2\33\2\0\1\130\32\33\4\0"+
    "\1\4\1\0\1\4\5\0\7\4\1\104\3\33\2\4"+
    "\4\0\4\33\1\u0189\23\33\2\0\1\130\32\33\4\0"+
    "\1\4\1\0\1\4\5\0\7\4\1\104\3\33\2\4"+
    "\4\0\30\33\2\0\1\130\6\33\1\u018a\23\33\4\0"+
    "\1\4\1\0\1\4\5\0\7\4\1\104\3\33\2\4"+
    "\4\0\30\33\2\0\1\130\12\33\1\u018b\17\33\4\0"+
    "\1\4\1\0\1\4\5\0\7\4\1\104\3\33\2\4"+
    "\4\0\30\33\2\0\1\130\4\33\1\u018c\25\33\4\0"+
    "\1\4\1\0\1\4\5\0\7\4\1\104\3\33\2\4"+
    "\4\0\30\33\2\0\1\130\4\33\1\u018d\25\33\4\0"+
    "\1\4\1\0\1\4\5\0\7\4\1\104\3\33\2\4"+
    "\4\0\30\33\2\0\1\130\12\33\1\u018e\17\33\4\0"+
    "\1\4\1\0\1\4\5\0\7\4\1\104\3\33\2\4"+
    "\4\0\30\33\2\0\1\130\22\33\1\u018f\7\33\4\0"+
    "\1\4\1\0\1\4\5\0\7\4\1\104\3\33\2\4"+
    "\4\0\30\33\2\0\1\130\21\33\1\u0190\10\33\4\0"+
    "\1\4\1\0\1\4\5\0\7\4\1\104\3\33\2\4"+
    "\4\0\30\33\2\0\1\130\14\33\1\u0191\15\33\4\0"+
    "\1\4\1\0\1\4\5\0\7\4\1\104\3\33\2\4"+
    "\4\0\30\33\2\0\1\130\14\33\1\u0192\15\33\4\0"+
    "\1\4\1\0\1\4\5\0\7\4\1\104\3\33\2\4"+
    "\4\0\30\33\2\0\1\130\4\33\1\u0193\25\33\4\0"+
    "\1\4\1\0\1\4\5\0\5\4\1\u0194\1\4\1\104"+
    "\3\33\2\4\4\0\30\33\2\0\1\130\32\33\4\0"+
    "\1\4\1\0\1\4\5\0\7\4\1\104\3\33\2\4"+
    "\4\0\30\33\2\0\1\130\22\33\1\u0195\7\33\4\0"+
    "\1\4\1\0\1\4\5\0\7\4\1\104\3\33\2\4"+
    "\4\0\30\33\2\0\1\130\15\33\1\u0196\14\33\4\0"+
    "\1\4\1\0\1\4\5\0\7\4\1\104\3\33\2\4"+
    "\4\0\30\33\2\0\1\130\7\33\1\u0197\22\33\4\0"+
    "\1\4\1\0\1\4\5\0\7\4\1\104\3\33\2\4"+
    "\4\0\30\33\2\0\1\130\6\33\1\u0198\23\33\4\0"+
    "\1\4\1\0\1\4\5\0\7\4\1\104\3\33\2\4"+
    "\4\0\30\33\2\0\1\130\10\33\1\u0199\21\33\4\0"+
    "\1\4\1\0\1\4\5\0\7\4\1\104\3\33\2\4"+
    "\4\0\30\33\2\0\1\130\16\33\1\u019a\13\33\4\0"+
    "\1\4\1\0\1\4\5\0\7\4\1\104\3\33\2\4"+
    "\4\0\30\33\2\0\1\130\4\33\1\u019b\25\33\4\0"+
    "\1\4\1\0\1\4\5\0\7\4\1\104\3\33\2\4"+
    "\4\0\30\33\2\0\1\130\4\33\1\u019c\25\33\4\0"+
    "\1\4\1\0\1\4\5\0\7\4\1\104\3\33\2\4"+
    "\4\0\30\33\2\0\1\130\10\33\1\u019d\21\33\4\0"+
    "\1\4\1\0\1\4\5\0\7\4\1\104\3\33\2\4"+
    "\4\0\30\33\2\0\1\130\13\33\1\u019e\16\33\4\0"+
    "\1\4\1\0\1\4\5\0\7\4\1\104\3\33\2\4"+
    "\4\0\30\33\2\0\1\130\16\33\1\u019f\13\33\4\0"+
    "\1\4\1\0\1\4\5\0\7\4\1\104\3\33\2\4"+
    "\4\0\30\33\2\0\1\130\23\33\1\u01a0\6\33\4\0"+
    "\1\4\1\0\1\4\5\0\5\4\1\u01a1\1\4\1\104"+
    "\3\33\2\4\4\0\30\33\2\0\1\130\32\33\4\0"+
    "\1\4\1\0\1\4\5\0\7\4\1\104\3\33\2\4"+
    "\4\0\30\33\2\0\1\130\4\33\1\u01a2\25\33\4\0"+
    "\1\4\1\0\1\4\5\0\7\4\1\104\3\33\2\4"+
    "\4\0\30\33\2\0\1\130\15\33\1\u01a3\14\33\4\0"+
    "\1\4\1\0\1\4\5\0\5\4\1\u01a4\1\4\1\104"+
    "\3\33\2\4\4\0\30\33\2\0\1\130\32\33\4\0"+
    "\1\4\1\0\1\4\5\0\7\4\1\104\3\33\2\4"+
    "\4\0\30\33\2\0\1\130\4\33\1\u01a5\25\33\4\0"+
    "\1\4\1\0\1\4\5\0\7\4\1\104\3\33\2\4"+
    "\4\0\30\33\2\0\1\130\7\33\1\u01a6\22\33\4\0"+
    "\1\4\1\0\1\4\5\0\7\4\1\104\3\33\2\4"+
    "\4\0\30\33\2\0\1\130\16\33\1\u01a7\13\33\4\0"+
    "\1\4\1\0\1\4\5\0\7\4\1\104\3\u01a8\2\4"+
    "\4\0\30\4\3\0\32\4\4\0\1\4\1\0\1\4"+
    "\5\0\6\4\1\225\1\104\3\u01a9\2\4\4\0\30\4"+
    "\3\0\32\4\4\0\1\4\1\0\1\4\5\0\7\4"+
    "\1\104\3\u01aa\2\4\4\0\30\4\3\0\32\4\4\0"+
    "\1\u0156\1\0\1\u0156\5\0\7\u0156\1\227\5\u0156\4\0"+
    "\30\u0156\3\0\32\u0156\103\0\1\u01ab\116\0\1\u01ac\136\0"+
    "\1\u01ad\74\0\1\u01ae\55\0\3\u01af\6\0\6\u01af\25\0"+
    "\6\u01af\64\0\1\u01b0\140\0\1\u01b1\123\0\1\u01b2\75\0"+
    "\1\u01b3\127\0\1\u01b4\132\0\1\u01b5\117\0\1\u01b6\126\0"+
    "\1\u01b7\117\0\1\u01b8\114\0\1\u01b9\106\0\1\u01ba\147\0"+
    "\1\u01bb\115\0\1\u01bc\45\0\16\u0101\1\u01bd\103\u0101\65\0"+
    "\1\u01be\35\0\1\4\1\0\1\4\5\0\7\4\1\104"+
    "\3\33\2\4\4\0\30\33\2\0\1\u01bf\32\33\4\0"+
    "\1\4\1\0\1\4\5\0\4\4\1\u01c0\2\4\1\104"+
    "\3\33\2\4\4\0\30\33\2\0\1\130\32\33\4\0"+
    "\1\4\1\0\1\4\5\0\7\4\1\104\3\33\2\4"+
    "\4\0\22\33\1\u01c1\5\33\2\0\1\130\32\33\24\0"+
    "\3\130\6\0\27\130\1\u01c2\2\0\33\130\24\0\3\130"+
    "\6\0\22\130\1\u01c3\5\130\2\0\33\130\24\0\3\130"+
    "\6\0\3\130\1\u01c4\24\130\2\0\33\130\24\0\3\130"+
    "\6\0\23\130\1\u01c5\4\130\2\0\33\130\24\0\3\130"+
    "\6\0\12\130\1\u01c6\15\130\2\0\33\130\24\0\3\130"+
    "\6\0\10\130\1\u01c7\17\130\2\0\33\130\24\0\3\130"+
    "\6\0\10\130\1\u01c8\17\130\2\0\33\130\24\0\3\130"+
    "\6\0\4\130\1\u01c9\23\130\2\0\33\130\24\0\3\130"+
    "\6\0\14\130\1\u01ca\13\130\2\0\33\130\24\0\3\130"+
    "\6\0\22\130\1\u01cb\5\130\2\0\33\130\24\0\3\130"+
    "\6\0\13\130\1\u01cc\14\130\2\0\33\130\4\0\1\4"+
    "\1\0\1\4\5\0\7\4\1\104\3\33\2\4\4\0"+
    "\16\33\1\u01cd\11\33\2\0\1\130\32\33\4\0\1\4"+
    "\1\0\1\4\5\0\7\4\1\104\3\33\2\4\4\0"+
    "\13\33\1\u01ce\14\33\2\0\1\130\32\33\4\0\1\4"+
    "\1\0\1\4\5\0\7\4\1\104\3\33\2\4\4\0"+
    "\22\33\1\u01cf\5\33\2\0\1\130\32\33\4\0\1\4"+
    "\1\0\1\4\5\0\7\4\1\104\3\33\2\4\4\0"+
    "\17\33\1\u01d0\10\33\2\0\1\130\32\33\4\0\1\4"+
    "\1\0\1\4\5\0\7\4\1\104\3\33\2\4\4\0"+
    "\20\33\1\u01d1\7\33\2\0\1\130\32\33\24\0\3\130"+
    "\6\0\13\130\1\u01d2\14\130\2\0\33\130\24\0\3\130"+
    "\6\0\1\u01d3\27\130\2\0\33\130\4\0\1\4\1\0"+
    "\1\4\5\0\7\4\1\104\3\33\2\4\4\0\4\33"+
    "\1\u01d4\23\33\2\0\1\130\32\33\4\0\1\4\1\0"+
    "\1\4\5\0\7\4\1\104\3\33\2\4\4\0\22\33"+
    "\1\u01d5\5\33\2\0\1\130\32\33\4\0\1\4\1\0"+
    "\1\4\5\0\7\4\1\104\3\33\2\4\4\0\21\33"+
    "\1\u01d6\6\33\2\0\1\130\32\33\4\0\1\4\1\0"+
    "\1\4\5\0\7\4\1\104\3\33\2\4\4\0\7\33"+
    "\1\u01d7\20\33\2\0\1\130\32\33\4\0\1\4\1\0"+
    "\1\4\5\0\7\4\1\104\3\33\2\4\4\0\30\33"+
    "\2\0\1\130\21\33\1\u01d8\10\33\4\0\1\4\1\0"+
    "\1\4\5\0\7\4\1\104\3\33\2\4\4\0\30\33"+
    "\2\0\1\130\1\u01d9\31\33\4\0\1\4\1\0\1\4"+
    "\5\0\7\4\1\104\3\33\2\4\4\0\30\33\2\0"+
    "\1\130\21\33\1\u01da\10\33\4\0\1\4\1\0\1\4"+
    "\5\0\7\4\1\104\3\33\2\4\4\0\30\33\2\0"+
    "\1\130\1\33\1\u01db\30\33\4\0\1\4\1\0\1\4"+
    "\5\0\7\4\1\104\3\33\2\4\4\0\30\33\2\0"+
    "\1\130\4\33\1\u01dc\25\33\4\0\1\4\1\0\1\4"+
    "\5\0\7\4\1\104\3\33\2\4\4\0\30\33\2\0"+
    "\1\130\15\33\1\u01dd\14\33\4\0\1\4\1\0\1\4"+
    "\5\0\7\4\1\104\3\33\2\4\4\0\30\33\2\0"+
    "\1\130\1\u01de\31\33\4\0\1\4\1\0\1\4\5\0"+
    "\7\4\1\104\5\4\4\0\30\4\3\0\5\4\1\u01df"+
    "\14\4\1\u01e0\7\4\4\0\1\4\1\0\1\4\5\0"+
    "\7\4\1\104\3\33\2\4\4\0\30\33\2\0\1\130"+
    "\10\33\1\u01e1\21\33\4\0\1\4\1\0\1\4\5\0"+
    "\7\4\1\104\3\33\2\4\4\0\30\33\2\0\1\130"+
    "\23\33\1\u01e2\6\33\4\0\1\4\1\0\1\4\5\0"+
    "\7\4\1\104\3\33\2\4\4\0\30\33\2\0\1\130"+
    "\4\33\1\u01e3\25\33\4\0\1\4\1\0\1\4\5\0"+
    "\7\4\1\104\3\33\2\4\4\0\30\33\2\0\1\130"+
    "\5\33\1\u01e4\24\33\4\0\1\4\1\0\1\4\5\0"+
    "\7\4\1\104\3\33\2\4\4\0\30\33\2\0\1\130"+
    "\15\33\1\u01e5\14\33\4\0\1\4\1\0\1\4\5\0"+
    "\7\4\1\104\3\33\2\4\4\0\30\33\2\0\1\130"+
    "\21\33\1\u01e6\10\33\4\0\1\4\1\0\1\4\5\0"+
    "\7\4\1\104\3\33\2\4\4\0\30\33\2\0\1\130"+
    "\2\33\1\u01e7\27\33\4\0\1\4\1\0\1\4\5\0"+
    "\7\4\1\104\3\33\2\4\4\0\30\33\2\0\1\130"+
    "\4\33\1\u01e8\25\33\4\0\1\4\1\0\1\4\5\0"+
    "\7\4\1\104\5\4\4\0\30\4\3\0\22\4\1\u01e9"+
    "\7\4\4\0\1\4\1\0\1\4\5\0\7\4\1\104"+
    "\3\33\2\4\4\0\30\33\2\0\1\130\21\33\1\u01ea"+
    "\10\33\4\0\1\4\1\0\1\4\5\0\7\4\1\104"+
    "\3\33\2\4\4\0\30\33\2\0\1\130\6\33\1\u01eb"+
    "\23\33\4\0\1\4\1\0\1\4\5\0\7\4\1\104"+
    "\5\4\4\0\30\4\3\0\1\u01ec\31\4\4\0\1\4"+
    "\1\0\1\4\5\0\7\4\1\104\3\33\2\4\4\0"+
    "\30\33\2\0\1\130\26\33\1\u01ed\3\33\4\0\1\4"+
    "\1\0\1\4\5\0\6\4\1\225\1\104\3\u01ee\2\4"+
    "\4\0\30\4\3\0\32\4\4\0\1\4\1\0\1\4"+
    "\5\0\7\4\1\104\3\u01ef\2\4\4\0\30\4\3\0"+
    "\32\4\10\0\1\u01f0\205\0\1\u01f1\115\0\1\u01f2\136\0"+
    "\1\u01f3\40\0\3\u01f4\6\0\6\u01f4\25\0\6\u01f4\110\0"+
    "\1\u01f5\114\0\1\u01f6\102\0\1\u01f7\141\0\1\u01f8\110\0"+
    "\1\u01f9\117\0\1\u01fa\121\0\1\u01fb\115\0\1\u01fc\131\0"+
    "\1\u01fd\127\0\1\u01fe\112\0\1\u01ff\54\0\16\u0101\1\u01bd"+
    "\11\u0101\1\u0200\71\u0101\100\0\1\u0201\42\0\3\130\6\0"+
    "\10\130\1\u0202\17\130\2\0\33\130\4\0\1\4\1\0"+
    "\1\4\5\0\7\4\1\104\3\33\2\4\4\0\4\33"+
    "\1\u0203\23\33\2\0\1\130\32\33\24\0\3\130\6\0"+
    "\16\130\1\u0204\11\130\2\0\33\130\24\0\3\130\6\0"+
    "\22\130\1\u0205\5\130\2\0\33\130\24\0\3\130\6\0"+
    "\16\130\1\u0206\11\130\2\0\33\130\24\0\3\130\6\0"+
    "\17\130\1\u0207\10\130\2\0\33\130\24\0\3\130\6\0"+
    "\2\130\1\u0208\25\130\2\0\33\130\24\0\3\130\6\0"+
    "\1\u0209\27\130\2\0\33\130\24\0\3\130\6\0\4\130"+
    "\1\u020a\23\130\2\0\33\130\4\0\1\4\1\0\1\4"+
    "\5\0\7\4\1\104\3\33\2\4\4\0\15\33\1\u020b"+
    "\12\33\2\0\1\130\32\33\4\0\1\4\1\0\1\4"+
    "\5\0\7\4\1\104\3\33\2\4\4\0\1\u020c\27\33"+
    "\2\0\1\130\32\33\4\0\1\4\1\0\1\4\5\0"+
    "\7\4\1\104\3\33\2\4\4\0\30\33\2\0\1\u020d"+
    "\32\33\24\0\3\130\6\0\4\130\1\u020e\23\130\2\0"+
    "\33\130\24\0\3\130\6\0\3\130\1\u020f\24\130\2\0"+
    "\33\130\4\0\1\4\1\0\1\4\5\0\7\4\1\104"+
    "\3\33\2\4\4\0\2\33\1\u0210\25\33\2\0\1\130"+
    "\32\33\4\0\1\4\1\0\1\4\5\0\7\4\1\104"+
    "\3\33\2\4\4\0\4\33\1\u0211\23\33\2\0\1\130"+
    "\32\33\4\0\1\4\1\0\1\4\5\0\7\4\1\104"+
    "\3\33\2\4\4\0\10\33\1\u0212\17\33\2\0\1\130"+
    "\32\33\4\0\1\4\1\0\1\4\5\0\7\4\1\104"+
    "\3\33\2\4\4\0\30\33\2\0\1\130\16\33\1\u0213"+
    "\13\33\4\0\1\4\1\0\1\4\5\0\7\4\1\104"+
    "\3\33\2\4\4\0\30\33\2\0\1\130\15\33\1\u0214"+
    "\14\33\4\0\1\4\1\0\1\4\5\0\7\4\1\104"+
    "\3\33\2\4\4\0\30\33\2\0\1\130\16\33\1\u0215"+
    "\13\33\4\0\1\4\1\0\1\4\5\0\7\4\1\104"+
    "\3\33\2\4\4\0\30\33\2\0\1\130\13\33\1\u0216"+
    "\16\33\4\0\1\4\1\0\1\4\5\0\7\4\1\104"+
    "\5\4\4\0\30\4\3\0\1\u0217\31\4\4\0\1\4"+
    "\1\0\1\4\5\0\7\4\1\104\5\4\4\0\30\4"+
    "\3\0\10\4\1\u0218\21\4\4\0\1\4\1\0\1\4"+
    "\5\0\7\4\1\104\3\33\2\4\4\0\30\33\2\0"+
    "\1\130\1\u0219\31\33\4\0\1\4\1\0\1\4\5\0"+
    "\7\4\1\104\3\33\2\4\4\0\30\33\2\0\1\130"+
    "\21\33\1\u021a\10\33\4\0\1\4\1\0\1\4\5\0"+
    "\7\4\1\104\3\33\2\4\4\0\30\33\2\0\1\130"+
    "\30\33\1\u021b\1\33\4\0\1\4\1\0\1\4\5\0"+
    "\7\4\1\104\3\33\2\4\4\0\30\33\2\0\1\130"+
    "\12\33\1\u021c\17\33\4\0\1\4\1\0\1\4\5\0"+
    "\7\4\1\104\5\4\4\0\30\4\3\0\4\4\1\u021d"+
    "\25\4\4\0\1\4\1\0\1\4\5\0\7\4\1\104"+
    "\5\4\4\0\30\4\3\0\13\4\1\u021e\16\4\111\0"+
    "\1\u021f\20\0\1\u0220\201\0\1\u0221\55\0\3\u0222\6\0"+
    "\6\u0222\25\0\6\u0222\77\0\1\u0223\125\0\1\u0224\115\0"+
    "\1\u0225\122\0\1\u0226\104\0\1\u0227\117\0\1\u0228\125\0"+
    "\1\u0229\104\0\3\130\6\0\15\130\1\u022a\12\130\2\0"+
    "\33\130\4\0\1\4\1\0\1\4\5\0\7\4\1\104"+
    "\3\33\2\4\4\0\20\33\1\u022b\7\33\2\0\1\130"+
    "\32\33\24\0\3\130\6\0\15\130\1\u022c\12\130\2\0"+
    "\33\130\24\0\3\130\6\0\15\130\1\u022d\12\130\2\0"+
    "\33\130\24\0\3\130\6\0\22\130\1\u022e\5\130\2\0"+
    "\33\130\24\0\3\130\6\0\22\130\1\u022f\5\130\2\0"+
    "\33\130\24\0\3\130\6\0\20\130\1\u0230\7\130\2\0"+
    "\33\130\4\0\1\4\1\0\1\4\5\0\7\4\1\104"+
    "\3\33\2\4\4\0\30\33\2\0\1\u0231\32\33\4\0"+
    "\1\4\1\0\1\4\5\0\7\4\1\104\3\33\2\4"+
    "\4\0\20\33\1\u0232\7\33\2\0\1\130\32\33\24\0"+
    "\3\130\6\0\15\130\1\u0233\12\130\2\0\33\130\24\0"+
    "\3\130\6\0\1\u0234\27\130\2\0\33\130\14\0\1\u0235"+
    "\7\0\3\130\6\0\30\130\2\0\33\130\4\0\1\4"+
    "\1\0\1\4\5\0\7\4\1\104\3\33\2\4\4\0"+
    "\22\33\1\u0236\5\33\2\0\1\130\32\33\4\0\1\4"+
    "\1\0\1\4\5\0\7\4\1\104\3\33\2\4\4\0"+
    "\13\33\1\u0237\14\33\2\0\1\130\32\33\4\0\1\4"+
    "\1\0\1\4\5\0\7\4\1\104\3\33\2\4\4\0"+
    "\30\33\2\0\1\130\24\33\1\u0238\5\33\4\0\1\4"+
    "\1\0\1\4\5\0\7\4\1\104\3\33\2\4\4\0"+
    "\30\33\2\0\1\130\27\33\1\u0239\2\33\4\0\1\4"+
    "\1\0\1\4\5\0\7\4\1\104\5\4\4\0\30\4"+
    "\3\0\14\4\1\u023a\15\4\4\0\1\4\1\0\1\4"+
    "\5\0\7\4\1\104\5\4\4\0\30\4\3\0\31\4"+
    "\1\u023b\4\0\1\4\1\0\1\4\5\0\7\4\1\104"+
    "\5\4\4\0\30\4\3\0\21\4\1\u023c\10\4\4\0"+
    "\1\4\1\0\1\4\5\0\7\4\1\104\5\4\4\0"+
    "\30\4\3\0\10\4\1\u023d\21\4\10\0\1\u023e\121\0"+
    "\1\u023f\135\0\3\u0240\6\0\6\u0240\25\0\6\u0240\76\0"+
    "\1\u0241\121\0\1\u0242\126\0\1\u0243\121\0\1\u0244\117\0"+
    "\1\u0245\70\0\3\130\6\0\5\130\1\u0246\22\130\2\0"+
    "\33\130\4\0\1\4\1\0\1\4\5\0\7\4\1\104"+
    "\3\33\2\4\4\0\30\33\2\0\1\u0247\32\33\24\0"+
    "\3\130\6\0\10\130\1\u0248\17\130\2\0\33\130\24\0"+
    "\3\130\6\0\4\130\1\u0249\23\130\2\0\33\130\14\0"+
    "\1\u024a\7\0\3\u0231\6\0\30\u0231\2\0\1\130\32\u0231"+
    "\4\0\1\4\1\0\1\4\5\0\7\4\1\104\3\33"+
    "\2\4\4\0\30\33\2\0\1\u024b\32\33\24\0\3\130"+
    "\6\0\23\130\1\u024c\4\130\2\0\33\130\24\0\3\130"+
    "\6\0\22\130\1\u024d\5\130\2\0\33\130\15\0\1\u024e"+
    "\110\0\1\4\1\0\1\4\5\0\7\4\1\104\3\33"+
    "\2\4\4\0\4\33\1\u024f\23\33\2\0\1\130\32\33"+
    "\4\0\1\4\1\0\1\4\5\0\7\4\1\104\3\33"+
    "\2\4\4\0\30\33\2\0\1\130\15\33\1\u0250\14\33"+
    "\4\0\1\4\1\0\1\4\5\0\7\4\1\104\5\4"+
    "\4\0\30\4\3\0\10\4\1\u0251\21\4\4\0\1\4"+
    "\1\0\1\4\5\0\7\4\1\104\5\4\4\0\30\4"+
    "\3\0\4\4\1\u0252\25\4\4\0\1\4\1\0\1\4"+
    "\5\0\7\4\1\104\5\4\4\0\30\4\3\0\10\4"+
    "\1\u0253\21\4\4\0\1\4\1\0\1\4\5\0\7\4"+
    "\1\104\5\4\4\0\30\4\3\0\6\4\1\u0254\23\4"+
    "\45\0\1\u0255\115\0\1\u0256\104\0\3\130\6\0\16\130"+
    "\1\u0257\11\130\2\0\33\130\24\0\3\130\6\0\1\u0258"+
    "\27\130\2\0\33\130\24\0\3\130\6\0\15\130\1\u0259"+
    "\12\130\2\0\33\130\24\0\3\130\6\0\1\u025a\27\130"+
    "\2\0\33\130\15\0\1\u025b\130\0\3\130\6\0\15\130"+
    "\1\u025c\12\130\2\0\33\130\24\0\3\130\6\0\14\130"+
    "\1\u025d\13\130\2\0\33\130\24\0\3\130\6\0\16\130"+
    "\1\u025e\11\130\2\0\33\130\4\0\1\4\1\0\1\4"+
    "\5\0\7\4\1\104\3\33\2\4\4\0\30\33\2\0"+
    "\1\130\3\33\1\u025f\26\33\4\0\1\4\1\0\1\4"+
    "\5\0\7\4\1\104\5\4\4\0\30\4\3\0\13\4"+
    "\1\u0260\16\4\4\0\1\4\1\0\1\4\5\0\7\4"+
    "\1\104\5\4\4\0\30\4\3\0\5\4\1\u0261\24\4"+
    "\4\0\1\4\1\0\1\4\5\0\7\4\1\104\5\4"+
    "\4\0\30\4\3\0\15\4\1\u0262\14\4\52\0\1\u0263"+
    "\104\0\1\u0264\110\0\3\130\6\0\13\130\1\u0265\14\130"+
    "\2\0\33\130\24\0\3\130\6\0\6\130\1\u0266\21\130"+
    "\2\0\33\130\24\0\3\130\6\0\23\130\1\u0267\4\130"+
    "\2\0\33\130\24\0\3\130\6\0\20\130\1\u0268\7\130"+
    "\2\0\33\130\4\0\1\4\1\0\1\4\5\0\7\4"+
    "\1\104\5\4\4\0\30\4\3\0\30\4\1\u0269\1\4"+
    "\43\0\1\u026a\102\0\3\130\6\0\4\130\1\u026b\23\130"+
    "\2\0\33\130\24\0\3\130\6\0\14\130\1\u026c\13\130"+
    "\2\0\33\130\24\0\3\130\6\0\10\130\1\u026d\17\130"+
    "\2\0\33\130\24\0\3\130\6\0\1\u026e\27\130\2\0"+
    "\33\130\24\0\3\130\6\0\16\130\1\u026f\11\130\2\0"+
    "\33\130\24\0\3\130\6\0\22\130\1\u0270\5\130\2\0"+
    "\33\130\24\0\3\130\6\0\16\130\1\u0271\11\130\2\0"+
    "\33\130\24\0\3\130\6\0\20\130\1\u0272\7\130\2\0"+
    "\33\130\24\0\3\130\6\0\10\130\1\u0273\17\130\2\0"+
    "\33\130\24\0\3\130\6\0\16\130\1\u0274\11\130\2\0"+
    "\33\130\3\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[40262];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\42\1\2\11\23\1\1\11"+
    "\1\1\1\11\4\1\1\0\1\1\1\11\5\0\1\11"+
    "\2\0\1\1\1\0\3\11\1\0\75\1\1\11\4\1"+
    "\6\0\1\11\1\0\1\1\2\0\120\1\4\0\1\1"+
    "\7\0\1\11\4\0\124\1\6\0\1\11\1\0\1\11"+
    "\1\0\1\11\14\0\75\1\7\0\1\11\1\0\1\11"+
    "\12\0\61\1\1\11\3\0\1\1\1\11\1\0\1\11"+
    "\1\0\1\11\3\0\1\11\2\0\1\1\1\11\35\1"+
    "\1\0\1\11\3\0\1\11\4\0\1\11\13\1\1\0"+
    "\10\1\5\11\1\0\1\11\1\0\4\1\1\0\3\1"+
    "\1\11\6\1\2\0\4\1\1\11\7\1\1\0\1\11"+
    "\5\1\1\11\12\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[628];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
     int longitudToken=0;

  /* Declaración de tokens que serán reconocidos por el analizador sintáctico */
  private Symbol symbol(int type) {
    return new Symbol(type);
  }
  


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexerCC(java.io.Reader in) {
      yyline = 1; 
    yychar = 1; 
    
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':  // fall through
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { 
  return new Symbol(symbol.EOF, null);

 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { longitudToken = yytext().length(); yychar+=longitudToken; 
 System.out.println("Error de carácter: "+ yytext());
//ReporteError.agregarError(new Error("Lexico", yytext(), "Caracter no reconocido"+ yytext(), yyline, (int)yychar));
            }
          // fall through
          case 151: break;
          case 2:
            { longitudToken = yytext().length(); yychar+=longitudToken; System.out.println(" txt "+yytext()); return new Symbol(symbol.TEXT, yyline, (int)yychar, yytext() );
            }
          // fall through
          case 152: break;
          case 3:
            { yychar=0; yyline=+1;
            }
          // fall through
          case 153: break;
          case 4:
            { longitudToken = yytext().length();   yychar+=longitudToken  ;
            }
          // fall through
          case 154: break;
          case 5:
            { yychar+=1   ;  System.out.println(yytext()); return new Symbol(symbol.NOT           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 155: break;
          case 6:
            { yychar+=1  ; System.out.println(yytext());  return new Symbol(symbol.COMILLAS       ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 156: break;
          case 7:
            { yychar+=1  ; System.out.println(yytext());  return new Symbol(symbol.COMILLA_SIMPLE ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 157: break;
          case 8:
            { yychar+=1  ; System.out.println(yytext());  return new Symbol(symbol.PAR_IZQ ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 158: break;
          case 9:
            { yychar+=1  ; System.out.println(yytext());  return new Symbol(symbol.PAR_DER ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 159: break;
          case 10:
            { yychar+=1   ;  System.out.println(yytext()); return new Symbol(symbol.PLUS          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 160: break;
          case 11:
            { yychar+=1   ;  System.out.println(yytext()); return new Symbol(symbol.SUMA          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 161: break;
          case 12:
            { yychar+=1   ;  System.out.println(yytext()); return new Symbol(symbol.RESTA         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 162: break;
          case 13:
            { yychar+=1   ;  System.out.println(yytext()); return new Symbol(symbol.DIVISION      ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 163: break;
          case 14:
            { longitudToken = yytext().length();   yychar+=longitudToken;  System.out.println(yytext());       return new Symbol(symbol.NUMERO       , yyline  ,  (int)yychar, yytext() );
            }
          // fall through
          case 164: break;
          case 15:
            { yychar+=1  ; System.out.println(yytext());  return new Symbol(symbol.DOS_PUNTOS     ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 165: break;
          case 16:
            { yychar+=1  ; System.out.println(yytext());  return new Symbol(symbol.PUNTO_COMA     ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 166: break;
          case 17:
            { yychar+=1   ;  System.out.println(yytext()); return new Symbol(symbol.MENOR         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 167: break;
          case 18:
            { yychar+=1   ;  System.out.println(yytext()); return new Symbol(symbol.IGUAL         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 168: break;
          case 19:
            { yychar+=1   ;  System.out.println(yytext()); return new Symbol(symbol.MAYOR         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 169: break;
          case 20:
            { yychar+=1  ; System.out.println(yytext());  return new Symbol(symbol.CORCHETE_IZQ   ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 170: break;
          case 21:
            { yychar+=1  ; System.out.println(yytext());  return new Symbol(symbol.CORCHETE_DER   ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 171: break;
          case 22:
            { yychar+=1  ; System.out.println(yytext());  return new Symbol(symbol.LLAVE_IZQ      ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 172: break;
          case 23:
            { yychar+=1  ; System.out.println(yytext());  return new Symbol(symbol.LLAVE_DER      ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 173: break;
          case 24:
            { longitudToken = yytext().length();   yychar+=longitudToken;  System.out.println(yytext());       return new Symbol(symbol.ENTERO       , yyline  ,  (int)yychar, yytext() );
            }
          // fall through
          case 174: break;
          case 25:
            { longitudToken = yytext().length(); yychar+=longitudToken;
            }
          // fall through
          case 175: break;
          case 26:
            { yychar+=2   ;  System.out.println(yytext()); return new Symbol(symbol.DESIGUALDAD   ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 176: break;
          case 27:
            { yychar+=2   ;  System.out.println(yytext()); return new Symbol(symbol.AND           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 177: break;
          case 28:
            { yychar+=2   ;  System.out.println(yytext()); return new Symbol(symbol.MENOR_IGUAL   ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 178: break;
          case 29:
            { yychar+=2   ;  System.out.println(yytext()); return new Symbol(symbol.COMPARACION   ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 179: break;
          case 30:
            { yychar+=2   ;  System.out.println(yytext()); return new Symbol(symbol.MAYOR_IGUAL   ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 180: break;
          case 31:
            { longitudToken = yytext().length();   yychar+=longitudToken;  System.out.println("id " +yytext());       return new Symbol(symbol.IDENTIFICADOR, yyline  ,  (int)yychar, yytext() );
            }
          // fall through
          case 181: break;
          case 32:
            { yychar+=2   ;  System.out.println(yytext()); return new Symbol(symbol.IF            ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 182: break;
          case 33:
            { yychar+=2   ;  System.out.println(yytext()); return new Symbol(symbol.ID            ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 183: break;
          case 34:
            { yychar+=2   ;  System.out.println(yytext()); return new Symbol(symbol.OR            ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 184: break;
          case 35:
            { longitudToken = yytext().length();   yychar+=longitudToken  ; System.out.println(yytext());  return new Symbol(symbol.CHARS           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 185: break;
          case 36:
            { yychar+=5   ;  System.out.println(yytext()); return new Symbol(symbol.PIXEL         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 186: break;
          case 37:
            { yychar+=3   ;  System.out.println(yytext()); return new Symbol(symbol.ASC           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 187: break;
          case 38:
            { yychar+=3  ; System.out.println(yytext());  return new Symbol(symbol.P              ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 188: break;
          case 39:
            { yychar+=3   ;  System.out.println(yytext()); return new Symbol(symbol.END           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 189: break;
          case 40:
            { yychar+=3   ;  System.out.println(yytext()); return new Symbol(symbol.ALT           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 190: break;
          case 41:
            { yychar+=3  ;  System.out.println(yytext()); return new Symbol(symbol.RED            ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 191: break;
          case 42:
            { yychar+=3   ;  System.out.println(yytext()); return new Symbol(symbol.ROW           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 192: break;
          case 43:
            { yychar+=3   ;  System.out.println(yytext()); return new Symbol(symbol.SRC           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 193: break;
          case 44:
            { longitudToken = yytext().length();   yychar+=longitudToken;  System.out.println(yytext());       return new Symbol(symbol.DECIMAL      , yyline  ,  (int)yychar, yytext() );
            }
          // fall through
          case 194: break;
          case 45:
            { longitudToken = yytext().length(); yychar+=longitudToken; System.out.println(" url "+yytext()); return new Symbol(symbol.URL, yyline, (int)yychar, yytext() );
            }
          // fall through
          case 195: break;
          case 46:
            { longitudToken = yytext().length();  yychar+=longitudToken   ;  System.out.println(yytext()); return new Symbol(symbol.HEXADECIMAL  ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 196: break;
          case 47:
            { yychar+=4  ; System.out.println(yytext());  return new Symbol(symbol.P_C            ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 197: break;
          case 48:
            { yychar+=4  ; System.out.println(yytext());  return new Symbol(symbol.BR             ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 198: break;
          case 49:
            { yychar+=4  ; System.out.println(yytext());  return new Symbol(symbol.HTML           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 199: break;
          case 50:
            { yychar+=4  ; System.out.println(yytext());  return new Symbol(symbol.H1             ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 200: break;
          case 51:
            { yychar+=4   ;  System.out.println(yytext()); return new Symbol(symbol.DESC          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 201: break;
          case 52:
            { yychar+=4   ;  System.out.println(yytext()); return new Symbol(symbol.ELSE          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 202: break;
          case 53:
            { yychar+=4   ;  System.out.println(yytext()); return new Symbol(symbol.EXIT          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 203: break;
          case 54:
            { yychar+=4   ;  System.out.println(yytext()); return new Symbol(symbol.INIT          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 204: break;
          case 55:
            { yychar+=4   ;  System.out.println(yytext()); return new Symbol(symbol.THEN          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 205: break;
          case 56:
            { yychar+=4  ;  System.out.println(yytext()); return new Symbol(symbol.AQUA           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 206: break;
          case 57:
            { yychar+=4  ;  System.out.println(yytext()); return new Symbol(symbol.BLUE           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 207: break;
          case 58:
            { yychar+=4   ;  System.out.println(yytext()); return new Symbol(symbol.CHAR          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 208: break;
          case 59:
            { yychar+=4   ;  System.out.println(yytext()); return new Symbol(symbol.COLS          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 209: break;
          case 60:
            { yychar+=4  ;  System.out.println(yytext()); return new Symbol(symbol.GRAY           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 210: break;
          case 61:
            { yychar+=4  ;  System.out.println(yytext()); return new Symbol(symbol.HREF           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 211: break;
          case 62:
            { yychar+=4   ;  System.out.println(yytext()); return new Symbol(symbol.LEFT          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 212: break;
          case 63:
            { yychar+=4  ;  System.out.println(yytext()); return new Symbol(symbol.LIME           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 213: break;
          case 64:
            { yychar+=4   ;  System.out.println(yytext()); return new Symbol(symbol.NAME          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 214: break;
          case 65:
            { yychar+=4  ;  System.out.println(yytext()); return new Symbol(symbol.NAVY           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 215: break;
          case 66:
            { yychar+=4   ;  System.out.println(yytext()); return new Symbol(symbol.ROWS          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 216: break;
          case 67:
            { yychar+=5  ;  System.out.println(yytext()); return new Symbol(symbol.TEAL           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 217: break;
          case 68:
            { yychar+=4   ;  System.out.println(yytext()); return new Symbol(symbol.TEXT          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 218: break;
          case 69:
            { yychar+=4   ;  System.out.println(yytext()); return new Symbol(symbol.TRUE          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 219: break;
          case 70:
            { yychar+=4   ;  System.out.println(yytext()); return new Symbol(symbol.TYPE          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 220: break;
          case 71:
            { yychar+=5  ; System.out.println(yytext());  return new Symbol(symbol.BR_C           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 221: break;
          case 72:
            { yychar+=5  ; System.out.println(yytext());  return new Symbol(symbol.HTML_C         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 222: break;
          case 73:
            { yychar+=5  ; System.out.println(yytext());  return new Symbol(symbol.H1_C           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 223: break;
          case 74:
            { yychar+=5  ; System.out.println(yytext());  return new Symbol(symbol.DIV            ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 224: break;
          case 75:
            { yychar+=5  ; System.out.println(yytext());  return new Symbol(symbol.IMG            ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 225: break;
          case 76:
            { yychar+=5   ;  System.out.println(yytext()); return new Symbol(symbol.WHILE         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 226: break;
          case 77:
            { yychar+=5  ;  System.out.println(yytext()); return new Symbol(symbol.BLACK          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 227: break;
          case 78:
            { yychar+=5   ;  System.out.println(yytext()); return new Symbol(symbol.COLOR         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 228: break;
          case 79:
            { yychar+=5   ;  System.out.println(yytext()); return new Symbol(symbol.FALSE         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 229: break;
          case 80:
            { yychar+=5  ;  System.out.println(yytext()); return new Symbol(symbol.GREEN          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 230: break;
          case 81:
            { yychar+=5  ;  System.out.println(yytext()); return new Symbol(symbol.OLIVE          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 231: break;
          case 82:
            { yychar+=5   ;  System.out.println(yytext()); return new Symbol(symbol.RADIO         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 232: break;
          case 83:
            { yychar+=5   ;  System.out.println(yytext()); return new Symbol(symbol.RIGHT         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 233: break;
          case 84:
            { yychar+=5  ;  System.out.println(yytext()); return new Symbol(symbol.WHITE          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 234: break;
          case 85:
            { yychar+=5   ;  System.out.println(yytext()); return new Symbol(symbol.WIDTH         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 235: break;
          case 86:
            { yychar+=6  ; System.out.println(yytext());  return new Symbol(symbol.DIV_C          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 236: break;
          case 87:
            { yychar+=6  ; System.out.println(yytext());  return new Symbol(symbol.IMG_C          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 237: break;
          case 88:
            { yychar+=5  ;  System.out.println(yytext()); return new Symbol(symbol.ARIAL          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 238: break;
          case 89:
            { yychar+=6  ; System.out.println(yytext());  return new Symbol(symbol.BODY           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 239: break;
          case 90:
            { yychar+=6  ; System.out.println(yytext());  return new Symbol(symbol.HEAD           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 240: break;
          case 91:
            { yychar+=6  ; System.out.println("link " + yytext());  return new Symbol(symbol.LINK           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 241: break;
          case 92:
            { yychar+=6  ; System.out.println(yytext());  return new Symbol(symbol.SPAM           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 242: break;
          case 93:
            { yychar+=6   ;  System.out.println(yytext()); return new Symbol(symbol.HUNTIL        ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 243: break;
          case 94:
            { yychar+=6   ;  System.out.println(yytext()); return new Symbol(symbol.INSERT        ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 244: break;
          case 95:
            { yychar+=4   ;  System.out.println(yytext()); return new Symbol(symbol.REPEAT        ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 245: break;
          case 96:
            { yychar+=6   ;  System.out.println(yytext()); return new Symbol(symbol.CENTER        ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 246: break;
          case 97:
            { yychar+=5   ;  System.out.println(yytext()); return new Symbol(symbol.CLASS         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 247: break;
          case 98:
            { yychar+=3   ;  System.out.println(yytext()); return new Symbol(symbol.COLUMN        ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 248: break;
          case 99:
            { yychar+=6   ;  System.out.println(yytext()); return new Symbol(symbol.HEIGHT        ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 249: break;
          case 100:
            { yychar+=6  ;  System.out.println(yytext()); return new Symbol(symbol.MARRON         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 250: break;
          case 101:
            { yychar+=6   ;  System.out.println(yytext()); return new Symbol(symbol.NUMBER        ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 251: break;
          case 102:
            { yychar+=6  ;  System.out.println(yytext()); return new Symbol(symbol.PURPLE         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 252: break;
          case 103:
            { yychar+=6  ;  System.out.println(yytext()); return new Symbol(symbol.SILVER         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 253: break;
          case 104:
            { yychar+=6   ;  System.out.println(yytext()); return new Symbol(symbol.STRING        ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 254: break;
          case 105:
            { yychar+=6  ;  System.out.println(yytext()); return new Symbol(symbol.YELLOW         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 255: break;
          case 106:
            { yychar+=5   ;  System.out.println(yytext()); return new Symbol(symbol.ARIAL         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 256: break;
          case 107:
            { yychar+=7  ; System.out.println(yytext());  return new Symbol(symbol.BODY_C         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 257: break;
          case 108:
            { yychar+=7  ; System.out.println(yytext());  return new Symbol(symbol.HEAD_C         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 258: break;
          case 109:
            { yychar+=7  ; System.out.println(yytext());  return new Symbol(symbol.LINK_C         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 259: break;
          case 110:
            { yychar+=7  ; System.out.println("spam "+yytext());  return new Symbol(symbol.SPAM_C         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 260: break;
          case 111:
            { yychar+=7   ;  System.out.println(yytext()); return new Symbol(symbol.GLOBAL        ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 261: break;
          case 112:
            { yychar+=7  ; System.out.println(yytext());  return new Symbol(symbol.INPUT          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 262: break;
          case 113:
            { yychar+=7  ; System.out.println(yytext());  return new Symbol(symbol.TITLE          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 263: break;
          case 114:
            { yychar+=7   ;  System.out.println(yytext()); return new Symbol(symbol.REVERSE       ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 264: break;
          case 115:
            { yychar+=7   ;  System.out.println(yytext()); return new Symbol(symbol.BOOLEAN       ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 265: break;
          case 116:
            { yychar+=7   ;  System.out.println(yytext()); return new Symbol(symbol.DECIMAL       ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 266: break;
          case 117:
            { yychar+=7  ;  System.out.println(yytext()); return new Symbol(symbol.FUCHSIA        ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 267: break;
          case 118:
            { yychar+=8   ;  System.out.println(yytext()); return new Symbol(symbol.INTEGER       ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 268: break;
          case 119:
            { yychar+=7   ;  System.out.println(yytext()); return new Symbol(symbol.JUSTIFY       ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 269: break;
          case 120:
            { yychar+=7   ;  System.out.println(yytext()); return new Symbol(symbol.ONCLICK       ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 270: break;
          case 121:
            { yychar+=6   ;  System.out.println(yytext()); return new Symbol(symbol.GENEVA        ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 271: break;
          case 122:
            { yychar+=8  ; System.out.println(yytext());  return new Symbol(symbol.INPUT_C        ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 272: break;
          case 123:
            { yychar+=8  ; System.out.println(yytext());  return new Symbol(symbol.TITLE_C        ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 273: break;
          case 124:
            { yychar+=8  ; System.out.println(yytext());  return new Symbol(symbol.BUTTON         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 274: break;
          case 125:
            { yychar+=8  ; System.out.println(yytext());  return new Symbol(symbol.OPTION         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 275: break;
          case 126:
            { yychar+=8  ; System.out.println(yytext());  return new Symbol(symbol.SELECTED       ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 276: break;
          case 127:
            { yychar+=9   ;  System.out.println(yytext()); return new Symbol(symbol.REDIRECT      ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 277: break;
          case 128:
            { yychar+=8   ;  System.out.println(yytext()); return new Symbol(symbol.CHECKBOX      ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 278: break;
          case 129:
            { yychar+=7   ;  System.out.println(yytext()); return new Symbol(symbol.COURIER       ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 279: break;
          case 130:
            { yychar+=7   ;  System.out.println(yytext()); return new Symbol(symbol.VERDANA       ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 280: break;
          case 131:
            { yychar+=9  ; System.out.println(yytext());  return new Symbol(symbol.BUTTON_C       ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 281: break;
          case 132:
            { yychar+=9  ; System.out.println(yytext());  return new Symbol(symbol.OPTION_C       ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 282: break;
          case 133:
            { yychar+=9  ; System.out.println(yytext());  return new Symbol(symbol.SELECTED_C     ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 283: break;
          case 134:
            { yychar+= 9  ;  System.out.println(yytext()); return new Symbol(symbol.ON_LOAD       ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 284: break;
          case 135:
            { yychar+=9   ;  System.out.println(yytext()); return new Symbol(symbol.THENWHILE     ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 285: break;
          case 136:
            { yychar+=9   ;  System.out.println(yytext()); return new Symbol(symbol.FONT_SIZE     ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 286: break;
          case 137:
            { yychar+=10  ;  System.out.println(yytext()); return new Symbol(symbol.ALERT_INFO    ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 287: break;
          case 138:
            { yychar+=10 ; System.out.println(yytext());  return new Symbol(symbol.TEXTOAREA      ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 288: break;
          case 139:
            { longitudToken = yytext().length();   yychar+=longitudToken;  System.out.println(yytext());       return new Symbol(symbol.FUNTION      , yyline  ,  (int)yychar, yytext() );
            }
          // fall through
          case 289: break;
          case 140:
            { yychar+=10  ;  System.out.println(yytext()); return new Symbol(symbol.LETIMPAR_NUM  ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 290: break;
          case 141:
            { yychar+=10 ;  System.out.println(yytext()); return new Symbol(symbol.BACKGROUND     ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 291: break;
          case 142:
            { yychar+=10  ;  System.out.println(yytext()); return new Symbol(symbol.SANS_SERIF    ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 292: break;
          case 143:
            { yychar+=10  ;  System.out.println(yytext()); return new Symbol(symbol.TEXT_ALIGN    ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 293: break;
          case 144:
            { yychar+=11 ; System.out.println(yytext());  return new Symbol(symbol.TEXTOAREA_C    ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 294: break;
          case 145:
            { yychar+=11  ;  System.out.println(yytext()); return new Symbol(symbol.SCRIPTING     ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 295: break;
          case 146:
            { yychar+=11  ;  System.out.println(yytext()); return new Symbol(symbol.FONT_FAMI     ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 296: break;
          case 147:
            { yychar+=12  ;  System.out.println(yytext()); return new Symbol(symbol.SCRIPTING_C   ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 297: break;
          case 148:
            { yychar+=12  ;  System.out.println(yytext()); return new Symbol(symbol.LETIMPAR_NUM  ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 298: break;
          case 149:
            { yychar+=13  ;  System.out.println(yytext()); return new Symbol(symbol.NUM_ALEATORIO ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 299: break;
          case 150:
            { yychar+=18  ;  System.out.println(yytext()); return new Symbol(symbol.CARACTER_RAMD ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 300: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
