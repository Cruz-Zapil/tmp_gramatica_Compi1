// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/main/jflex/LexerCC.lex


import java_cup.runtime.Symbol;


@SuppressWarnings("fallthrough")
public class LexerCC implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\36\u0200\1\u0300\1\u0400\266\u0200\10\u0500\u1020\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\12\0\1\1\3\2\22\0\1\3\1\4\1\5\1\6"+
    "\2\0\1\7\1\10\1\11\1\12\1\13\1\14\1\0"+
    "\1\15\1\16\1\17\1\20\1\21\10\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\0\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\0\1\64\1\0\1\65\1\0\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\66"+
    "\1\67\1\70\7\0\1\2\252\0\2\71\115\0\1\72"+
    "\u01a8\0\2\2\u0100\0\1\73\325\0\u0100\2";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\2\1\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\1\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\1\26\23\1\24"+
    "\1\25\1\26\1\1\1\27\2\1\1\12\1\13\1\30"+
    "\1\15\1\31\1\32\1\0\1\33\1\0\1\34\5\0"+
    "\1\35\1\36\1\37\1\0\4\23\1\0\25\23\1\40"+
    "\1\41\4\23\1\0\12\23\1\0\4\23\1\0\7\23"+
    "\1\0\1\23\1\42\1\40\1\41\4\0\2\30\1\0"+
    "\1\30\1\0\1\43\1\0\1\44\2\0\1\23\1\45"+
    "\2\23\1\0\2\46\22\23\1\47\2\23\2\0\2\23"+
    "\1\0\1\23\1\0\1\50\1\23\1\0\10\23\1\0"+
    "\5\23\2\0\1\23\1\0\3\23\1\0\5\23\1\0"+
    "\4\23\1\51\3\23\1\52\1\0\2\23\1\53\1\23"+
    "\1\0\7\23\1\0\1\23\1\0\1\23\2\0\1\53"+
    "\1\0\2\30\1\54\1\30\1\55\7\0\1\56\4\0"+
    "\1\23\1\57\1\23\1\0\1\23\1\0\1\23\1\60"+
    "\3\23\1\61\2\23\1\0\1\23\1\62\1\23\1\62"+
    "\2\23\1\63\1\23\1\64\1\23\1\0\1\65\4\23"+
    "\1\0\6\23\6\0\1\23\1\0\2\66\2\67\2\70"+
    "\1\23\1\0\4\23\1\71\2\23\1\0\1\72\1\23"+
    "\1\73\2\23\1\73\1\0\1\23\1\0\1\74\2\23"+
    "\1\0\2\75\1\23\1\76\1\77\3\23\1\0\4\23"+
    "\1\0\1\23\1\0\3\23\2\100\1\0\1\23\1\0"+
    "\2\23\2\0\1\101\1\102\1\103\1\104\1\105\3\23"+
    "\2\0\1\23\1\0\1\23\1\0\2\30\1\54\1\30"+
    "\2\0\1\106\1\0\1\107\1\0\1\110\14\0\1\23"+
    "\2\111\1\23\1\0\2\112\4\23\1\0\2\113\1\114"+
    "\2\23\1\0\2\23\2\115\1\23\1\116\2\23\1\0"+
    "\6\23\1\0\1\116\4\0\1\23\1\0\2\117\1\0"+
    "\1\23\1\0\1\23\1\0\1\23\1\120\1\23\1\0"+
    "\1\23\1\0\2\23\1\0\1\23\1\0\2\23\1\0"+
    "\3\23\2\121\1\23\1\0\2\23\2\122\1\23\1\0"+
    "\2\23\2\123\1\0\2\23\3\0\2\23\1\124\1\125"+
    "\1\124\1\125\2\126\1\23\1\0\2\30\1\54\3\0"+
    "\1\127\1\0\1\130\12\0\2\23\1\0\2\23\1\131"+
    "\1\23\1\0\1\132\1\23\1\0\1\133\1\23\1\134"+
    "\1\23\2\135\1\23\1\0\1\23\1\0\1\23\1\136"+
    "\2\23\3\0\1\136\1\23\3\0\1\23\1\0\1\23"+
    "\1\0\1\137\2\140\2\141\1\142\1\23\1\142\1\23"+
    "\1\0\2\23\1\0\1\143\1\144\2\23\1\0\1\23"+
    "\1\145\1\23\1\0\1\146\1\23\2\0\1\147\2\150"+
    "\1\147\1\0\2\23\1\151\2\0\1\54\1\55\1\152"+
    "\1\0\1\153\1\0\1\154\3\0\1\155\2\0\1\31"+
    "\1\156\1\23\1\0\1\23\1\0\1\157\2\23\1\0"+
    "\2\160\1\23\1\161\1\23\1\0\1\23\1\0\2\23"+
    "\2\162\1\161\1\0\2\163\2\0\2\164\1\23\1\0"+
    "\1\165\2\166\2\23\1\0\1\23\2\167\2\23\1\0"+
    "\2\170\2\0\1\23\1\0\1\171\1\165\2\0\1\172"+
    "\4\0\1\173\1\23\1\0\1\23\1\0\1\23\2\174"+
    "\1\175\2\176\1\23\1\0\1\177\1\23\1\177\2\0"+
    "\1\23\1\0\2\23\1\0\1\23\1\0\2\200\2\0"+
    "\1\23\1\0\1\55\1\201\1\202\1\0\1\203\1\0"+
    "\1\23\1\0\1\23\1\0\2\23\1\0\1\23\1\0"+
    "\1\204\1\0\2\23\1\0\1\23\1\205\2\0\2\206"+
    "\2\0\2\207\2\210\2\23\1\0\1\211\1\0\1\212"+
    "\1\23\1\213\1\0\1\23\1\214\1\215\1\0\1\216"+
    "\1\23\2\217\1\220\1\23\1\0\1\23\1\221\1\23"+
    "\2\222\1\23\1\0\1\23\2\223\4\23\1\0\2\224";

  private static int [] zzUnpackAction() {
    int [] result = new int[759];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\170\0\170\0\264\0\360\0\u012c"+
    "\0\u0168\0\u01a4\0\170\0\170\0\170\0\170\0\170\0\u01e0"+
    "\0\u021c\0\u0258\0\170\0\170\0\u0294\0\u02d0\0\u030c\0\u0348"+
    "\0\u0384\0\u03c0\0\u03fc\0\u0438\0\u0474\0\u04b0\0\u04ec\0\u0528"+
    "\0\u0564\0\u05a0\0\u05dc\0\u0618\0\u0654\0\u0690\0\u06cc\0\u0708"+
    "\0\u0744\0\u0780\0\u07bc\0\u07f8\0\u0834\0\u0870\0\170\0\170"+
    "\0\170\0\u08ac\0\170\0\u08e8\0\u0924\0\u0960\0\u0960\0\u099c"+
    "\0\u09d8\0\u0a14\0\170\0\360\0\360\0\u0a50\0\170\0\u0a8c"+
    "\0\u0ac8\0\u021c\0\u0b04\0\u0b40\0\170\0\170\0\170\0\u0b7c"+
    "\0\u0bb8\0\u0bf4\0\u0c30\0\u0c6c\0\u0ca8\0\u0ce4\0\u0d20\0\u0d5c"+
    "\0\u0d98\0\u0dd4\0\u0e10\0\u0e4c\0\u0e88\0\u0ec4\0\u0f00\0\u0f3c"+
    "\0\u0f78\0\u0fb4\0\u0ff0\0\u102c\0\u1068\0\u10a4\0\u10e0\0\u111c"+
    "\0\u1158\0\u1194\0\u05dc\0\u05dc\0\u11d0\0\u120c\0\u1248\0\u1284"+
    "\0\u12c0\0\u12fc\0\u1338\0\u1374\0\u13b0\0\u13ec\0\u1428\0\u1464"+
    "\0\u14a0\0\u14dc\0\u1518\0\u1554\0\u1590\0\u15cc\0\u1608\0\u1644"+
    "\0\u1680\0\u16bc\0\u16f8\0\u1734\0\u1770\0\u17ac\0\u17e8\0\u1824"+
    "\0\u1860\0\u189c\0\170\0\170\0\170\0\u18d8\0\u1914\0\u1950"+
    "\0\u198c\0\u19c8\0\u1a04\0\u1a40\0\u1a7c\0\u1ab8\0\170\0\u1af4"+
    "\0\170\0\u1b30\0\u1b6c\0\u1ba8\0\u05dc\0\u1be4\0\u1c20\0\u1c5c"+
    "\0\u05dc\0\170\0\u1c98\0\u1cd4\0\u1d10\0\u1d4c\0\u1d88\0\u1dc4"+
    "\0\u1e00\0\u1e3c\0\u1e78\0\u1eb4\0\u1ef0\0\u1f2c\0\u1f68\0\u1fa4"+
    "\0\u1fe0\0\u201c\0\u2058\0\u2094\0\u05dc\0\u20d0\0\u210c\0\u2148"+
    "\0\u2184\0\u21c0\0\u21fc\0\u2238\0\u2274\0\u22b0\0\u05dc\0\u22ec"+
    "\0\u2328\0\u2364\0\u23a0\0\u23dc\0\u2418\0\u2454\0\u2490\0\u24cc"+
    "\0\u2508\0\u2544\0\u2580\0\u25bc\0\u25f8\0\u2634\0\u2670\0\u26ac"+
    "\0\u26e8\0\u2724\0\u2760\0\u279c\0\u27d8\0\u2814\0\u2850\0\u288c"+
    "\0\u28c8\0\u2904\0\u2940\0\u297c\0\u29b8\0\u29f4\0\u2a30\0\u2a6c"+
    "\0\u2aa8\0\u2ae4\0\u2b20\0\u2b5c\0\u2b98\0\u2bd4\0\u2c10\0\u2c4c"+
    "\0\u2c88\0\u05dc\0\u2cc4\0\u2d00\0\u2d3c\0\u2d78\0\u2db4\0\u2df0"+
    "\0\u2e2c\0\u2e68\0\u2ea4\0\u2ee0\0\u2f1c\0\u2f58\0\u2f94\0\u2fd0"+
    "\0\u300c\0\170\0\u3048\0\u3084\0\u30c0\0\u30fc\0\u3138\0\u3174"+
    "\0\u31b0\0\u31ec\0\u3228\0\u3264\0\u32a0\0\u32dc\0\u3318\0\170"+
    "\0\u3354\0\u3390\0\u33cc\0\u3408\0\u3444\0\u05dc\0\u3480\0\u34bc"+
    "\0\u34f8\0\u3534\0\u3570\0\u05dc\0\u35ac\0\u35e8\0\u3624\0\u05dc"+
    "\0\u3660\0\u369c\0\u36d8\0\u3714\0\u05dc\0\u3750\0\170\0\u378c"+
    "\0\u37c8\0\u05dc\0\u3804\0\u05dc\0\u3840\0\u387c\0\u05dc\0\u38b8"+
    "\0\u38f4\0\u3930\0\u396c\0\u39a8\0\u39e4\0\u3a20\0\u3a5c\0\u3a98"+
    "\0\u3ad4\0\u3b10\0\u3b4c\0\u3b88\0\u3bc4\0\u3c00\0\u3c3c\0\u3c78"+
    "\0\u3cb4\0\u3cf0\0\u05dc\0\170\0\u05dc\0\170\0\u05dc\0\170"+
    "\0\u3d2c\0\u3d68\0\u3da4\0\u3de0\0\u3e1c\0\u3e58\0\u05dc\0\u3e94"+
    "\0\u3ed0\0\u3f0c\0\u05dc\0\u3f48\0\u05dc\0\u3f84\0\u3fc0\0\170"+
    "\0\u3ffc\0\u4038\0\u4074\0\u05dc\0\u40b0\0\u40ec\0\u4128\0\u05dc"+
    "\0\170\0\u4164\0\u05dc\0\u05dc\0\u41a0\0\u41dc\0\u4218\0\u4254"+
    "\0\u4290\0\u42cc\0\u4308\0\u4344\0\u4380\0\u43bc\0\u43f8\0\u4434"+
    "\0\u4470\0\u44ac\0\u05dc\0\170\0\u44e8\0\u4524\0\u4560\0\u459c"+
    "\0\u45d8\0\u4614\0\u4650\0\u05dc\0\u468c\0\u46c8\0\u05dc\0\u05dc"+
    "\0\u4704\0\u4740\0\u477c\0\u47b8\0\u47f4\0\u4830\0\u486c\0\u48a8"+
    "\0\u48e4\0\u4920\0\u495c\0\u4998\0\u021c\0\u49d4\0\u4a10\0\170"+
    "\0\u4a4c\0\170\0\u4a88\0\170\0\u4ac4\0\u4b00\0\u4b3c\0\u4b78"+
    "\0\u4bb4\0\u4bf0\0\u4c2c\0\u4c68\0\u4ca4\0\u4ce0\0\u4d1c\0\u4d58"+
    "\0\u4d94\0\u05dc\0\170\0\u4dd0\0\u4e0c\0\u05dc\0\170\0\u4e48"+
    "\0\u4e84\0\u4ec0\0\u4efc\0\u4f38\0\u05dc\0\170\0\u05dc\0\u4f74"+
    "\0\u4fb0\0\u4fec\0\u5028\0\u5064\0\u05dc\0\170\0\u50a0\0\u05dc"+
    "\0\u50dc\0\u5118\0\u5154\0\u5190\0\u51cc\0\u5208\0\u5244\0\u5280"+
    "\0\u52bc\0\u52f8\0\170\0\u5334\0\u5370\0\u53ac\0\u53e8\0\u5424"+
    "\0\u5460\0\u05dc\0\170\0\u549c\0\u54d8\0\u5514\0\u5550\0\u558c"+
    "\0\u55c8\0\u05dc\0\u5604\0\u5640\0\u567c\0\u56b8\0\u56f4\0\u5730"+
    "\0\u576c\0\u57a8\0\u57e4\0\u5820\0\u585c\0\u5898\0\u58d4\0\u5910"+
    "\0\u594c\0\u05dc\0\170\0\u5988\0\u59c4\0\u5a00\0\u5a3c\0\u05dc"+
    "\0\170\0\u5a78\0\u5ab4\0\u5af0\0\u5b2c\0\u05dc\0\170\0\u5b68"+
    "\0\u5ba4\0\u5be0\0\u5c1c\0\u5c58\0\u5c94\0\u5cd0\0\u5d0c\0\u05dc"+
    "\0\u05dc\0\170\0\170\0\u05dc\0\170\0\u5d48\0\u5d84\0\170"+
    "\0\u5dc0\0\u5dfc\0\u5e38\0\u5e74\0\u5eb0\0\170\0\u5eec\0\170"+
    "\0\u5f28\0\u5f64\0\u5fa0\0\u5fdc\0\u6018\0\u6054\0\u6090\0\u60cc"+
    "\0\u6108\0\u6144\0\u6180\0\u61bc\0\u61f8\0\u6234\0\u6270\0\u05dc"+
    "\0\u62ac\0\u62e8\0\u05dc\0\u6324\0\u6360\0\u05dc\0\u639c\0\u05dc"+
    "\0\u63d8\0\u05dc\0\170\0\u6414\0\u6450\0\u648c\0\u64c8\0\u6504"+
    "\0\u05dc\0\u6540\0\u657c\0\u65b8\0\u65f4\0\u6630\0\170\0\u666c"+
    "\0\u66a8\0\u66e4\0\u6720\0\u675c\0\u6798\0\u67d4\0\u6810\0\u05dc"+
    "\0\u05dc\0\170\0\u05dc\0\170\0\u05dc\0\u684c\0\170\0\u6888"+
    "\0\u68c4\0\u6900\0\u693c\0\u6978\0\u05dc\0\u05dc\0\u69b4\0\u69f0"+
    "\0\u6a2c\0\u6a68\0\u05dc\0\u6aa4\0\u6ae0\0\u05dc\0\u6b1c\0\u6b58"+
    "\0\u6b94\0\u05dc\0\u05dc\0\170\0\170\0\u6bd0\0\u6c0c\0\u6c48"+
    "\0\u05dc\0\u6c84\0\u5dc0\0\170\0\u6cc0\0\170\0\u6cfc\0\170"+
    "\0\u6d38\0\170\0\u6d74\0\u6db0\0\u6dec\0\170\0\u6e28\0\u6e64"+
    "\0\u33cc\0\170\0\u6ea0\0\u6edc\0\u6f18\0\u6f54\0\u05dc\0\u6f90"+
    "\0\u6fcc\0\u7008\0\u05dc\0\170\0\u7044\0\u05dc\0\u7080\0\u70bc"+
    "\0\u70f8\0\u7134\0\u7170\0\u71ac\0\u05dc\0\170\0\170\0\u71e8"+
    "\0\u05dc\0\170\0\u7224\0\u7260\0\u05dc\0\170\0\u729c\0\u72d8"+
    "\0\u05dc\0\u05dc\0\170\0\u7314\0\u7350\0\u738c\0\u73c8\0\u05dc"+
    "\0\170\0\u7404\0\u7440\0\u747c\0\u05dc\0\170\0\u74b8\0\u74f4"+
    "\0\u7530\0\u756c\0\u05dc\0\170\0\u75a8\0\u75e4\0\170\0\u7620"+
    "\0\u765c\0\u7698\0\u76d4\0\170\0\u7710\0\u774c\0\u7788\0\u77c4"+
    "\0\u7800\0\u05dc\0\170\0\u05dc\0\u05dc\0\170\0\u783c\0\u7878"+
    "\0\u05dc\0\u78b4\0\170\0\u78f0\0\u792c\0\u7968\0\u79a4\0\u79e0"+
    "\0\u7a1c\0\u7a58\0\u7a94\0\u7ad0\0\u05dc\0\170\0\u7b0c\0\u7b48"+
    "\0\u7b84\0\u7bc0\0\170\0\170\0\170\0\u7bfc\0\170\0\u7c38"+
    "\0\u7c74\0\u7cb0\0\u7cec\0\u7d28\0\u7d64\0\u7da0\0\u7ddc\0\u7e18"+
    "\0\u7e54\0\170\0\u7e90\0\u7ecc\0\u7f08\0\u7f44\0\u7f80\0\170"+
    "\0\u7fbc\0\u7ff8\0\u05dc\0\170\0\u8034\0\u8070\0\u05dc\0\170"+
    "\0\u05dc\0\170\0\u80ac\0\u80e8\0\u8124\0\u05dc\0\u8160\0\170"+
    "\0\u819c\0\u05dc\0\u81d8\0\u8214\0\170\0\170\0\u8250\0\170"+
    "\0\u828c\0\u05dc\0\170\0\170\0\u82c8\0\u8304\0\u8340\0\170"+
    "\0\u837c\0\u05dc\0\170\0\u83b8\0\u83f4\0\u8430\0\u05dc\0\170"+
    "\0\u846c\0\u84a8\0\u84e4\0\u8520\0\u855c\0\u05dc\0\170";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[759];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\3\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\3\1\20"+
    "\1\21\2\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\43\1\51\1\52\1\53\1\43\1\54\1\55\1\43"+
    "\1\56\1\43\1\57\1\60\1\3\1\61\1\62\1\63"+
    "\1\64\1\65\2\3\1\4\1\3\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\66\1\67"+
    "\1\3\1\20\1\70\2\71\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\43\1\51\1\52\1\53\1\43\1\54"+
    "\1\55\1\43\1\56\1\43\1\57\1\60\1\3\1\61"+
    "\1\62\1\63\1\64\1\65\1\3\100\0\1\72\21\0"+
    "\1\73\45\0\5\74\1\75\66\74\20\0\3\76\6\0"+
    "\6\76\44\0\1\77\64\0\74\100\33\0\1\101\60\0"+
    "\3\102\25\0\1\103\43\0\3\22\25\0\1\103\27\0"+
    "\1\104\21\0\1\105\73\0\1\106\73\0\1\107\104\0"+
    "\1\110\54\0\3\43\6\0\13\43\1\111\4\43\1\112"+
    "\1\113\1\114\7\43\2\0\1\43\4\0\1\115\21\0"+
    "\3\43\6\0\1\116\12\43\1\117\2\43\1\120\13\43"+
    "\2\0\1\43\26\0\3\43\6\0\1\121\3\43\1\122"+
    "\2\43\1\123\3\43\1\124\2\43\1\125\13\43\2\0"+
    "\1\126\26\0\3\43\6\0\4\43\1\127\25\43\2\0"+
    "\1\43\26\0\3\43\6\0\13\43\1\130\1\43\1\131"+
    "\11\43\1\132\2\43\2\0\1\43\26\0\3\43\6\0"+
    "\1\133\15\43\1\134\5\43\1\135\5\43\2\0\1\43"+
    "\26\0\3\43\6\0\4\43\1\136\14\43\1\137\10\43"+
    "\2\0\1\43\26\0\3\43\6\0\4\43\1\140\14\43"+
    "\1\141\2\43\1\142\5\43\2\0\1\43\26\0\3\43"+
    "\6\0\3\43\1\143\1\43\1\144\7\43\1\145\14\43"+
    "\2\0\1\43\26\0\3\43\6\0\24\43\1\146\5\43"+
    "\2\0\1\43\26\0\3\43\6\0\32\43\2\0\1\43"+
    "\26\0\3\43\6\0\4\43\1\147\3\43\1\150\21\43"+
    "\2\0\1\43\3\0\1\151\22\0\3\43\6\0\1\152"+
    "\31\43\2\0\1\43\26\0\3\43\6\0\1\153\23\43"+
    "\1\154\5\43\2\0\1\43\26\0\3\43\6\0\13\43"+
    "\1\155\1\43\1\156\14\43\2\0\1\43\26\0\3\43"+
    "\6\0\24\43\1\157\5\43\2\0\1\43\26\0\3\43"+
    "\6\0\1\160\3\43\1\161\3\43\1\162\5\43\1\163"+
    "\13\43\2\0\1\43\3\0\1\164\22\0\3\43\6\0"+
    "\1\165\7\43\1\166\10\43\1\167\1\43\1\170\6\43"+
    "\2\0\1\43\3\0\1\171\22\0\3\43\6\0\4\43"+
    "\1\172\2\43\1\173\11\43\1\174\6\43\1\175\1\43"+
    "\2\0\1\43\26\0\3\43\6\0\4\43\1\176\25\43"+
    "\2\0\1\43\26\0\3\43\6\0\7\43\1\177\1\200"+
    "\21\43\2\0\1\43\3\0\1\201\22\0\3\43\6\0"+
    "\4\43\1\202\25\43\2\0\1\43\75\0\1\203\40\0"+
    "\1\204\1\0\1\205\7\0\1\206\56\0\1\207\7\0"+
    "\1\171\10\0\1\210\1\0\1\211\14\0\1\171\22\0"+
    "\1\212\2\213\67\0\1\214\1\0\3\215\25\0\1\103"+
    "\41\0\1\214\1\0\3\71\25\0\1\103\23\0\1\72"+
    "\1\0\72\72\20\0\3\216\6\0\6\216\45\0\1\217"+
    "\150\0\1\220\66\0\1\221\30\0\1\222\122\0\1\223"+
    "\47\0\3\43\6\0\4\43\1\224\16\43\1\225\6\43"+
    "\2\0\1\43\26\0\3\43\6\0\24\43\1\226\5\43"+
    "\2\0\1\43\26\0\3\43\6\0\10\43\1\227\21\43"+
    "\2\0\1\43\3\0\1\230\22\0\3\43\6\0\2\43"+
    "\1\231\27\43\2\0\1\43\41\0\1\232\60\0\3\43"+
    "\6\0\2\43\1\233\27\43\2\0\1\43\26\0\3\43"+
    "\6\0\1\234\23\43\1\235\5\43\2\0\1\43\26\0"+
    "\3\43\6\0\16\43\1\236\13\43\2\0\1\43\26\0"+
    "\3\43\6\0\21\43\1\237\10\43\2\0\1\43\26\0"+
    "\3\43\6\0\15\43\1\240\14\43\2\0\1\43\26\0"+
    "\3\43\6\0\1\241\3\43\1\242\25\43\2\0\1\43"+
    "\26\0\3\43\6\0\1\243\31\43\2\0\1\43\26\0"+
    "\3\43\6\0\13\43\1\244\10\43\1\245\5\43\2\0"+
    "\1\43\26\0\3\43\6\0\1\43\1\246\1\247\1\250"+
    "\3\43\1\251\1\252\2\43\1\253\2\43\1\254\1\255"+
    "\2\43\1\256\1\257\6\43\2\0\1\43\3\0\1\260"+
    "\1\261\21\0\3\43\6\0\2\43\1\262\17\43\1\263"+
    "\7\43\2\0\1\43\4\0\1\264\21\0\3\43\6\0"+
    "\22\43\1\265\7\43\2\0\1\43\4\0\1\266\21\0"+
    "\3\43\6\0\3\43\1\267\26\43\2\0\1\43\26\0"+
    "\3\43\6\0\10\43\1\270\21\43\2\0\1\43\3\0"+
    "\1\271\22\0\3\43\6\0\13\43\1\272\16\43\2\0"+
    "\1\43\26\0\3\43\6\0\15\43\1\273\14\43\2\0"+
    "\1\43\26\0\3\43\6\0\2\43\1\274\12\43\1\275"+
    "\14\43\2\0\1\43\26\0\3\43\6\0\15\43\1\276"+
    "\14\43\2\0\1\43\26\0\3\43\6\0\1\277\3\43"+
    "\1\300\25\43\2\0\1\43\26\0\3\43\6\0\10\43"+
    "\1\301\21\43\2\0\1\43\3\0\1\302\22\0\3\43"+
    "\6\0\4\43\1\303\25\43\2\0\1\43\26\0\3\43"+
    "\6\0\15\43\1\304\14\43\2\0\1\43\26\0\3\43"+
    "\6\0\10\43\1\305\11\43\1\306\1\307\6\43\2\0"+
    "\1\43\3\0\1\310\1\311\21\0\3\43\6\0\22\43"+
    "\1\312\7\43\2\0\1\43\4\0\1\313\21\0\3\43"+
    "\6\0\5\43\1\314\15\43\1\315\6\43\2\0\1\43"+
    "\26\0\3\43\6\0\14\43\1\316\15\43\2\0\1\43"+
    "\53\0\1\317\46\0\3\43\6\0\21\43\1\320\10\43"+
    "\2\0\1\43\26\0\3\43\6\0\14\43\1\321\10\43"+
    "\1\322\4\43\2\0\1\43\26\0\3\43\6\0\14\43"+
    "\1\323\15\43\2\0\1\43\26\0\3\43\6\0\10\43"+
    "\1\324\21\43\2\0\1\43\3\0\1\325\22\0\3\43"+
    "\6\0\2\43\1\326\27\43\2\0\1\327\26\0\3\43"+
    "\6\0\21\43\1\330\10\43\2\0\1\43\26\0\3\43"+
    "\6\0\3\43\1\331\26\43\2\0\1\43\26\0\3\43"+
    "\6\0\3\43\1\332\13\43\1\333\5\43\1\334\4\43"+
    "\2\0\1\43\26\0\3\43\6\0\6\43\1\335\23\43"+
    "\2\0\1\43\26\0\3\43\6\0\26\43\1\336\3\43"+
    "\2\0\1\43\45\0\1\337\54\0\3\43\6\0\15\43"+
    "\1\340\14\43\2\0\1\43\26\0\3\43\6\0\13\43"+
    "\1\341\16\43\2\0\1\43\26\0\3\43\6\0\2\43"+
    "\1\342\27\43\2\0\1\43\26\0\3\43\6\0\21\43"+
    "\1\343\10\43\2\0\1\43\52\0\1\344\47\0\3\43"+
    "\6\0\1\345\26\43\1\346\2\43\2\0\1\43\26\0"+
    "\3\43\6\0\4\43\1\347\25\43\2\0\1\43\26\0"+
    "\3\43\6\0\24\43\1\350\5\43\2\0\1\43\26\0"+
    "\3\43\6\0\17\43\1\351\12\43\2\0\1\43\26\0"+
    "\3\43\6\0\21\43\1\352\10\43\2\0\1\43\26\0"+
    "\3\43\6\0\10\43\1\353\21\43\2\0\1\43\3\0"+
    "\1\354\22\0\3\43\6\0\3\43\1\355\26\43\2\0"+
    "\1\43\42\0\1\356\57\0\3\43\6\0\13\43\1\357"+
    "\16\43\2\0\1\43\47\0\1\310\11\0\1\311\1\360"+
    "\14\0\1\310\1\311\47\0\1\361\60\0\1\362\112\0"+
    "\1\363\37\0\1\214\1\0\3\364\67\0\1\214\1\0"+
    "\3\365\71\0\3\366\71\0\3\367\25\0\1\103\43\0"+
    "\3\370\6\0\6\370\67\0\1\371\1\372\1\373\3\0"+
    "\1\374\1\375\2\0\1\376\2\0\1\377\1\u0100\2\0"+
    "\1\u0101\1\u0102\14\0\1\375\1\u0101\16\0\1\u0103\125\0"+
    "\1\u0104\44\0\3\43\6\0\21\43\1\u0105\10\43\2\0"+
    "\1\43\26\0\3\43\6\0\1\u0106\31\43\2\0\1\43"+
    "\26\0\3\43\6\0\1\u0107\31\43\2\0\1\43\37\0"+
    "\1\u0108\62\0\3\43\6\0\12\43\1\u0109\17\43\2\0"+
    "\1\43\5\0\1\u010a\20\0\3\43\6\0\2\43\1\u010b"+
    "\27\43\2\0\1\43\26\0\3\43\6\0\4\43\1\u010c"+
    "\25\43\2\0\1\43\26\0\3\43\6\0\13\43\1\u010d"+
    "\16\43\2\0\1\43\26\0\3\43\6\0\1\u010e\31\43"+
    "\2\0\1\43\26\0\3\43\6\0\23\43\1\u010f\6\43"+
    "\2\0\1\43\26\0\3\43\6\0\21\43\1\u0110\10\43"+
    "\2\0\1\43\26\0\3\43\6\0\2\43\1\u0111\27\43"+
    "\2\0\1\43\26\0\3\43\6\0\22\43\1\u0112\7\43"+
    "\2\0\1\43\4\0\1\u0113\21\0\3\43\6\0\16\43"+
    "\1\u0114\3\43\1\u0115\1\43\1\u0116\5\43\2\0\1\43"+
    "\4\0\1\u0117\21\0\3\43\6\0\21\43\1\u0118\10\43"+
    "\2\0\1\43\26\0\3\43\6\0\16\43\1\u0119\2\43"+
    "\1\u011a\2\43\1\u011b\5\43\2\0\1\43\26\0\3\43"+
    "\6\0\2\43\1\u011c\27\43\2\0\1\43\26\0\3\43"+
    "\6\0\10\43\1\u011d\21\43\2\0\1\43\3\0\1\u011e"+
    "\22\0\1\43\1\u011f\1\43\6\0\4\43\1\u0120\25\43"+
    "\2\0\1\43\26\0\3\43\6\0\14\43\1\u0121\1\u0122"+
    "\14\43\2\0\1\43\26\0\3\43\6\0\10\43\1\u0123"+
    "\21\43\2\0\1\43\3\0\1\u0124\22\0\3\43\6\0"+
    "\17\43\1\u0125\12\43\2\0\1\43\26\0\3\43\6\0"+
    "\2\43\1\u0126\1\43\1\u0127\12\43\1\u0128\12\43\2\0"+
    "\1\43\26\0\3\43\6\0\4\43\1\u0129\3\43\1\u012a"+
    "\21\43\2\0\1\43\3\0\1\u012b\47\0\1\u012c\1\u012d"+
    "\60\0\1\u012e\1\0\1\u012f\12\0\1\u0130\43\0\3\43"+
    "\6\0\10\43\1\u0131\21\43\2\0\1\43\3\0\1\u0132"+
    "\22\0\3\43\6\0\2\43\1\u0133\27\43\2\0\1\43"+
    "\41\0\1\u0134\60\0\3\43\6\0\4\43\1\u0135\25\43"+
    "\2\0\1\43\43\0\1\u0136\56\0\3\43\6\0\23\43"+
    "\1\u0137\6\43\2\0\1\43\62\0\1\u0138\37\0\3\43"+
    "\6\0\22\43\1\u0139\7\43\2\0\1\43\4\0\1\u013a"+
    "\21\0\3\43\6\0\23\43\1\u013b\6\43\2\0\1\43"+
    "\26\0\3\43\6\0\7\43\1\u013c\22\43\2\0\1\43"+
    "\26\0\3\43\6\0\23\43\1\u013d\6\43\2\0\1\43"+
    "\26\0\3\43\6\0\4\43\1\u013e\25\43\2\0\1\43"+
    "\26\0\3\43\6\0\30\43\1\u013f\1\43\2\0\1\43"+
    "\26\0\3\43\6\0\4\43\1\u0140\25\43\2\0\1\43"+
    "\26\0\3\43\6\0\6\43\1\u0141\23\43\2\0\1\43"+
    "\45\0\1\u0142\54\0\3\43\6\0\5\43\1\u0143\24\43"+
    "\2\0\1\43\26\0\3\43\6\0\23\43\1\u0144\6\43"+
    "\2\0\1\43\26\0\3\43\6\0\23\43\1\u0145\6\43"+
    "\2\0\1\43\26\0\3\43\6\0\4\43\1\u0146\25\43"+
    "\2\0\1\43\26\0\3\43\6\0\4\43\1\u0147\25\43"+
    "\2\0\1\43\62\0\1\u0148\54\0\1\u0149\56\0\3\43"+
    "\6\0\23\43\1\u014a\6\43\2\0\1\43\62\0\1\u014b"+
    "\37\0\3\43\6\0\23\43\1\u014c\6\43\2\0\1\43"+
    "\26\0\3\43\6\0\10\43\1\u014d\6\43\1\u014e\12\43"+
    "\2\0\1\43\3\0\1\u014f\22\0\3\43\6\0\4\43"+
    "\1\u0150\25\43\2\0\1\43\43\0\1\u0151\56\0\3\43"+
    "\6\0\21\43\1\u0152\10\43\2\0\1\43\26\0\3\43"+
    "\6\0\4\43\1\u0153\25\43\2\0\1\43\26\0\3\43"+
    "\6\0\30\43\1\u0154\1\43\2\0\1\43\26\0\3\43"+
    "\6\0\1\43\1\u0155\30\43\2\0\1\u0156\26\0\3\43"+
    "\6\0\25\43\1\u0157\4\43\2\0\1\43\64\0\1\u0158"+
    "\35\0\3\43\6\0\13\43\1\u0159\16\43\2\0\1\43"+
    "\26\0\3\43\6\0\13\43\1\u015a\16\43\2\0\1\43"+
    "\26\0\3\43\6\0\17\43\1\u015b\12\43\2\0\1\43"+
    "\26\0\3\43\6\0\10\43\1\u015c\21\43\2\0\1\43"+
    "\3\0\1\u015d\22\0\3\43\6\0\10\43\1\u015e\21\43"+
    "\2\0\1\43\3\0\1\u015f\22\0\3\43\6\0\4\43"+
    "\1\u0160\25\43\2\0\1\43\26\0\3\43\6\0\4\43"+
    "\1\u0161\25\43\2\0\1\43\26\0\3\43\6\0\7\43"+
    "\1\u0162\22\43\2\0\1\43\26\0\3\43\6\0\22\43"+
    "\1\u0163\7\43\2\0\1\43\4\0\1\u0164\41\0\1\u0165"+
    "\53\0\3\43\6\0\22\43\1\u0166\7\43\2\0\1\43"+
    "\4\0\1\u0167\21\0\3\43\6\0\25\43\1\u0168\4\43"+
    "\2\0\1\43\26\0\3\43\6\0\10\43\1\u0169\21\43"+
    "\2\0\1\43\3\0\1\u016a\60\0\1\u016b\35\0\3\43"+
    "\6\0\13\43\1\u016c\16\43\2\0\1\43\26\0\3\43"+
    "\6\0\23\43\1\u016d\6\43\2\0\1\43\26\0\3\43"+
    "\6\0\15\43\1\u016e\14\43\2\0\1\43\26\0\3\43"+
    "\6\0\4\43\1\u016f\25\43\2\0\1\43\26\0\3\43"+
    "\6\0\4\43\1\u0170\25\43\2\0\1\43\26\0\3\43"+
    "\6\0\3\43\1\u0171\26\43\2\0\1\43\26\0\3\43"+
    "\6\0\13\43\1\u0172\7\43\1\u0173\6\43\2\0\1\43"+
    "\52\0\1\u0174\7\0\1\u0175\37\0\3\43\6\0\23\43"+
    "\1\u0176\6\43\2\0\1\43\62\0\1\u0177\37\0\3\43"+
    "\6\0\13\43\1\u0178\16\43\2\0\1\43\43\0\1\u0179"+
    "\111\0\1\u0167\16\0\1\u0167\42\0\1\u016a\27\0\1\u016a"+
    "\22\0\3\u017a\67\0\1\214\1\0\3\u017b\71\0\3\u017c"+
    "\71\0\3\u017d\25\0\1\103\43\0\3\u017e\6\0\6\u017e"+
    "\104\0\1\u017f\2\0\1\u0180\2\0\1\u0181\51\0\1\u0182"+
    "\101\0\1\u0183\27\0\1\u0183\23\0\1\u0184\13\0\1\u0185"+
    "\103\0\1\u0186\1\u0187\66\0\1\u0188\27\0\1\u0188\52\0"+
    "\1\u0189\56\0\1\u018a\1\0\1\u018b\12\0\1\u018c\60\0"+
    "\1\u018d\3\0\1\u018e\27\0\1\u018e\2\0\2\u0103\1\0"+
    "\12\u0103\1\u018f\56\u0103\32\0\1\u0190\61\0\3\43\6\0"+
    "\23\43\1\u0191\6\43\2\0\1\43\26\0\3\43\6\0"+
    "\13\43\1\u0192\16\43\2\0\1\43\52\0\1\u0193\47\0"+
    "\3\43\6\0\6\43\1\u0194\23\43\2\0\1\43\45\0"+
    "\1\u0195\54\0\3\43\6\0\12\43\1\u0196\17\43\2\0"+
    "\1\43\5\0\1\u0197\20\0\3\43\6\0\4\43\1\u0198"+
    "\25\43\2\0\1\43\26\0\3\43\6\0\2\43\1\u0199"+
    "\27\43\2\0\1\43\26\0\3\43\6\0\4\43\1\u019a"+
    "\25\43\2\0\1\43\26\0\3\43\6\0\12\43\1\u019b"+
    "\17\43\2\0\1\43\5\0\1\u019c\20\0\3\43\6\0"+
    "\22\43\1\u019d\7\43\2\0\1\43\4\0\1\u019e\54\0"+
    "\1\u019e\16\0\1\u019e\21\0\3\43\6\0\21\43\1\u019f"+
    "\10\43\2\0\1\43\26\0\3\43\6\0\14\43\1\u01a0"+
    "\15\43\2\0\1\43\26\0\3\43\6\0\10\43\1\u01a1"+
    "\21\43\2\0\1\43\3\0\1\u01a2\22\0\3\43\6\0"+
    "\3\43\1\u01a3\26\43\2\0\1\43\26\0\3\43\6\0"+
    "\23\43\1\u01a4\6\43\2\0\1\43\26\0\3\43\6\0"+
    "\25\43\1\u01a5\4\43\2\0\1\43\64\0\1\u01a6\35\0"+
    "\3\43\6\0\1\u01a7\31\43\2\0\1\43\26\0\3\43"+
    "\6\0\6\43\1\u01a8\23\43\2\0\1\43\26\0\3\43"+
    "\6\0\17\43\1\u01a9\12\43\2\0\1\43\26\0\3\43"+
    "\6\0\15\43\1\u01aa\14\43\2\0\1\43\54\0\1\u01ab"+
    "\45\0\3\43\6\0\23\43\1\u01ac\6\43\2\0\1\43"+
    "\26\0\3\43\6\0\21\43\1\u01ad\10\43\2\0\1\43"+
    "\26\0\3\43\6\0\13\43\1\u01ae\16\43\2\0\1\43"+
    "\26\0\3\43\6\0\1\u01af\31\43\2\0\1\43\26\0"+
    "\3\43\6\0\27\43\1\u01b0\2\43\2\0\1\43\26\0"+
    "\3\43\6\0\23\43\1\u01b1\6\43\2\0\1\43\62\0"+
    "\1\u01b2\56\0\1\u01b3\104\0\1\u01b4\75\0\1\u01b5\65\0"+
    "\1\u01b6\60\0\1\u01b7\62\0\3\43\6\0\14\43\1\u01b8"+
    "\15\43\2\0\1\43\53\0\1\u01b9\46\0\3\43\6\0"+
    "\4\43\1\u01ba\25\43\2\0\1\43\43\0\1\u01bb\53\0"+
    "\1\u01bc\2\0\3\43\6\0\32\43\2\0\1\43\26\0"+
    "\3\43\6\0\22\43\1\u01bd\7\43\2\0\1\43\4\0"+
    "\1\u01be\21\0\3\43\6\0\10\43\1\u01bf\21\43\2\0"+
    "\1\43\3\0\1\u01c0\22\0\3\43\6\0\25\43\1\u01c1"+
    "\4\43\2\0\1\43\26\0\3\43\6\0\15\43\1\u01c2"+
    "\14\43\2\0\1\43\26\0\3\43\6\0\7\43\1\u01c3"+
    "\22\43\2\0\1\43\46\0\1\u01c4\53\0\3\43\6\0"+
    "\10\43\1\u01c5\21\43\2\0\1\43\3\0\1\u01c6\22\0"+
    "\3\43\6\0\21\43\1\u01c7\10\43\2\0\1\43\26\0"+
    "\3\43\6\0\6\43\1\u01c8\23\43\2\0\1\43\60\0"+
    "\1\u01c9\41\0\3\43\6\0\10\43\1\u01ca\21\43\2\0"+
    "\1\43\3\0\1\u01cb\43\0\1\u01cb\27\0\1\u01cb\22\0"+
    "\3\43\6\0\14\43\1\u01cc\15\43\2\0\1\43\26\0"+
    "\3\43\6\0\1\u01cd\31\43\2\0\1\43\53\0\1\u01ce"+
    "\46\0\3\43\6\0\16\43\1\u01cf\13\43\2\0\1\43"+
    "\26\0\3\43\6\0\4\43\1\u01d0\25\43\2\0\1\43"+
    "\26\0\3\43\6\0\1\u01d1\31\43\2\0\1\43\26\0"+
    "\3\43\6\0\4\43\1\u01d2\25\43\2\0\1\43\43\0"+
    "\1\u01d3\56\0\3\43\6\0\10\43\1\u01d4\21\43\2\0"+
    "\1\43\3\0\1\u01d5\22\0\3\43\6\0\16\43\1\u01d6"+
    "\13\43\2\0\1\43\26\0\3\43\6\0\13\43\1\u01d7"+
    "\16\43\2\0\1\43\26\0\3\43\6\0\16\43\1\u01d8"+
    "\13\43\2\0\1\43\55\0\1\u01d9\44\0\3\43\6\0"+
    "\21\43\1\u01da\10\43\2\0\1\43\60\0\1\u01db\41\0"+
    "\3\43\6\0\1\u01dc\31\43\2\0\1\43\26\0\3\43"+
    "\6\0\21\43\1\u01dd\10\43\2\0\1\43\26\0\3\43"+
    "\6\0\23\43\1\u01de\6\43\2\0\1\43\62\0\1\u01df"+
    "\34\0\1\u01e0\2\0\3\43\6\0\32\43\2\0\1\43"+
    "\23\0\1\u01e0\76\0\3\43\6\0\4\43\1\u01e1\25\43"+
    "\2\0\1\43\26\0\3\43\6\0\15\43\1\u01e2\14\43"+
    "\2\0\1\43\54\0\1\u01e3\62\0\1\u01e4\53\0\1\u01e5"+
    "\2\0\3\43\6\0\32\43\2\0\1\43\26\0\3\43"+
    "\6\0\26\43\1\u01e6\3\43\2\0\1\43\26\0\3\43"+
    "\6\0\1\u01e7\31\43\2\0\1\43\26\0\3\43\6\0"+
    "\4\43\1\u01e8\25\43\2\0\1\43\26\0\3\43\6\0"+
    "\4\43\1\u01e9\25\43\2\0\1\43\43\0\1\u01ea\73\0"+
    "\1\u01eb\56\0\3\43\6\0\7\43\1\u01ec\22\43\2\0"+
    "\1\43\46\0\1\u01ed\53\0\3\43\6\0\16\43\1\u01ee"+
    "\13\43\2\0\1\43\45\0\1\u01ef\54\0\3\u01f0\67\0"+
    "\1\214\1\0\3\u01f1\71\0\3\u01f2\71\0\3\u01f3\6\0"+
    "\6\u01f3\71\0\1\u01f4\113\0\1\u01f5\75\0\1\u01f6\46\0"+
    "\1\u01f7\101\0\1\u01f8\104\0\1\u01f9\71\0\1\u01fa\101\0"+
    "\1\u01fb\71\0\1\u01fc\65\0\1\u01fd\60\0\1\u01fe\122\0"+
    "\1\u01ff\67\0\1\u0200\17\0\2\u0103\1\0\12\u0103\1\u0201"+
    "\56\u0103\31\0\1\u0202\62\0\3\43\6\0\32\43\2\0"+
    "\1\u0203\26\0\3\43\6\0\21\43\1\u0204\10\43\2\0"+
    "\1\43\60\0\1\u0205\41\0\3\43\6\0\1\u0206\31\43"+
    "\2\0\1\43\26\0\3\43\6\0\23\43\1\u0207\6\43"+
    "\2\0\1\43\26\0\3\43\6\0\21\43\1\u0208\10\43"+
    "\2\0\1\43\26\0\3\43\6\0\1\43\1\u0209\30\43"+
    "\2\0\1\43\40\0\1\u020a\61\0\3\43\6\0\15\43"+
    "\1\u020b\14\43\2\0\1\43\26\0\3\43\6\0\4\43"+
    "\1\u020c\25\43\2\0\1\43\43\0\1\u020d\56\0\3\43"+
    "\6\0\30\43\1\u020e\1\43\2\0\1\43\26\0\3\43"+
    "\6\0\23\43\1\u020f\6\43\2\0\1\43\26\0\3\43"+
    "\6\0\3\43\1\u0210\26\43\2\0\1\43\26\0\3\43"+
    "\6\0\24\43\1\u0211\5\43\2\0\1\43\26\0\3\43"+
    "\6\0\12\43\1\u0212\17\43\2\0\1\43\5\0\1\u0213"+
    "\43\0\1\u0213\27\0\1\u0213\20\0\3\43\6\0\10\43"+
    "\1\u0214\21\43\2\0\1\43\3\0\1\u0215\22\0\3\43"+
    "\6\0\10\43\1\u0216\21\43\2\0\1\43\3\0\1\u0217"+
    "\22\0\3\43\6\0\4\43\1\u0218\25\43\2\0\1\43"+
    "\26\0\3\43\6\0\14\43\1\u0219\15\43\2\0\1\43"+
    "\26\0\3\43\6\0\23\43\1\u021a\6\43\2\0\1\43"+
    "\26\0\3\43\6\0\13\43\1\u021b\16\43\2\0\1\43"+
    "\52\0\1\u021c\104\0\1\u021d\57\0\1\u0217\27\0\1\u0217"+
    "\37\0\1\u021e\103\0\1\u021f\46\0\3\43\6\0\1\u0220"+
    "\31\43\2\0\1\43\37\0\1\u0221\100\0\1\u0222\14\0"+
    "\1\u0223\16\0\1\u0223\21\0\3\43\6\0\10\43\1\u0224"+
    "\21\43\2\0\1\43\3\0\1\u0225\43\0\1\u0225\27\0"+
    "\1\u0225\22\0\3\43\6\0\16\43\1\u0226\13\43\2\0"+
    "\1\43\55\0\1\u0227\44\0\3\43\6\0\1\u0228\31\43"+
    "\2\0\1\43\26\0\3\43\6\0\23\43\1\u0229\6\43"+
    "\2\0\1\43\62\0\1\u022a\37\0\3\43\6\0\13\43"+
    "\1\u022b\16\43\2\0\1\43\52\0\1\u022c\47\0\3\43"+
    "\6\0\23\43\1\u022d\6\43\2\0\1\43\26\0\3\43"+
    "\6\0\4\43\1\u022e\25\43\2\0\1\43\62\0\1\u022f"+
    "\37\0\3\43\6\0\5\43\1\u0230\24\43\2\0\1\43"+
    "\44\0\1\u0231\55\0\3\43\6\0\17\43\1\u0232\12\43"+
    "\2\0\1\43\26\0\3\43\6\0\21\43\1\u0233\10\43"+
    "\2\0\1\43\56\0\1\u0234\43\0\3\43\6\0\15\43"+
    "\1\u0235\14\43\2\0\1\43\26\0\3\43\6\0\21\43"+
    "\1\u0236\10\43\2\0\1\43\26\0\3\43\6\0\13\43"+
    "\1\u0237\16\43\2\0\1\43\26\0\3\43\6\0\2\43"+
    "\1\u0238\27\43\2\0\1\43\41\0\1\u0239\60\0\3\43"+
    "\6\0\1\u023a\31\43\2\0\1\43\26\0\3\43\6\0"+
    "\4\43\1\u023b\25\43\2\0\1\43\26\0\3\43\6\0"+
    "\4\43\1\u023c\25\43\2\0\1\43\43\0\1\u023d\56\0"+
    "\3\43\6\0\23\43\1\u023e\6\43\2\0\1\43\26\0"+
    "\3\43\6\0\22\43\1\u023f\7\43\2\0\1\43\4\0"+
    "\1\u0240\54\0\1\u0241\16\0\1\u0241\21\0\3\43\6\0"+
    "\21\43\1\u0242\10\43\2\0\1\43\26\0\3\43\6\0"+
    "\6\43\1\u0243\23\43\2\0\1\43\45\0\1\u0244\106\0"+
    "\1\u0245\52\0\1\u0246\62\0\3\43\6\0\7\43\1\u0247"+
    "\22\43\2\0\1\43\26\0\3\43\6\0\15\43\1\u0248"+
    "\14\43\2\0\1\43\26\0\3\43\6\0\26\43\1\u0249"+
    "\3\43\2\0\1\43\43\0\1\u024a\54\0\1\214\1\0"+
    "\3\u024b\71\0\3\u024c\71\0\3\u024d\6\0\6\u024d\116\0"+
    "\1\u024e\66\0\1\u024f\53\0\1\u0250\114\0\1\u0251\61\0"+
    "\1\u0252\27\0\1\u0252\41\0\1\u0253\27\0\1\u0253\43\0"+
    "\1\u0254\27\0\1\u0254\37\0\1\u0255\103\0\1\u0256\102\0"+
    "\1\u0257\63\0\1\u0258\27\0\2\u0103\1\0\12\u0103\1\u0201"+
    "\11\u0103\1\u0259\44\u0103\44\0\1\u025a\47\0\3\43\6\0"+
    "\10\43\1\u025b\21\43\2\0\1\43\3\0\1\u025c\22\0"+
    "\3\43\6\0\16\43\1\u025d\13\43\2\0\1\43\55\0"+
    "\1\u025e\44\0\3\43\6\0\15\43\1\u025f\14\43\2\0"+
    "\1\43\26\0\3\43\6\0\4\43\1\u0260\25\43\2\0"+
    "\1\43\26\0\3\43\6\0\16\43\1\u0261\13\43\2\0"+
    "\1\43\55\0\1\u0262\44\0\3\43\6\0\21\43\1\u0263"+
    "\10\43\2\0\1\43\60\0\1\u0264\41\0\3\43\6\0"+
    "\16\43\1\u0265\13\43\2\0\1\43\26\0\3\43\6\0"+
    "\23\43\1\u0266\6\43\2\0\1\43\26\0\3\43\6\0"+
    "\16\43\1\u0267\13\43\2\0\1\43\55\0\1\u0268\44\0"+
    "\3\43\6\0\17\43\1\u0269\12\43\2\0\1\43\56\0"+
    "\1\u026a\43\0\3\43\6\0\2\43\1\u026b\27\43\2\0"+
    "\1\43\26\0\3\43\6\0\1\u026c\31\43\2\0\1\43"+
    "\26\0\3\43\6\0\4\43\1\u026d\25\43\2\0\1\43"+
    "\43\0\1\u026e\112\0\1\u026f\52\0\1\u0270\60\0\3\43"+
    "\6\0\13\43\1\u0271\16\43\2\0\1\43\52\0\1\u0272"+
    "\60\0\1\u0273\103\0\1\u0274\27\0\1\u0274\22\0\3\43"+
    "\6\0\1\u0275\31\43\2\0\1\43\37\0\1\u0276\62\0"+
    "\3\43\6\0\15\43\1\u0277\14\43\2\0\1\43\54\0"+
    "\1\u0278\45\0\3\43\6\0\21\43\1\u0279\10\43\2\0"+
    "\1\43\26\0\3\43\6\0\30\43\1\u027a\1\43\2\0"+
    "\1\43\67\0\1\u027b\32\0\3\43\6\0\1\u027c\31\43"+
    "\2\0\1\43\26\0\3\43\6\0\32\43\2\0\1\u027d"+
    "\37\0\1\u027e\62\0\3\43\6\0\4\43\1\u027f\25\43"+
    "\2\0\1\43\26\0\3\43\6\0\12\43\1\u0280\17\43"+
    "\2\0\1\43\5\0\1\u0281\43\0\1\u0281\27\0\1\u0281"+
    "\20\0\3\43\6\0\3\43\1\u0282\26\43\2\0\1\43"+
    "\26\0\3\43\6\0\2\43\1\u0283\27\43\2\0\1\43"+
    "\41\0\1\u0284\60\0\3\43\6\0\4\43\1\u0285\25\43"+
    "\2\0\1\43\43\0\1\u0286\73\0\1\u0287\102\0\1\u0288"+
    "\47\0\3\43\6\0\10\43\1\u0289\21\43\2\0\1\43"+
    "\3\0\1\u028a\22\0\3\43\6\0\1\u028b\31\43\2\0"+
    "\1\43\60\0\1\u028c\41\0\3\u028d\6\0\6\u028d\104\0"+
    "\1\u028e\100\0\1\u028f\66\0\1\u0290\74\0\1\u0291\56\0"+
    "\1\u0292\71\0\1\u0293\77\0\1\u0294\56\0\3\43\6\0"+
    "\15\43\1\u0295\14\43\2\0\1\43\54\0\1\u0296\45\0"+
    "\3\43\6\0\24\43\1\u0297\5\43\2\0\1\43\63\0"+
    "\1\u0298\36\0\3\43\6\0\21\43\1\u0299\10\43\2\0"+
    "\1\43\26\0\3\43\6\0\27\43\1\u029a\2\43\2\0"+
    "\1\43\66\0\1\u029b\33\0\3\43\6\0\15\43\1\u029c"+
    "\14\43\2\0\1\43\26\0\3\43\6\0\15\43\1\u029d"+
    "\14\43\2\0\1\43\54\0\1\u029e\45\0\3\43\6\0"+
    "\23\43\1\u029f\6\43\2\0\1\43\62\0\1\u02a0\37\0"+
    "\3\43\6\0\23\43\1\u02a1\6\43\2\0\1\43\26\0"+
    "\3\43\6\0\21\43\1\u02a2\10\43\2\0\1\43\62\0"+
    "\1\u02a3\64\0\1\u02a4\110\0\1\u02a5\31\0\3\43\6\0"+
    "\32\43\2\0\1\u02a6\73\0\1\u02a7\26\0\3\43\6\0"+
    "\21\43\1\u02a8\10\43\2\0\1\43\26\0\3\43\6\0"+
    "\15\43\1\u02a9\14\43\2\0\1\43\60\0\1\u02aa\41\0"+
    "\3\43\6\0\1\u02ab\31\43\2\0\1\43\17\0\1\u02ac"+
    "\6\0\3\43\6\0\32\43\2\0\1\43\26\0\3\43"+
    "\6\0\23\43\1\u02ad\6\43\2\0\1\43\62\0\1\u02ae"+
    "\71\0\1\u02af\62\0\1\u02b0\27\0\1\u02b0\22\0\3\43"+
    "\6\0\13\43\1\u02b1\16\43\2\0\1\43\52\0\1\u02b2"+
    "\47\0\3\u02b3\6\0\6\u02b3\103\0\1\u02b4\73\0\1\u02b5"+
    "\101\0\1\u02b6\73\0\1\u02b7\71\0\1\u02b8\41\0\3\43"+
    "\6\0\5\43\1\u02b9\24\43\2\0\1\43\44\0\1\u02ba"+
    "\55\0\3\43\6\0\15\43\1\u02bb\14\43\2\0\1\43"+
    "\54\0\1\u02bc\45\0\3\43\6\0\32\43\2\0\1\u02bd"+
    "\26\0\3\43\6\0\10\43\1\u02be\21\43\2\0\1\43"+
    "\3\0\1\u02bf\43\0\1\u02bf\27\0\1\u02bf\22\0\3\43"+
    "\6\0\4\43\1\u02c0\25\43\2\0\1\43\47\0\1\u02c1"+
    "\27\0\1\u02c1\37\0\1\u02c2\47\0\1\u02c3\6\0\3\u02a6"+
    "\6\0\32\u02a6\2\0\1\43\17\0\1\u02c3\6\0\3\u02a7"+
    "\6\0\32\u02a7\31\0\3\43\6\0\32\43\2\0\1\u02c4"+
    "\26\0\3\43\6\0\24\43\1\u02c5\5\43\2\0\1\43"+
    "\73\0\1\u02c6\26\0\3\43\6\0\23\43\1\u02c7\6\43"+
    "\2\0\1\43\20\0\1\u02c8\122\0\1\u02c9\27\0\1\u02c9"+
    "\41\0\1\u02ca\54\0\3\43\6\0\4\43\1\u02cb\25\43"+
    "\2\0\1\43\43\0\1\u02cc\77\0\1\u02cd\27\0\1\u02cd"+
    "\37\0\1\u02ce\56\0\3\43\6\0\16\43\1\u02cf\13\43"+
    "\2\0\1\43\55\0\1\u02d0\44\0\3\43\6\0\3\43"+
    "\1\u02d1\26\43\2\0\1\43\42\0\1\u02d2\57\0\3\43"+
    "\6\0\1\u02d3\31\43\2\0\1\43\26\0\3\43\6\0"+
    "\15\43\1\u02d4\14\43\2\0\1\43\54\0\1\u02d5\45\0"+
    "\3\43\6\0\1\u02d6\31\43\2\0\1\43\52\0\1\u02d7"+
    "\41\0\1\u02d8\101\0\3\43\6\0\15\43\1\u02d9\14\43"+
    "\2\0\1\43\26\0\3\43\6\0\14\43\1\u02da\15\43"+
    "\2\0\1\43\54\0\1\u02db\45\0\3\43\6\0\16\43"+
    "\1\u02dc\13\43\2\0\1\43\44\0\1\u02dd\103\0\1\u02de"+
    "\73\0\1\u02df\56\0\1\u02e0\62\0\3\43\6\0\13\43"+
    "\1\u02e1\16\43\2\0\1\43\26\0\3\43\6\0\6\43"+
    "\1\u02e2\23\43\2\0\1\43\45\0\1\u02e3\115\0\1\u02e4"+
    "\32\0\3\43\6\0\24\43\1\u02e5\5\43\2\0\1\43"+
    "\63\0\1\u02e6\36\0\3\43\6\0\21\43\1\u02e7\10\43"+
    "\2\0\1\43\45\0\1\u02e8\54\0\3\43\6\0\4\43"+
    "\1\u02e9\25\43\2\0\1\43\26\0\3\43\6\0\14\43"+
    "\1\u02ea\15\43\2\0\1\43\53\0\1\u02eb\46\0\3\43"+
    "\6\0\10\43\1\u02ec\21\43\2\0\1\43\3\0\1\u02ed"+
    "\22\0\3\43\6\0\1\u02ee\31\43\2\0\1\43\26\0"+
    "\3\43\6\0\16\43\1\u02ef\13\43\2\0\1\43\55\0"+
    "\1\u02f0\44\0\3\43\6\0\23\43\1\u02f1\6\43\2\0"+
    "\1\43\26\0\3\43\6\0\16\43\1\u02f2\13\43\2\0"+
    "\1\43\26\0\3\43\6\0\21\43\1\u02f3\10\43\2\0"+
    "\1\43\26\0\3\43\6\0\10\43\1\u02f4\21\43\2\0"+
    "\1\43\3\0\1\u02f5\22\0\3\43\6\0\16\43\1\u02f6"+
    "\13\43\2\0\1\43\55\0\1\u02f7\24\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[34200];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\3\11\5\1\5\11\3\1\2\11\32\1\3\11"+
    "\1\1\1\11\7\1\1\11\1\0\1\1\1\0\1\11"+
    "\5\0\3\11\1\0\4\1\1\0\33\1\1\0\12\1"+
    "\1\0\4\1\1\0\7\1\1\0\1\1\3\11\4\0"+
    "\2\1\1\0\1\1\1\0\1\11\1\0\1\11\2\0"+
    "\4\1\1\0\1\1\1\11\25\1\2\0\2\1\1\0"+
    "\1\1\1\0\2\1\1\0\10\1\1\0\5\1\2\0"+
    "\1\1\1\0\3\1\1\0\5\1\1\0\11\1\1\0"+
    "\4\1\1\0\7\1\1\0\1\1\1\0\1\1\2\0"+
    "\1\11\1\0\5\1\7\0\1\11\4\0\3\1\1\0"+
    "\1\1\1\0\10\1\1\0\3\1\1\11\6\1\1\0"+
    "\5\1\1\0\6\1\6\0\1\1\1\0\1\1\1\11"+
    "\1\1\1\11\1\1\1\11\1\1\1\0\7\1\1\0"+
    "\5\1\1\11\1\0\1\1\1\0\3\1\1\0\1\1"+
    "\1\11\6\1\1\0\4\1\1\0\1\1\1\0\4\1"+
    "\1\11\1\0\1\1\1\0\2\1\2\0\10\1\2\0"+
    "\1\1\1\0\1\1\1\0\4\1\2\0\1\11\1\0"+
    "\1\11\1\0\1\11\14\0\2\1\1\11\1\1\1\0"+
    "\1\1\1\11\4\1\1\0\1\1\1\11\3\1\1\0"+
    "\3\1\1\11\4\1\1\0\6\1\1\0\1\11\4\0"+
    "\1\1\1\0\1\1\1\11\1\0\1\1\1\0\1\1"+
    "\1\0\3\1\1\0\1\1\1\0\2\1\1\0\1\1"+
    "\1\0\2\1\1\0\4\1\1\11\1\1\1\0\3\1"+
    "\1\11\1\1\1\0\3\1\1\11\1\0\2\1\3\0"+
    "\4\1\2\11\1\1\1\11\1\1\1\0\1\11\2\1"+
    "\3\0\1\11\1\0\1\11\12\0\2\1\1\0\4\1"+
    "\1\0\2\1\1\0\5\1\1\11\1\1\1\0\1\1"+
    "\1\0\4\1\3\0\1\11\1\1\3\0\1\1\1\0"+
    "\1\1\1\0\2\1\1\11\1\1\1\11\2\1\1\11"+
    "\1\1\1\0\2\1\1\0\4\1\1\0\3\1\1\0"+
    "\2\1\2\0\2\1\2\11\1\0\3\1\2\0\1\11"+
    "\1\1\1\11\1\0\1\11\1\0\1\11\3\0\1\11"+
    "\2\0\1\1\1\11\1\1\1\0\1\1\1\0\3\1"+
    "\1\0\1\1\1\11\3\1\1\0\1\1\1\0\3\1"+
    "\2\11\1\0\1\1\1\11\2\0\1\1\1\11\1\1"+
    "\1\0\2\1\1\11\2\1\1\0\2\1\1\11\2\1"+
    "\1\0\1\1\1\11\2\0\1\1\1\0\1\1\1\11"+
    "\2\0\1\11\4\0\1\11\1\1\1\0\1\1\1\0"+
    "\2\1\1\11\2\1\1\11\1\1\1\0\2\1\1\11"+
    "\2\0\1\1\1\0\2\1\1\0\1\1\1\0\1\1"+
    "\1\11\2\0\1\1\1\0\3\11\1\0\1\11\1\0"+
    "\1\1\1\0\1\1\1\0\2\1\1\0\1\1\1\0"+
    "\1\11\1\0\2\1\1\0\1\1\1\11\2\0\1\1"+
    "\1\11\2\0\1\1\1\11\1\1\1\11\2\1\1\0"+
    "\1\1\1\0\1\11\2\1\1\0\1\1\2\11\1\0"+
    "\1\11\2\1\2\11\1\1\1\0\1\1\1\11\2\1"+
    "\1\11\1\1\1\0\2\1\1\11\4\1\1\0\1\1"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[759];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
     int longitudToken=0;

  /* Declaración de tokens que serán reconocidos por el analizador sintáctico */
  private Symbol symbol(int type) {
    return new Symbol(type);
  }
  


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexerCC(java.io.Reader in) {
      yyline = 1; 
    yychar = 1; 
    
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':  // fall through
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { 
  return new Symbol(symbol.EOF, null);

 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { longitudToken = yytext().length(); yychar+=longitudToken; 
 System.out.println("Error de carácter: "+ yytext());
//ReporteError.agregarError(new Error("Lexico", yytext(), "Caracter no reconocido"+ yytext(), yyline, (int)yychar));
            }
          // fall through
          case 149: break;
          case 2:
            { yychar=0; yyline=+1;
            }
          // fall through
          case 150: break;
          case 3:
            { yychar=+1;
            }
          // fall through
          case 151: break;
          case 4:
            { yychar+=1   ;  System.out.println(yytext()); return new Symbol(symbol.NOT           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 152: break;
          case 5:
            { yychar+=1  ; System.out.println(yytext());  return new Symbol(symbol.COMILLAS       ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 153: break;
          case 6:
            { yychar+=1  ; System.out.println(yytext());  return new Symbol(symbol.COMILLA_SIMPLE ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 154: break;
          case 7:
            { yychar+=1  ; System.out.println(yytext());  return new Symbol(symbol.PAR_IZQ ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 155: break;
          case 8:
            { yychar+=1  ; System.out.println(yytext());  return new Symbol(symbol.PAREN_DER ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 156: break;
          case 9:
            { yychar+=1   ;  System.out.println(yytext()); return new Symbol(symbol.PLUS          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 157: break;
          case 10:
            { yychar+=1   ;  System.out.println(yytext()); return new Symbol(symbol.SUMA          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 158: break;
          case 11:
            { yychar+=1   ;  System.out.println(yytext()); return new Symbol(symbol.RESTA         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 159: break;
          case 12:
            { yychar+=1   ;  System.out.println(yytext()); return new Symbol(symbol.DIVISION      ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 160: break;
          case 13:
            { longitudToken = yytext().length();   yychar+=longitudToken;  System.out.println(yytext());       return new Symbol(symbol.NUMERO       , yyline  ,  (int)yychar, yytext() );
            }
          // fall through
          case 161: break;
          case 14:
            { yychar+=1  ; System.out.println(yytext());  return new Symbol(symbol.DOS_PUNTOS     ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 162: break;
          case 15:
            { yychar+=1  ; System.out.println(yytext());  return new Symbol(symbol.PUNTO_COMA     ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 163: break;
          case 16:
            { yychar+=1   ;  System.out.println(yytext()); return new Symbol(symbol.MENOR         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 164: break;
          case 17:
            { yychar+=1   ;  System.out.println(yytext()); return new Symbol(symbol.IGUAL         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 165: break;
          case 18:
            { yychar+=1   ;  System.out.println(yytext()); return new Symbol(symbol.MAYOR         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 166: break;
          case 19:
            { longitudToken = yytext().length();   yychar+=longitudToken;  System.out.println(yytext());       return new Symbol(symbol.IDENTIFICADOR, yyline  ,  (int)yychar, yytext() );
            }
          // fall through
          case 167: break;
          case 20:
            { yychar+=1  ; System.out.println(yytext());  return new Symbol(symbol.CORCHETE_IZQ   ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 168: break;
          case 21:
            { yychar+=1  ; System.out.println(yytext());  return new Symbol(symbol.CORCHETE_DER   ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 169: break;
          case 22:
            { yychar+=1  ; System.out.println(yytext());  return new Symbol(symbol.LLAVE_IZQ      ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 170: break;
          case 23:
            { yychar+=1  ; System.out.println(yytext());  return new Symbol(symbol.LLAVE_DER      ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 171: break;
          case 24:
            { longitudToken = yytext().length();   yychar+=longitudToken;  System.out.println(yytext());       return new Symbol(symbol.ENTERO       , yyline  ,  (int)yychar, yytext() );
            }
          // fall through
          case 172: break;
          case 25:
            { longitudToken = yytext().length(); yychar+=longitudToken;
            }
          // fall through
          case 173: break;
          case 26:
            { yychar+=2   ;  System.out.println(yytext()); return new Symbol(symbol.DESIGUALDAD   ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 174: break;
          case 27:
            { longitudToken = yytext().length();   yychar+=longitudToken  ; System.out.println(yytext());  return new Symbol(symbol.CADENA         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 175: break;
          case 28:
            { yychar+=2   ;  System.out.println(yytext()); return new Symbol(symbol.AND           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 176: break;
          case 29:
            { yychar+=2   ;  System.out.println(yytext()); return new Symbol(symbol.MENOR_IGUAL   ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 177: break;
          case 30:
            { yychar+=2   ;  System.out.println(yytext()); return new Symbol(symbol.COMPARACION   ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 178: break;
          case 31:
            { yychar+=2   ;  System.out.println(yytext()); return new Symbol(symbol.MAYOR_IGUAL   ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 179: break;
          case 32:
            { yychar+=2   ;  System.out.println(yytext()); return new Symbol(symbol.ID            ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 180: break;
          case 33:
            { yychar+=2   ;  System.out.println(yytext()); return new Symbol(symbol.IF            ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 181: break;
          case 34:
            { yychar+=2   ;  System.out.println(yytext()); return new Symbol(symbol.OR            ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 182: break;
          case 35:
            { longitudToken = yytext().length();   yychar+=longitudToken  ; System.out.println(yytext());  return new Symbol(symbol.CHARS           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 183: break;
          case 36:
            { yychar+=5   ;  System.out.println(yytext()); return new Symbol(symbol.PIXEL         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 184: break;
          case 37:
            { yychar+=3   ;  System.out.println(yytext()); return new Symbol(symbol.ALT           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 185: break;
          case 38:
            { yychar+=3   ;  System.out.println(yytext()); return new Symbol(symbol.ASC           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 186: break;
          case 39:
            { yychar+=3  ; System.out.println(yytext());  return new Symbol(symbol.P              ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 187: break;
          case 40:
            { yychar+=3   ;  System.out.println(yytext()); return new Symbol(symbol.END           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 188: break;
          case 41:
            { yychar+=3  ;  System.out.println(yytext()); return new Symbol(symbol.RED            ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 189: break;
          case 42:
            { yychar+=3   ;  System.out.println(yytext()); return new Symbol(symbol.ROW           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 190: break;
          case 43:
            { yychar+=3   ;  System.out.println(yytext()); return new Symbol(symbol.SRC           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 191: break;
          case 44:
            { longitudToken = yytext().length();   yychar+=longitudToken;  System.out.println(yytext());       return new Symbol(symbol.DECIMAL      , yyline  ,  (int)yychar, yytext() );
            }
          // fall through
          case 192: break;
          case 45:
            { longitudToken = yytext().length();  yychar+=longitudToken   ;  System.out.println(yytext()); return new Symbol(symbol.HEXADECIMAL  ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 193: break;
          case 46:
            { yychar+=4  ; System.out.println(yytext());  return new Symbol(symbol.P_C            ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 194: break;
          case 47:
            { yychar+=4  ;  System.out.println(yytext()); return new Symbol(symbol.AQUA           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 195: break;
          case 48:
            { yychar+=4  ;  System.out.println(yytext()); return new Symbol(symbol.BLUE           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 196: break;
          case 49:
            { yychar+=4   ;  System.out.println(yytext()); return new Symbol(symbol.CHAR          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 197: break;
          case 50:
            { yychar+=4   ;  System.out.println(yytext()); return new Symbol(symbol.COLS          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 198: break;
          case 51:
            { yychar+=4  ; System.out.println(yytext());  return new Symbol(symbol.BR             ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 199: break;
          case 52:
            { yychar+=4  ; System.out.println(yytext());  return new Symbol(symbol.HTML           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 200: break;
          case 53:
            { yychar+=4  ; System.out.println(yytext());  return new Symbol(symbol.H1             ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 201: break;
          case 54:
            { yychar+=4   ;  System.out.println(yytext()); return new Symbol(symbol.DESC          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 202: break;
          case 55:
            { yychar+=4   ;  System.out.println(yytext()); return new Symbol(symbol.ELSE          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 203: break;
          case 56:
            { yychar+=4   ;  System.out.println(yytext()); return new Symbol(symbol.EXIT          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 204: break;
          case 57:
            { yychar+=4  ;  System.out.println(yytext()); return new Symbol(symbol.GRAY           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 205: break;
          case 58:
            { yychar+=4  ;  System.out.println(yytext()); return new Symbol(symbol.HREF           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 206: break;
          case 59:
            { yychar+=4   ;  System.out.println(yytext()); return new Symbol(symbol.INIT          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 207: break;
          case 60:
            { yychar+=4   ;  System.out.println(yytext()); return new Symbol(symbol.LEFT          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 208: break;
          case 61:
            { yychar+=4  ;  System.out.println(yytext()); return new Symbol(symbol.LIME           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 209: break;
          case 62:
            { yychar+=4   ;  System.out.println(yytext()); return new Symbol(symbol.NAME          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 210: break;
          case 63:
            { yychar+=4  ;  System.out.println(yytext()); return new Symbol(symbol.NAVY           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 211: break;
          case 64:
            { yychar+=4   ;  System.out.println(yytext()); return new Symbol(symbol.ROWS          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 212: break;
          case 65:
            { yychar+=5  ;  System.out.println(yytext()); return new Symbol(symbol.TEAL           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 213: break;
          case 66:
            { yychar+=4   ;  System.out.println(yytext()); return new Symbol(symbol.TEXT          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 214: break;
          case 67:
            { yychar+=4   ;  System.out.println(yytext()); return new Symbol(symbol.THEN          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 215: break;
          case 68:
            { yychar+=4   ;  System.out.println(yytext()); return new Symbol(symbol.TRUE          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 216: break;
          case 69:
            { yychar+=4   ;  System.out.println(yytext()); return new Symbol(symbol.TYPE          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 217: break;
          case 70:
            { yychar+=5  ; System.out.println(yytext());  return new Symbol(symbol.BR_C           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 218: break;
          case 71:
            { yychar+=5  ; System.out.println(yytext());  return new Symbol(symbol.HTML_C         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 219: break;
          case 72:
            { yychar+=5  ; System.out.println(yytext());  return new Symbol(symbol.H1_C           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 220: break;
          case 73:
            { yychar+=5   ;  System.out.println(yytext()); return new Symbol(symbol.ARIAL         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 221: break;
          case 74:
            { yychar+=5  ;  System.out.println(yytext()); return new Symbol(symbol.BLACK          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 222: break;
          case 75:
            { yychar+=5   ;  System.out.println(yytext()); return new Symbol(symbol.CLASS         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 223: break;
          case 76:
            { yychar+=5   ;  System.out.println(yytext()); return new Symbol(symbol.COLOR         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 224: break;
          case 77:
            { yychar+=5  ; System.out.println(yytext());  return new Symbol(symbol.DIV            ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 225: break;
          case 78:
            { yychar+=5  ; System.out.println(yytext());  return new Symbol(symbol.IMG            ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 226: break;
          case 79:
            { yychar+=5   ;  System.out.println(yytext()); return new Symbol(symbol.FALSE         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 227: break;
          case 80:
            { yychar+=5  ;  System.out.println(yytext()); return new Symbol(symbol.GREEN          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 228: break;
          case 81:
            { yychar+=5  ;  System.out.println(yytext()); return new Symbol(symbol.OLIVE          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 229: break;
          case 82:
            { yychar+=5   ;  System.out.println(yytext()); return new Symbol(symbol.RADIO         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 230: break;
          case 83:
            { yychar+=5   ;  System.out.println(yytext()); return new Symbol(symbol.RIGHT         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 231: break;
          case 84:
            { yychar+=5   ;  System.out.println(yytext()); return new Symbol(symbol.WHILE         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 232: break;
          case 85:
            { yychar+=5  ;  System.out.println(yytext()); return new Symbol(symbol.WHITE          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 233: break;
          case 86:
            { yychar+=5   ;  System.out.println(yytext()); return new Symbol(symbol.WIDTH         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 234: break;
          case 87:
            { yychar+=6  ; System.out.println(yytext());  return new Symbol(symbol.DIV_C          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 235: break;
          case 88:
            { yychar+=6  ; System.out.println(yytext());  return new Symbol(symbol.IMG_C          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 236: break;
          case 89:
            { yychar+=6   ;  System.out.println(yytext()); return new Symbol(symbol.CENTER        ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 237: break;
          case 90:
            { yychar+=3   ;  System.out.println(yytext()); return new Symbol(symbol.COLUMN        ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 238: break;
          case 91:
            { yychar+=6  ; System.out.println(yytext());  return new Symbol(symbol.BODY           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 239: break;
          case 92:
            { yychar+=6  ; System.out.println(yytext());  return new Symbol(symbol.HEAD           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 240: break;
          case 93:
            { yychar+=6  ; System.out.println(yytext());  return new Symbol(symbol.LINK           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 241: break;
          case 94:
            { yychar+=6  ; System.out.println(yytext());  return new Symbol(symbol.SPAM           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 242: break;
          case 95:
            { yychar+=6   ;  System.out.println(yytext()); return new Symbol(symbol.GENEVA        ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 243: break;
          case 96:
            { yychar+=6   ;  System.out.println(yytext()); return new Symbol(symbol.HEIGHT        ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 244: break;
          case 97:
            { yychar+=6   ;  System.out.println(yytext()); return new Symbol(symbol.HUNTIL        ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 245: break;
          case 98:
            { yychar+=6   ;  System.out.println(yytext()); return new Symbol(symbol.INSERT        ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 246: break;
          case 99:
            { yychar+=6  ;  System.out.println(yytext()); return new Symbol(symbol.MARRON         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 247: break;
          case 100:
            { yychar+=6   ;  System.out.println(yytext()); return new Symbol(symbol.NUMBER        ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 248: break;
          case 101:
            { yychar+=6  ;  System.out.println(yytext()); return new Symbol(symbol.PURPLE         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 249: break;
          case 102:
            { yychar+=4   ;  System.out.println(yytext()); return new Symbol(symbol.REPEAT        ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 250: break;
          case 103:
            { yychar+=6  ;  System.out.println(yytext()); return new Symbol(symbol.SILVER         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 251: break;
          case 104:
            { yychar+=6   ;  System.out.println(yytext()); return new Symbol(symbol.STRING        ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 252: break;
          case 105:
            { yychar+=6  ;  System.out.println(yytext()); return new Symbol(symbol.YELLOW         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 253: break;
          case 106:
            { yychar+=7  ; System.out.println(yytext());  return new Symbol(symbol.BODY_C         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 254: break;
          case 107:
            { yychar+=7  ; System.out.println(yytext());  return new Symbol(symbol.HEAD_C         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 255: break;
          case 108:
            { yychar+=7  ; System.out.println(yytext());  return new Symbol(symbol.LINK_C         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 256: break;
          case 109:
            { yychar+=7  ; System.out.println(yytext());  return new Symbol(symbol.SPAN_C         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 257: break;
          case 110:
            { yychar+=7   ;  System.out.println(yytext()); return new Symbol(symbol.GLOBAL        ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 258: break;
          case 111:
            { yychar+=7   ;  System.out.println(yytext()); return new Symbol(symbol.BOOLEAN       ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 259: break;
          case 112:
            { yychar+=7   ;  System.out.println(yytext()); return new Symbol(symbol.COURIER       ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 260: break;
          case 113:
            { yychar+=7  ; System.out.println(yytext());  return new Symbol(symbol.INPUT          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 261: break;
          case 114:
            { yychar+=7  ; System.out.println(yytext());  return new Symbol(symbol.TITLE          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 262: break;
          case 115:
            { yychar+=7   ;  System.out.println(yytext()); return new Symbol(symbol.DECIMAL       ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 263: break;
          case 116:
            { yychar+=7  ;  System.out.println(yytext()); return new Symbol(symbol.FUCHSIA        ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 264: break;
          case 117:
            { yychar+=8   ;  System.out.println(yytext()); return new Symbol(symbol.INTEGER       ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 265: break;
          case 118:
            { yychar+=7   ;  System.out.println(yytext()); return new Symbol(symbol.JUSTITY       ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 266: break;
          case 119:
            { yychar+=7   ;  System.out.println(yytext()); return new Symbol(symbol.ONCLICK       ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 267: break;
          case 120:
            { yychar+=7   ;  System.out.println(yytext()); return new Symbol(symbol.REVERSE       ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 268: break;
          case 121:
            { yychar+=7   ;  System.out.println(yytext()); return new Symbol(symbol.VERDANA       ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 269: break;
          case 122:
            { yychar+=8  ; System.out.println(yytext());  return new Symbol(symbol.INPUT_C        ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 270: break;
          case 123:
            { yychar+=8  ; System.out.println(yytext());  return new Symbol(symbol.TITLE_C        ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 271: break;
          case 124:
            { yychar+=8   ;  System.out.println(yytext()); return new Symbol(symbol.CHECKBOX      ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 272: break;
          case 125:
            { yychar+=8  ; System.out.println(yytext());  return new Symbol(symbol.BUTTON         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 273: break;
          case 126:
            { yychar+=8  ; System.out.println(yytext());  return new Symbol(symbol.OPTION         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 274: break;
          case 127:
            { yychar+=8  ; System.out.println(yytext());  return new Symbol(symbol.SELECTED       ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 275: break;
          case 128:
            { yychar+=9   ;  System.out.println(yytext()); return new Symbol(symbol.REDIRECT      ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 276: break;
          case 129:
            { yychar+=9  ; System.out.println(yytext());  return new Symbol(symbol.BUTTON_C       ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 277: break;
          case 130:
            { yychar+=9  ; System.out.println(yytext());  return new Symbol(symbol.OPTION_C       ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 278: break;
          case 131:
            { yychar+=9  ; System.out.println(yytext());  return new Symbol(symbol.SELECTED_C     ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 279: break;
          case 132:
            { yychar+=9   ;  System.out.println(yytext()); return new Symbol(symbol.FONT_SIZE     ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 280: break;
          case 133:
            { yychar+= 9  ;  System.out.println(yytext()); return new Symbol(symbol.ON_LOAD       ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 281: break;
          case 134:
            { yychar+=9   ;  System.out.println(yytext()); return new Symbol(symbol.THENWHILE     ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 282: break;
          case 135:
            { yychar+=10  ;  System.out.println(yytext()); return new Symbol(symbol.ALERT_INFO    ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 283: break;
          case 136:
            { yychar+=10 ;  System.out.println(yytext()); return new Symbol(symbol.BACKGROUND     ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 284: break;
          case 137:
            { yychar+=10 ; System.out.println(yytext());  return new Symbol(symbol.TEXTOAREA      ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 285: break;
          case 138:
            { longitudToken = yytext().length();   yychar+=longitudToken;  System.out.println(yytext());       return new Symbol(symbol.FUNTION      , yyline  ,  (int)yychar, yytext() );
            }
          // fall through
          case 286: break;
          case 139:
            { yychar+=10  ;  System.out.println(yytext()); return new Symbol(symbol.LETIMPAR_NUM  ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 287: break;
          case 140:
            { yychar+=10  ;  System.out.println(yytext()); return new Symbol(symbol.SANS_SERIF    ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 288: break;
          case 141:
            { yychar+=10  ;  System.out.println(yytext()); return new Symbol(symbol.TEXT_ALIGN    ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 289: break;
          case 142:
            { yychar+=11 ; System.out.println(yytext());  return new Symbol(symbol.TEXTOAREA_C    ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 290: break;
          case 143:
            { yychar+=11  ;  System.out.println(yytext()); return new Symbol(symbol.SCRIPTING     ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 291: break;
          case 144:
            { yychar+=11  ;  System.out.println(yytext()); return new Symbol(symbol.FONT_FAMI     ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 292: break;
          case 145:
            { yychar+=12  ;  System.out.println(yytext()); return new Symbol(symbol.SCRIPTING_C   ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 293: break;
          case 146:
            { yychar+=12  ;  System.out.println(yytext()); return new Symbol(symbol.LETIMPAR_NUM  ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 294: break;
          case 147:
            { yychar+=13  ;  System.out.println(yytext()); return new Symbol(symbol.NUM_ALEATORIO ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 295: break;
          case 148:
            { yychar+=18  ;  System.out.println(yytext()); return new Symbol(symbol.CARACTER_RAMD ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 296: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
