// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/main/jflex/LexerCC.lex


import java_cup.runtime.Symbol;


@SuppressWarnings("fallthrough")
public class LexerCC implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\24\u0200\1\u0300\11\u0200\1\u0400\1\u0500\16\u0200"+
    "\1\u0600\247\u0200\10\u0700\u1020\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\3\3\22\0\1\1\1\4\1\5"+
    "\1\6\2\0\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\1\1\15\1\16\1\17\1\20\1\21\10\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\1\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\0\1\64\1\0\1\65\1\0\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\66\1\67\1\70\7\0\1\3\32\0\1\1\40\0"+
    "\1\1\7\0\1\1\3\0\1\1\3\0\1\1\1\0"+
    "\1\1\6\0\1\1\1\0\1\1\4\0\1\1\7\0"+
    "\1\1\3\0\1\1\3\0\1\1\1\0\1\1\6\0"+
    "\1\1\1\0\1\1\63\0\2\71\115\0\1\72\u0200\0"+
    "\1\1\177\0\13\1\35\0\2\3\5\0\1\1\57\0"+
    "\1\1\312\0\1\73\325\0\1\1\377\0\u0100\74";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[2048];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\2\1\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\2\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\1\26\2\1\22\1\23"+
    "\1\24\1\1\1\25\2\1\1\11\1\12\1\26\1\14"+
    "\1\2\1\27\1\1\1\30\1\1\1\31\1\1\2\2"+
    "\1\1\1\32\1\33\1\34\1\1\4\2\1\35\1\1"+
    "\10\2\1\35\14\2\1\36\1\37\4\2\1\1\12\2"+
    "\1\1\4\2\1\1\7\2\1\1\1\2\1\40\1\36"+
    "\1\37\4\1\2\26\1\2\1\26\1\41\1\1\1\42"+
    "\1\1\1\43\2\1\1\2\1\44\2\2\1\1\2\45"+
    "\13\2\7\35\1\46\2\35\2\1\2\2\1\1\1\2"+
    "\1\1\1\47\1\2\1\1\10\2\1\1\5\2\2\1"+
    "\1\2\1\1\3\2\1\1\5\2\1\1\1\2\1\35"+
    "\2\2\1\50\3\2\1\51\1\1\2\2\1\52\1\2"+
    "\1\1\7\2\1\1\1\2\1\1\1\2\2\1\1\52"+
    "\1\1\2\26\1\53\1\26\1\54\7\1\1\55\4\1"+
    "\1\2\1\56\1\2\1\1\1\2\1\1\1\2\1\57"+
    "\3\2\1\60\2\2\1\1\1\2\1\61\1\2\1\61"+
    "\1\2\1\35\1\62\1\35\1\63\1\35\1\1\1\64"+
    "\4\35\1\1\6\35\6\1\1\2\1\1\2\65\2\66"+
    "\2\67\1\2\1\1\4\2\1\70\2\2\1\1\1\71"+
    "\1\2\1\72\2\2\1\72\1\1\1\2\1\1\1\73"+
    "\2\2\1\1\2\74\1\2\1\75\1\76\1\2\1\35"+
    "\1\2\1\1\1\2\1\35\2\2\1\1\1\2\1\1"+
    "\3\2\2\77\1\1\1\2\1\1\2\2\2\1\1\100"+
    "\1\101\1\102\1\103\1\104\3\2\2\1\1\2\1\1"+
    "\1\2\1\1\2\26\1\53\1\26\2\1\1\105\1\1"+
    "\1\106\1\1\1\107\14\1\1\2\2\110\1\2\1\1"+
    "\2\111\4\2\1\1\2\112\1\113\2\2\1\1\2\35"+
    "\2\114\1\35\1\115\2\35\1\1\6\35\1\1\1\115"+
    "\4\1\1\2\1\1\2\116\2\2\1\1\1\2\1\1"+
    "\1\2\1\117\1\2\1\1\1\2\1\1\2\2\1\1"+
    "\1\2\1\1\2\2\1\1\2\2\1\35\2\120\1\2"+
    "\1\1\1\35\1\2\2\121\1\2\1\1\2\2\2\122"+
    "\1\2\1\1\2\2\2\1\3\2\1\123\1\124\1\123"+
    "\1\124\2\125\1\2\1\1\2\26\1\53\3\1\1\126"+
    "\1\1\1\127\12\1\1\35\1\2\1\1\2\2\1\130"+
    "\1\2\1\1\1\131\1\2\1\1\1\132\1\35\1\133"+
    "\1\35\2\134\1\35\1\1\1\35\1\1\1\35\1\135"+
    "\2\35\3\1\1\135\1\2\1\1\2\2\1\1\1\2"+
    "\1\1\1\2\1\1\1\136\2\137\2\140\1\141\1\2"+
    "\1\141\1\2\1\1\2\2\1\1\1\142\1\143\1\35"+
    "\1\2\1\1\1\35\1\144\1\2\1\1\1\145\1\2"+
    "\1\1\1\2\1\1\1\146\2\147\1\146\3\2\1\150"+
    "\1\1\1\2\1\53\1\54\1\151\1\1\1\152\1\1"+
    "\1\153\3\1\1\154\2\1\1\41\1\155\1\35\1\1"+
    "\1\2\1\1\1\156\2\2\1\1\2\157\1\35\1\160"+
    "\1\35\1\1\1\35\1\1\2\35\2\161\1\160\1\1"+
    "\2\162\2\2\1\1\2\163\1\2\1\1\1\164\2\165"+
    "\1\2\1\35\1\1\1\35\2\166\1\35\1\2\1\1"+
    "\2\167\1\2\1\1\2\2\1\1\1\170\1\164\2\1"+
    "\1\171\4\1\1\172\1\35\1\1\1\2\1\1\1\2"+
    "\2\173\1\174\2\175\1\35\1\1\1\176\1\35\1\176"+
    "\2\2\1\1\1\35\1\1\1\2\1\35\1\1\1\35"+
    "\1\1\2\177\1\2\1\1\1\2\1\1\1\2\1\1"+
    "\1\54\1\200\1\201\1\1\1\202\1\1\1\35\1\1"+
    "\1\2\1\1\2\35\1\1\1\35\1\2\1\1\2\203"+
    "\1\1\2\35\1\1\1\35\1\204\1\2\1\1\1\2"+
    "\1\1\2\205\2\1\2\206\2\207\2\35\1\1\1\210"+
    "\1\2\1\1\1\211\1\35\1\212\1\1\1\35\2\213"+
    "\2\214\1\1\1\215\1\35\2\216\2\217\1\35\1\1"+
    "\1\35\1\220\1\35\2\221\1\35\1\1\1\35\2\222"+
    "\4\35\1\1\2\223";

  private static int [] zzUnpackAction() {
    int [] result = new int[775];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\364\0\u0131\0\u016e\0\u01ab"+
    "\0\u01e8\0\267\0\267\0\267\0\267\0\267\0\u0225\0\u0262"+
    "\0\u029f\0\267\0\267\0\u02dc\0\u0319\0\u0356\0\u0393\0\u03d0"+
    "\0\u040d\0\u044a\0\u0487\0\u04c4\0\u0501\0\u053e\0\u057b\0\u05b8"+
    "\0\u05f5\0\u0632\0\u066f\0\u06ac\0\u06e9\0\u0726\0\u0763\0\u07a0"+
    "\0\u07dd\0\u081a\0\u0857\0\u0894\0\u08d1\0\172\0\172\0\172"+
    "\0\u090e\0\172\0\u094b\0\u0988\0\u09c5\0\u09c5\0\u0a02\0\u0a3f"+
    "\0\u0a7c\0\267\0\u0131\0\u0131\0\u0ab9\0\172\0\u0af6\0\u0b33"+
    "\0\u0b70\0\u0bad\0\172\0\267\0\172\0\u0bea\0\u0c27\0\u0c64"+
    "\0\u0ca1\0\u0cde\0\u0d1b\0\u0d58\0\u0d95\0\u0dd2\0\u0e0f\0\u0e4c"+
    "\0\u0e89\0\u0ec6\0\u0f03\0\u0f40\0\u0f7d\0\u0fba\0\u0ff7\0\u1034"+
    "\0\u1071\0\u10ae\0\u10eb\0\u1128\0\u1165\0\u11a2\0\u11df\0\u121c"+
    "\0\u1259\0\u0632\0\u0632\0\u1296\0\u12d3\0\u1310\0\u134d\0\u138a"+
    "\0\u13c7\0\u1404\0\u1441\0\u147e\0\u14bb\0\u14f8\0\u1535\0\u1572"+
    "\0\u15af\0\u15ec\0\u1629\0\u1666\0\u16a3\0\u16e0\0\u171d\0\u175a"+
    "\0\u1797\0\u17d4\0\u1811\0\u184e\0\u188b\0\u18c8\0\u1905\0\u1942"+
    "\0\u197f\0\172\0\172\0\172\0\u19bc\0\u19f9\0\u1a36\0\u1a73"+
    "\0\u1ab0\0\u1aed\0\u1b2a\0\u1b67\0\u1ba4\0\u1be1\0\172\0\u1c1e"+
    "\0\267\0\u1c5b\0\u1c98\0\u1cd5\0\u0632\0\u1d12\0\u1d4f\0\u1d8c"+
    "\0\u0632\0\172\0\u1dc9\0\u1e06\0\u1e43\0\u1e80\0\u1ebd\0\u1efa"+
    "\0\u1f37\0\u1f74\0\u1fb1\0\u1fee\0\u202b\0\u2068\0\u20a5\0\u20e2"+
    "\0\u211f\0\u215c\0\u2199\0\u21d6\0\u0d1b\0\u2213\0\u2250\0\u228d"+
    "\0\u22ca\0\u2307\0\u2344\0\u2381\0\u23be\0\u23fb\0\u0632\0\u2438"+
    "\0\u2475\0\u24b2\0\u24ef\0\u252c\0\u2569\0\u25a6\0\u25e3\0\u2620"+
    "\0\u265d\0\u269a\0\u26d7\0\u2714\0\u2751\0\u278e\0\u27cb\0\u2808"+
    "\0\u2845\0\u2882\0\u28bf\0\u28fc\0\u2939\0\u2976\0\u29b3\0\u29f0"+
    "\0\u2a2d\0\u2a6a\0\u2aa7\0\u2ae4\0\u2b21\0\u2b5e\0\u2b9b\0\u2bd8"+
    "\0\u2c15\0\u2c52\0\u2c8f\0\u2ccc\0\u2d09\0\u2d46\0\u2d83\0\u2dc0"+
    "\0\u2dfd\0\u0632\0\u2e3a\0\u2e77\0\u2eb4\0\u2ef1\0\u2f2e\0\u2f6b"+
    "\0\u2fa8\0\u2fe5\0\u3022\0\u305f\0\u309c\0\u30d9\0\u3116\0\u3153"+
    "\0\u3190\0\172\0\u31cd\0\u320a\0\u3247\0\u3284\0\u32c1\0\u32fe"+
    "\0\u333b\0\u3378\0\u33b5\0\u33f2\0\u342f\0\u346c\0\u34a9\0\172"+
    "\0\u34e6\0\u3523\0\u3560\0\u359d\0\u35da\0\u0632\0\u3617\0\u3654"+
    "\0\u3691\0\u36ce\0\u370b\0\u0632\0\u3748\0\u3785\0\u37c2\0\u0632"+
    "\0\u37ff\0\u383c\0\u3879\0\u38b6\0\u0632\0\u38f3\0\172\0\u3930"+
    "\0\u396d\0\u0d1b\0\u39aa\0\u0d1b\0\u39e7\0\u3a24\0\u0d1b\0\u3a61"+
    "\0\u3a9e\0\u3adb\0\u3b18\0\u3b55\0\u3b92\0\u3bcf\0\u3c0c\0\u3c49"+
    "\0\u3c86\0\u3cc3\0\u3d00\0\u3d3d\0\u3d7a\0\u3db7\0\u3df4\0\u3e31"+
    "\0\u3e6e\0\u3eab\0\u0632\0\172\0\u0632\0\172\0\u0632\0\172"+
    "\0\u3ee8\0\u3f25\0\u3f62\0\u3f9f\0\u3fdc\0\u4019\0\u0632\0\u4056"+
    "\0\u4093\0\u40d0\0\u0632\0\u410d\0\u0632\0\u414a\0\u4187\0\172"+
    "\0\u41c4\0\u4201\0\u423e\0\u0632\0\u427b\0\u42b8\0\u42f5\0\u0632"+
    "\0\172\0\u4332\0\u0632\0\u0632\0\u436f\0\u43ac\0\u43e9\0\u4426"+
    "\0\u4463\0\u44a0\0\u44dd\0\u451a\0\u4557\0\u4594\0\u45d1\0\u460e"+
    "\0\u464b\0\u4688\0\u0632\0\172\0\u46c5\0\u4702\0\u473f\0\u477c"+
    "\0\u47b9\0\u47f6\0\u4833\0\u0632\0\u4870\0\u48ad\0\u0632\0\u0632"+
    "\0\u48ea\0\u4927\0\u4964\0\u49a1\0\u49de\0\u4a1b\0\u4a58\0\u4a95"+
    "\0\u4ad2\0\u4b0f\0\u4b4c\0\u4b89\0\u0262\0\u4bc6\0\u4c03\0\172"+
    "\0\u4c40\0\172\0\u4c7d\0\172\0\u4cba\0\u4cf7\0\u4d34\0\u4d71"+
    "\0\u4dae\0\u4deb\0\u4e28\0\u4e65\0\u4ea2\0\u4edf\0\u4f1c\0\u4f59"+
    "\0\u4f96\0\u0632\0\172\0\u4fd3\0\u5010\0\u0632\0\172\0\u504d"+
    "\0\u508a\0\u50c7\0\u5104\0\u5141\0\u0632\0\172\0\u0632\0\u517e"+
    "\0\u51bb\0\u51f8\0\u5235\0\u5272\0\u0d1b\0\172\0\u52af\0\u0d1b"+
    "\0\u52ec\0\u5329\0\u5366\0\u53a3\0\u53e0\0\u541d\0\u545a\0\u5497"+
    "\0\u54d4\0\u5511\0\172\0\u554e\0\u558b\0\u55c8\0\u5605\0\u5642"+
    "\0\u567f\0\u0632\0\172\0\u56bc\0\u56f9\0\u5736\0\u5773\0\u57b0"+
    "\0\u57ed\0\u0632\0\u582a\0\u5867\0\u58a4\0\u58e1\0\u591e\0\u595b"+
    "\0\u5998\0\u59d5\0\u5a12\0\u5a4f\0\u5a8c\0\u5ac9\0\u5b06\0\u5b43"+
    "\0\u5b80\0\u0632\0\172\0\u5bbd\0\u5bfa\0\u5c37\0\u5c74\0\u0632"+
    "\0\172\0\u5cb1\0\u5cee\0\u5d2b\0\u5d68\0\u0632\0\172\0\u5da5"+
    "\0\u5de2\0\u5e1f\0\u5e5c\0\u5e99\0\u5ed6\0\u5f13\0\u5f50\0\u5f8d"+
    "\0\u0632\0\u0632\0\172\0\172\0\u0632\0\172\0\u5fca\0\u6007"+
    "\0\267\0\u6044\0\u6081\0\u60be\0\u60fb\0\u6138\0\172\0\u6175"+
    "\0\172\0\u61b2\0\u61ef\0\u622c\0\u6269\0\u62a6\0\u62e3\0\u6320"+
    "\0\u635d\0\u639a\0\u63d7\0\u6414\0\u6451\0\u648e\0\u64cb\0\u6508"+
    "\0\u0632\0\u6545\0\u6582\0\u0632\0\u65bf\0\u65fc\0\u0d1b\0\u6639"+
    "\0\u0d1b\0\u6676\0\u0d1b\0\172\0\u66b3\0\u66f0\0\u672d\0\u676a"+
    "\0\u67a7\0\u0d1b\0\u67e4\0\u6821\0\u685e\0\u689b\0\u68d8\0\172"+
    "\0\u6915\0\u6952\0\u698f\0\u69cc\0\u6a09\0\u6a46\0\u6a83\0\u6ac0"+
    "\0\u6afd\0\u0632\0\u0632\0\172\0\u0632\0\172\0\u0632\0\u6b3a"+
    "\0\172\0\u6b77\0\u6bb4\0\u6bf1\0\u6c2e\0\u6c6b\0\u0632\0\u0632"+
    "\0\u6ca8\0\u6ce5\0\u6d22\0\u6d5f\0\u0632\0\u6d9c\0\u6dd9\0\u0632"+
    "\0\u6e16\0\u6e53\0\u6e90\0\u6ecd\0\u0632\0\u0632\0\172\0\172"+
    "\0\u6f0a\0\u6f47\0\u6f84\0\u0632\0\u6fc1\0\u6044\0\267\0\u6ffe"+
    "\0\172\0\u703b\0\172\0\u7078\0\172\0\u70b5\0\u70f2\0\u712f"+
    "\0\172\0\u716c\0\u71a9\0\u3560\0\172\0\u71e6\0\u7223\0\u7260"+
    "\0\u729d\0\u0632\0\u72da\0\u7317\0\u7354\0\u0632\0\172\0\u7391"+
    "\0\u0d1b\0\u73ce\0\u740b\0\u7448\0\u7485\0\u74c2\0\u74ff\0\u0d1b"+
    "\0\172\0\172\0\u753c\0\u0632\0\172\0\u7579\0\u75b6\0\u75f3"+
    "\0\u0632\0\172\0\u7630\0\u766d\0\u0632\0\u0632\0\172\0\u76aa"+
    "\0\u76e7\0\u7724\0\u7761\0\u0632\0\172\0\u779e\0\u77db\0\u7818"+
    "\0\u0632\0\172\0\u7855\0\u7892\0\u78cf\0\u790c\0\u7949\0\u0632"+
    "\0\172\0\u7986\0\u79c3\0\172\0\u7a00\0\u7a3d\0\u7a7a\0\u7ab7"+
    "\0\172\0\u7af4\0\u7b31\0\u7b6e\0\u7bab\0\u7be8\0\u0632\0\172"+
    "\0\u0d1b\0\u0d1b\0\172\0\u7c25\0\u7c62\0\u0d1b\0\u7c9f\0\172"+
    "\0\u7cdc\0\u7d19\0\u7d56\0\u7d93\0\u7dd0\0\u7e0d\0\u7e4a\0\u7e87"+
    "\0\u7ec4\0\u7f01\0\u0632\0\172\0\u7f3e\0\u7f7b\0\u7fb8\0\u7ff5"+
    "\0\u8032\0\u806f\0\172\0\172\0\172\0\u80ac\0\172\0\u80e9"+
    "\0\u8126\0\u8163\0\u81a0\0\u81dd\0\u821a\0\u8257\0\u8294\0\u82d1"+
    "\0\u830e\0\u834b\0\267\0\172\0\u8388\0\u83c5\0\u8402\0\u843f"+
    "\0\u847c\0\172\0\u84b9\0\u84f6\0\u8533\0\u8570\0\u0632\0\172"+
    "\0\u85ad\0\u85ea\0\u0d1b\0\172\0\u0632\0\172\0\u8627\0\u8664"+
    "\0\u86a1\0\u0d1b\0\u86de\0\u871b\0\172\0\u8758\0\u0d1b\0\u8795"+
    "\0\u87d2\0\267\0\172\0\267\0\172\0\u880f\0\172\0\u884c"+
    "\0\u0d1b\0\172\0\267\0\172\0\u8889\0\u88c6\0\u8903\0\172"+
    "\0\u8940\0\u0d1b\0\172\0\u897d\0\u89ba\0\u89f7\0\u0d1b\0\172"+
    "\0\u8a34\0\u8a71\0\u8aae\0\u8aeb\0\u8b28\0\u0d1b\0\172";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[775];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\3\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\4\1\17\1\20\2\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\42\1\50"+
    "\1\51\1\52\1\42\1\53\1\54\1\42\1\55\1\42"+
    "\1\56\1\57\1\3\1\60\1\61\1\62\1\63\1\64"+
    "\3\3\3\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\65\1\66\1\4\1\17\1\67\2\70"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\42\1\50"+
    "\1\51\1\52\1\42\1\53\1\54\1\42\1\55\1\42"+
    "\1\56\1\57\1\3\1\60\1\61\1\62\1\63\1\64"+
    "\100\3\4\4\4\3\14\4\1\3\1\4\2\3\32\4"+
    "\13\3\3\4\1\71\4\3\14\4\1\3\1\72\2\3"+
    "\32\4\12\3\5\73\1\74\67\73\20\3\3\75\6\3"+
    "\6\75\45\3\1\76\65\3\75\77\1\3\4\4\4\3"+
    "\14\4\1\3\1\4\2\3\2\4\1\100\27\4\13\3"+
    "\4\4\4\3\7\4\3\20\2\4\1\3\1\4\2\3"+
    "\17\4\1\101\12\4\13\3\4\4\4\3\7\4\3\21"+
    "\2\4\1\3\1\4\2\3\17\4\1\101\12\4\16\3"+
    "\1\102\21\3\1\103\47\3\4\4\4\3\14\4\1\3"+
    "\1\104\2\3\32\4\40\3\1\105\105\3\1\106\36\3"+
    "\4\4\4\3\7\4\3\42\2\4\1\3\1\4\2\3"+
    "\13\42\1\107\4\42\1\110\1\111\1\112\7\42\2\3"+
    "\1\113\4\3\1\114\3\3\4\4\4\3\7\4\3\42"+
    "\2\4\1\3\1\4\2\3\1\115\12\42\1\116\2\42"+
    "\1\117\13\42\2\3\1\113\10\3\4\4\4\3\7\4"+
    "\3\42\2\4\1\3\1\4\2\3\1\120\3\42\1\121"+
    "\2\42\1\122\3\42\1\123\2\42\1\124\13\42\2\3"+
    "\1\125\10\3\4\4\4\3\7\4\3\42\2\4\1\3"+
    "\1\4\2\3\4\42\1\126\25\42\2\3\1\113\10\3"+
    "\4\4\4\3\7\4\3\42\2\4\1\3\1\4\2\3"+
    "\13\42\1\127\1\42\1\130\11\42\1\131\2\42\2\3"+
    "\1\113\10\3\4\4\4\3\7\4\3\42\2\4\1\3"+
    "\1\4\2\3\1\132\15\42\1\133\5\42\1\134\5\42"+
    "\2\3\1\113\10\3\4\4\4\3\7\4\3\42\2\4"+
    "\1\3\1\4\2\3\4\42\1\135\14\42\1\136\10\42"+
    "\2\3\1\113\10\3\4\4\4\3\7\4\3\42\2\4"+
    "\1\3\1\4\2\3\4\42\1\137\14\42\1\140\2\42"+
    "\1\141\5\42\2\3\1\113\10\3\4\4\4\3\7\4"+
    "\3\42\2\4\1\3\1\4\2\3\3\42\1\142\1\42"+
    "\1\143\7\42\1\144\14\42\2\3\1\113\10\3\4\4"+
    "\4\3\7\4\3\42\2\4\1\3\1\4\2\3\24\42"+
    "\1\145\5\42\2\3\1\113\10\3\4\4\4\3\7\4"+
    "\3\42\2\4\1\3\1\4\2\3\32\42\2\3\1\113"+
    "\10\3\4\4\4\3\7\4\3\42\2\4\1\3\1\4"+
    "\2\3\4\42\1\146\3\42\1\147\21\42\2\3\1\113"+
    "\3\3\1\150\4\3\4\4\4\3\7\4\3\42\2\4"+
    "\1\3\1\4\2\3\1\151\31\42\2\3\1\113\10\3"+
    "\4\4\4\3\7\4\3\42\2\4\1\3\1\4\2\3"+
    "\1\152\23\42\1\153\5\42\2\3\1\113\10\3\4\4"+
    "\4\3\7\4\3\42\2\4\1\3\1\4\2\3\13\42"+
    "\1\154\1\42\1\155\14\42\2\3\1\113\10\3\4\4"+
    "\4\3\7\4\3\42\2\4\1\3\1\4\2\3\24\42"+
    "\1\156\5\42\2\3\1\113\10\3\4\4\4\3\7\4"+
    "\3\42\2\4\1\3\1\4\2\3\1\157\3\42\1\160"+
    "\3\42\1\161\5\42\1\162\13\42\2\3\1\113\3\3"+
    "\1\163\4\3\4\4\4\3\7\4\3\42\2\4\1\3"+
    "\1\4\2\3\1\164\7\42\1\165\10\42\1\166\1\42"+
    "\1\167\6\42\2\3\1\113\3\3\1\170\4\3\4\4"+
    "\4\3\7\4\3\42\2\4\1\3\1\4\2\3\4\42"+
    "\1\171\2\42\1\172\11\42\1\173\6\42\1\174\1\42"+
    "\2\3\1\113\10\3\4\4\4\3\7\4\3\42\2\4"+
    "\1\3\1\4\2\3\4\42\1\175\25\42\2\3\1\113"+
    "\10\3\4\4\4\3\7\4\3\42\2\4\1\3\1\4"+
    "\2\3\7\42\1\176\1\177\21\42\2\3\1\113\3\3"+
    "\1\200\4\3\4\4\4\3\7\4\3\42\2\4\1\3"+
    "\1\4\2\3\4\42\1\201\25\42\2\3\1\113\76\3"+
    "\1\202\41\3\1\203\1\3\1\204\7\3\1\205\57\3"+
    "\1\206\7\3\1\170\10\3\1\207\1\3\1\210\14\3"+
    "\1\170\4\3\4\4\4\3\7\4\1\211\2\212\2\4"+
    "\1\3\1\4\2\3\32\4\13\3\4\4\4\3\5\4"+
    "\1\213\1\4\3\214\2\4\1\3\1\4\2\3\17\4"+
    "\1\101\12\4\13\3\4\4\4\3\5\4\1\213\1\4"+
    "\3\70\2\4\1\3\1\4\2\3\17\4\1\101\12\4"+
    "\12\3\1\215\1\71\1\4\2\71\4\215\14\71\1\215"+
    "\1\71\2\215\32\71\12\215\20\3\3\216\6\3\6\216"+
    "\46\3\1\217\65\3\4\4\4\3\14\4\1\3\1\4"+
    "\2\3\32\4\2\3\1\220\10\3\4\4\4\3\14\4"+
    "\1\3\1\4\2\3\27\4\1\221\2\4\27\3\1\222"+
    "\123\3\1\223\31\3\4\4\4\3\7\4\3\42\2\4"+
    "\1\3\1\4\2\3\4\42\1\224\16\42\1\225\6\42"+
    "\2\3\1\113\10\3\4\4\4\3\7\4\3\42\2\4"+
    "\1\3\1\4\2\3\24\42\1\226\5\42\2\3\1\113"+
    "\10\3\4\4\4\3\7\4\3\42\2\4\1\3\1\4"+
    "\2\3\10\42\1\227\21\42\2\3\1\113\3\3\1\230"+
    "\4\3\4\4\4\3\7\4\3\42\2\4\1\3\1\4"+
    "\2\3\2\42\1\231\27\42\2\3\1\113\27\3\3\113"+
    "\6\3\32\113\2\3\1\113\42\3\1\232\42\3\4\4"+
    "\4\3\7\4\3\42\2\4\1\3\1\4\2\3\2\42"+
    "\1\233\27\42\2\3\1\113\10\3\4\4\4\3\7\4"+
    "\3\42\2\4\1\3\1\4\2\3\1\234\23\42\1\235"+
    "\5\42\2\3\1\113\10\3\4\4\4\3\7\4\3\42"+
    "\2\4\1\3\1\4\2\3\16\42\1\236\13\42\2\3"+
    "\1\113\10\3\4\4\4\3\7\4\3\42\2\4\1\3"+
    "\1\4\2\3\21\42\1\237\10\42\2\3\1\113\10\3"+
    "\4\4\4\3\7\4\3\42\2\4\1\3\1\4\2\3"+
    "\15\42\1\240\14\42\2\3\1\113\10\3\4\4\4\3"+
    "\7\4\3\42\2\4\1\3\1\4\2\3\1\241\3\42"+
    "\1\242\25\42\2\3\1\113\10\3\4\4\4\3\7\4"+
    "\3\42\2\4\1\3\1\4\2\3\1\243\31\42\2\3"+
    "\1\113\10\3\4\4\4\3\7\4\3\42\2\4\1\3"+
    "\1\4\2\3\13\42\1\244\10\42\1\245\5\42\2\3"+
    "\1\113\27\3\3\113\6\3\1\113\1\246\1\247\1\250"+
    "\3\113\1\251\1\252\2\113\1\253\2\113\1\254\1\255"+
    "\2\113\1\256\1\257\6\113\2\3\1\113\3\3\1\260"+
    "\1\261\3\3\4\4\4\3\7\4\3\42\2\4\1\3"+
    "\1\4\2\3\2\42\1\262\17\42\1\263\7\42\2\3"+
    "\1\113\4\3\1\264\3\3\4\4\4\3\7\4\3\42"+
    "\2\4\1\3\1\4\2\3\22\42\1\265\7\42\2\3"+
    "\1\113\4\3\1\266\3\3\4\4\4\3\7\4\3\42"+
    "\2\4\1\3\1\4\2\3\3\42\1\267\26\42\2\3"+
    "\1\113\10\3\4\4\4\3\7\4\3\42\2\4\1\3"+
    "\1\4\2\3\10\42\1\270\21\42\2\3\1\113\3\3"+
    "\1\271\4\3\4\4\4\3\7\4\3\42\2\4\1\3"+
    "\1\4\2\3\13\42\1\272\16\42\2\3\1\113\10\3"+
    "\4\4\4\3\7\4\3\42\2\4\1\3\1\4\2\3"+
    "\15\42\1\273\14\42\2\3\1\113\10\3\4\4\4\3"+
    "\7\4\3\42\2\4\1\3\1\4\2\3\2\42\1\274"+
    "\12\42\1\275\14\42\2\3\1\113\10\3\4\4\4\3"+
    "\7\4\3\42\2\4\1\3\1\4\2\3\15\42\1\276"+
    "\14\42\2\3\1\113\10\3\4\4\4\3\7\4\3\42"+
    "\2\4\1\3\1\4\2\3\1\277\3\42\1\300\25\42"+
    "\2\3\1\113\10\3\4\4\4\3\7\4\3\42\2\4"+
    "\1\3\1\4\2\3\10\42\1\301\21\42\2\3\1\113"+
    "\3\3\1\302\4\3\4\4\4\3\7\4\3\42\2\4"+
    "\1\3\1\4\2\3\4\42\1\303\25\42\2\3\1\113"+
    "\10\3\4\4\4\3\7\4\3\42\2\4\1\3\1\4"+
    "\2\3\15\42\1\304\14\42\2\3\1\113\10\3\4\4"+
    "\4\3\7\4\3\42\2\4\1\3\1\4\2\3\10\42"+
    "\1\305\11\42\1\306\1\307\6\42\2\3\1\113\3\3"+
    "\1\310\1\311\3\3\4\4\4\3\7\4\3\42\2\4"+
    "\1\3\1\4\2\3\22\42\1\312\7\42\2\3\1\113"+
    "\4\3\1\313\3\3\4\4\4\3\7\4\3\42\2\4"+
    "\1\3\1\4\2\3\5\42\1\314\15\42\1\315\6\42"+
    "\2\3\1\113\10\3\4\4\4\3\7\4\3\42\2\4"+
    "\1\3\1\4\2\3\14\42\1\316\15\42\2\3\1\113"+
    "\54\3\1\317\30\3\4\4\4\3\7\4\3\42\2\4"+
    "\1\3\1\4\2\3\21\42\1\320\10\42\2\3\1\113"+
    "\10\3\4\4\4\3\7\4\3\42\2\4\1\3\1\4"+
    "\2\3\14\42\1\321\10\42\1\322\4\42\2\3\1\113"+
    "\10\3\4\4\4\3\7\4\3\42\2\4\1\3\1\4"+
    "\2\3\14\42\1\323\15\42\2\3\1\113\10\3\4\4"+
    "\4\3\7\4\3\42\2\4\1\3\1\4\2\3\10\42"+
    "\1\324\21\42\2\3\1\113\3\3\1\325\4\3\4\4"+
    "\4\3\7\4\3\42\2\4\1\3\1\4\2\3\2\42"+
    "\1\326\27\42\2\3\1\327\10\3\4\4\4\3\7\4"+
    "\3\42\2\4\1\3\1\4\2\3\21\42\1\330\10\42"+
    "\2\3\1\113\10\3\4\4\4\3\7\4\3\42\2\4"+
    "\1\3\1\4\2\3\3\42\1\331\26\42\2\3\1\113"+
    "\10\3\4\4\4\3\7\4\3\42\2\4\1\3\1\4"+
    "\2\3\3\42\1\332\13\42\1\333\5\42\1\334\4\42"+
    "\2\3\1\113\10\3\4\4\4\3\7\4\3\42\2\4"+
    "\1\3\1\4\2\3\6\42\1\335\23\42\2\3\1\113"+
    "\10\3\4\4\4\3\7\4\3\42\2\4\1\3\1\4"+
    "\2\3\26\42\1\336\3\42\2\3\1\113\46\3\1\337"+
    "\36\3\4\4\4\3\7\4\3\42\2\4\1\3\1\4"+
    "\2\3\15\42\1\340\14\42\2\3\1\113\10\3\4\4"+
    "\4\3\7\4\3\42\2\4\1\3\1\4\2\3\13\42"+
    "\1\341\16\42\2\3\1\113\10\3\4\4\4\3\7\4"+
    "\3\42\2\4\1\3\1\4\2\3\2\42\1\342\27\42"+
    "\2\3\1\113\10\3\4\4\4\3\7\4\3\42\2\4"+
    "\1\3\1\4\2\3\21\42\1\343\10\42\2\3\1\113"+
    "\53\3\1\344\31\3\4\4\4\3\7\4\3\42\2\4"+
    "\1\3\1\4\2\3\1\345\26\42\1\346\2\42\2\3"+
    "\1\113\10\3\4\4\4\3\7\4\3\42\2\4\1\3"+
    "\1\4\2\3\4\42\1\347\25\42\2\3\1\113\10\3"+
    "\4\4\4\3\7\4\3\42\2\4\1\3\1\4\2\3"+
    "\24\42\1\350\5\42\2\3\1\113\10\3\4\4\4\3"+
    "\7\4\3\42\2\4\1\3\1\4\2\3\17\42\1\351"+
    "\12\42\2\3\1\113\10\3\4\4\4\3\7\4\3\42"+
    "\2\4\1\3\1\4\2\3\21\42\1\352\10\42\2\3"+
    "\1\113\10\3\4\4\4\3\7\4\3\42\2\4\1\3"+
    "\1\4\2\3\10\42\1\353\21\42\2\3\1\113\3\3"+
    "\1\354\4\3\4\4\4\3\7\4\3\42\2\4\1\3"+
    "\1\4\2\3\3\42\1\355\26\42\2\3\1\113\43\3"+
    "\1\356\41\3\4\4\4\3\7\4\3\42\2\4\1\3"+
    "\1\4\2\3\13\42\1\357\16\42\2\3\1\113\50\3"+
    "\1\310\11\3\1\311\1\360\14\3\1\310\1\311\50\3"+
    "\1\361\61\3\1\362\113\3\1\363\23\3\4\4\4\3"+
    "\5\4\1\213\1\4\3\364\2\4\1\3\1\4\2\3"+
    "\32\4\13\3\4\4\4\3\5\4\1\213\1\4\3\365"+
    "\2\4\1\3\1\4\2\3\32\4\13\3\4\4\4\3"+
    "\7\4\3\366\2\4\1\3\1\4\2\3\32\4\13\3"+
    "\4\4\4\3\7\4\3\367\2\4\1\3\1\4\2\3"+
    "\17\4\1\101\12\4\12\3\2\215\1\3\72\215\20\3"+
    "\3\370\6\3\6\370\70\3\1\371\1\372\1\373\3\3"+
    "\1\374\1\375\2\3\1\376\2\3\1\377\1\u0100\2\3"+
    "\1\u0101\1\u0102\14\3\1\375\1\u0101\17\3\1\u0103\126\3"+
    "\1\u0104\26\3\4\4\4\3\7\4\3\42\2\4\1\3"+
    "\1\4\2\3\21\42\1\u0105\10\42\2\3\1\113\10\3"+
    "\4\4\4\3\7\4\3\42\2\4\1\3\1\4\2\3"+
    "\1\u0106\31\42\2\3\1\113\10\3\4\4\4\3\7\4"+
    "\3\42\2\4\1\3\1\4\2\3\1\u0107\31\42\2\3"+
    "\1\113\40\3\1\u0108\44\3\4\4\4\3\7\4\3\42"+
    "\2\4\1\3\1\4\2\3\12\42\1\u0109\17\42\2\3"+
    "\1\113\5\3\1\u010a\2\3\4\4\4\3\7\4\3\42"+
    "\2\4\1\3\1\4\2\3\2\42\1\u010b\27\42\2\3"+
    "\1\113\10\3\4\4\4\3\7\4\3\42\2\4\1\3"+
    "\1\4\2\3\4\42\1\u010c\25\42\2\3\1\113\10\3"+
    "\4\4\4\3\7\4\3\42\2\4\1\3\1\4\2\3"+
    "\13\42\1\u010d\16\42\2\3\1\113\10\3\4\4\4\3"+
    "\7\4\3\42\2\4\1\3\1\4\2\3\1\u010e\31\42"+
    "\2\3\1\113\10\3\4\4\4\3\7\4\3\42\2\4"+
    "\1\3\1\4\2\3\23\42\1\u010f\6\42\2\3\1\113"+
    "\10\3\4\4\4\3\7\4\3\42\2\4\1\3\1\4"+
    "\2\3\21\42\1\u0110\10\42\2\3\1\113\10\3\4\4"+
    "\4\3\7\4\3\42\2\4\1\3\1\4\2\3\2\42"+
    "\1\u0111\27\42\2\3\1\113\10\3\4\4\4\3\7\4"+
    "\3\42\2\4\1\3\1\4\2\3\22\42\1\u0112\7\42"+
    "\2\3\1\113\4\3\1\u0113\3\3\4\4\4\3\7\4"+
    "\3\42\2\4\1\3\1\4\2\3\16\42\1\u0114\3\42"+
    "\1\u0115\1\42\1\u0116\5\42\2\3\1\113\4\3\1\u0117"+
    "\3\3\4\4\4\3\7\4\3\42\2\4\1\3\1\4"+
    "\2\3\21\42\1\u0118\10\42\2\3\1\113\27\3\3\113"+
    "\6\3\16\113\1\u0119\2\113\1\u011a\2\113\1\u011b\5\113"+
    "\2\3\1\113\27\3\3\113\6\3\2\113\1\u011c\27\113"+
    "\2\3\1\113\27\3\3\113\6\3\10\113\1\u011d\21\113"+
    "\2\3\1\113\3\3\1\u011e\23\3\1\113\1\u011f\1\113"+
    "\6\3\4\113\1\u0120\25\113\2\3\1\113\27\3\3\113"+
    "\6\3\14\113\1\u0121\1\u0122\14\113\2\3\1\113\27\3"+
    "\3\113\6\3\10\113\1\u0123\21\113\2\3\1\113\3\3"+
    "\1\u0124\23\3\3\113\6\3\17\113\1\u0125\12\113\2\3"+
    "\1\113\27\3\3\113\6\3\2\113\1\u0126\1\113\1\u0127"+
    "\12\113\1\u0128\12\113\2\3\1\113\27\3\3\113\6\3"+
    "\4\113\1\u0129\3\113\1\u012a\21\113\2\3\1\113\3\3"+
    "\1\u012b\50\3\1\u012c\1\u012d\61\3\1\u012e\1\3\1\u012f"+
    "\12\3\1\u0130\25\3\4\4\4\3\7\4\3\42\2\4"+
    "\1\3\1\4\2\3\10\42\1\u0131\21\42\2\3\1\113"+
    "\3\3\1\u0132\4\3\4\4\4\3\7\4\3\42\2\4"+
    "\1\3\1\4\2\3\2\42\1\u0133\27\42\2\3\1\113"+
    "\42\3\1\u0134\42\3\4\4\4\3\7\4\3\42\2\4"+
    "\1\3\1\4\2\3\4\42\1\u0135\25\42\2\3\1\113"+
    "\44\3\1\u0136\40\3\4\4\4\3\7\4\3\42\2\4"+
    "\1\3\1\4\2\3\23\42\1\u0137\6\42\2\3\1\113"+
    "\63\3\1\u0138\21\3\4\4\4\3\7\4\3\42\2\4"+
    "\1\3\1\4\2\3\22\42\1\u0139\7\42\2\3\1\113"+
    "\4\3\1\u013a\3\3\4\4\4\3\7\4\3\42\2\4"+
    "\1\3\1\4\2\3\23\42\1\u013b\6\42\2\3\1\113"+
    "\10\3\4\4\4\3\7\4\3\42\2\4\1\3\1\4"+
    "\2\3\7\42\1\u013c\22\42\2\3\1\113\10\3\4\4"+
    "\4\3\7\4\3\42\2\4\1\3\1\4\2\3\23\42"+
    "\1\u013d\6\42\2\3\1\113\10\3\4\4\4\3\7\4"+
    "\3\42\2\4\1\3\1\4\2\3\4\42\1\u013e\25\42"+
    "\2\3\1\113\10\3\4\4\4\3\7\4\3\42\2\4"+
    "\1\3\1\4\2\3\30\42\1\u013f\1\42\2\3\1\113"+
    "\10\3\4\4\4\3\7\4\3\42\2\4\1\3\1\4"+
    "\2\3\4\42\1\u0140\25\42\2\3\1\113\10\3\4\4"+
    "\4\3\7\4\3\42\2\4\1\3\1\4\2\3\6\42"+
    "\1\u0141\23\42\2\3\1\113\46\3\1\u0142\36\3\4\4"+
    "\4\3\7\4\3\42\2\4\1\3\1\4\2\3\5\42"+
    "\1\u0143\24\42\2\3\1\113\10\3\4\4\4\3\7\4"+
    "\3\42\2\4\1\3\1\4\2\3\23\42\1\u0144\6\42"+
    "\2\3\1\113\10\3\4\4\4\3\7\4\3\42\2\4"+
    "\1\3\1\4\2\3\23\42\1\u0145\6\42\2\3\1\113"+
    "\10\3\4\4\4\3\7\4\3\42\2\4\1\3\1\4"+
    "\2\3\4\42\1\u0146\25\42\2\3\1\113\10\3\4\4"+
    "\4\3\7\4\3\42\2\4\1\3\1\4\2\3\4\42"+
    "\1\u0147\25\42\2\3\1\113\63\3\1\u0148\55\3\1\u0149"+
    "\40\3\4\4\4\3\7\4\3\42\2\4\1\3\1\4"+
    "\2\3\23\42\1\u014a\6\42\2\3\1\113\63\3\1\u014b"+
    "\21\3\4\4\4\3\7\4\3\42\2\4\1\3\1\4"+
    "\2\3\23\42\1\u014c\6\42\2\3\1\113\10\3\4\4"+
    "\4\3\7\4\3\42\2\4\1\3\1\4\2\3\10\42"+
    "\1\u014d\6\42\1\u014e\12\42\2\3\1\113\3\3\1\u014f"+
    "\4\3\4\4\4\3\7\4\3\42\2\4\1\3\1\4"+
    "\2\3\4\42\1\u0150\25\42\2\3\1\113\44\3\1\u0151"+
    "\40\3\4\4\4\3\7\4\3\42\2\4\1\3\1\4"+
    "\2\3\21\42\1\u0152\10\42\2\3\1\113\10\3\4\4"+
    "\4\3\7\4\3\42\2\4\1\3\1\4\2\3\4\42"+
    "\1\u0153\25\42\2\3\1\113\10\3\4\4\4\3\7\4"+
    "\3\42\2\4\1\3\1\4\2\3\30\42\1\u0154\1\42"+
    "\2\3\1\113\10\3\4\4\4\3\7\4\3\42\2\4"+
    "\1\3\1\4\2\3\1\42\1\u0155\30\42\2\3\1\u0156"+
    "\10\3\4\4\4\3\7\4\3\42\2\4\1\3\1\4"+
    "\2\3\25\42\1\u0157\4\42\2\3\1\113\65\3\1\u0158"+
    "\17\3\4\4\4\3\7\4\3\42\2\4\1\3\1\4"+
    "\2\3\13\42\1\u0159\16\42\2\3\1\113\27\3\3\113"+
    "\6\3\13\113\1\u015a\16\113\2\3\1\113\10\3\4\4"+
    "\4\3\7\4\3\42\2\4\1\3\1\4\2\3\17\42"+
    "\1\u015b\12\42\2\3\1\113\10\3\4\4\4\3\7\4"+
    "\3\42\2\4\1\3\1\4\2\3\10\42\1\u015c\21\42"+
    "\2\3\1\113\3\3\1\u015d\4\3\4\4\4\3\7\4"+
    "\3\42\2\4\1\3\1\4\2\3\10\42\1\u015e\21\42"+
    "\2\3\1\113\3\3\1\u015f\4\3\4\4\4\3\7\4"+
    "\3\42\2\4\1\3\1\4\2\3\4\42\1\u0160\25\42"+
    "\2\3\1\113\10\3\4\4\4\3\7\4\3\42\2\4"+
    "\1\3\1\4\2\3\4\42\1\u0161\25\42\2\3\1\113"+
    "\10\3\4\4\4\3\7\4\3\42\2\4\1\3\1\4"+
    "\2\3\7\42\1\u0162\22\42\2\3\1\113\10\3\4\4"+
    "\4\3\7\4\3\42\2\4\1\3\1\4\2\3\22\42"+
    "\1\u0163\7\42\2\3\1\113\4\3\1\u0164\42\3\1\u0165"+
    "\35\3\4\4\4\3\7\4\3\42\2\4\1\3\1\4"+
    "\2\3\22\42\1\u0166\7\42\2\3\1\113\4\3\1\u0167"+
    "\3\3\4\4\4\3\7\4\3\42\2\4\1\3\1\4"+
    "\2\3\25\42\1\u0168\4\42\2\3\1\113\10\3\4\4"+
    "\4\3\7\4\3\42\2\4\1\3\1\4\2\3\10\42"+
    "\1\u0169\21\42\2\3\1\113\3\3\1\u016a\61\3\1\u016b"+
    "\17\3\4\4\4\3\7\4\3\42\2\4\1\3\1\4"+
    "\2\3\13\42\1\u016c\16\42\2\3\1\113\10\3\4\4"+
    "\4\3\7\4\3\42\2\4\1\3\1\4\2\3\23\42"+
    "\1\u016d\6\42\2\3\1\113\10\3\4\4\4\3\7\4"+
    "\3\42\2\4\1\3\1\4\2\3\15\42\1\u016e\14\42"+
    "\2\3\1\113\10\3\4\4\4\3\7\4\3\42\2\4"+
    "\1\3\1\4\2\3\4\42\1\u016f\25\42\2\3\1\113"+
    "\10\3\4\4\4\3\7\4\3\42\2\4\1\3\1\4"+
    "\2\3\4\42\1\u0170\25\42\2\3\1\113\10\3\4\4"+
    "\4\3\7\4\3\42\2\4\1\3\1\4\2\3\3\42"+
    "\1\u0171\26\42\2\3\1\113\10\3\4\4\4\3\7\4"+
    "\3\42\2\4\1\3\1\4\2\3\13\42\1\u0172\7\42"+
    "\1\u0173\6\42\2\3\1\113\53\3\1\u0174\7\3\1\u0175"+
    "\21\3\4\4\4\3\7\4\3\42\2\4\1\3\1\4"+
    "\2\3\23\42\1\u0176\6\42\2\3\1\113\63\3\1\u0177"+
    "\21\3\4\4\4\3\7\4\3\42\2\4\1\3\1\4"+
    "\2\3\13\42\1\u0178\16\42\2\3\1\113\44\3\1\u0179"+
    "\112\3\1\u0167\16\3\1\u0167\43\3\1\u016a\27\3\1\u016a"+
    "\4\3\4\4\4\3\7\4\3\u017a\2\4\1\3\1\4"+
    "\2\3\32\4\13\3\4\4\4\3\5\4\1\213\1\4"+
    "\3\u017b\2\4\1\3\1\4\2\3\32\4\13\3\4\4"+
    "\4\3\7\4\3\u017c\2\4\1\3\1\4\2\3\32\4"+
    "\13\3\4\4\4\3\7\4\3\u017d\2\4\1\3\1\4"+
    "\2\3\17\4\1\101\12\4\32\3\3\u017e\6\3\6\u017e"+
    "\105\3\1\u017f\2\3\1\u0180\2\3\1\u0181\52\3\1\u0182"+
    "\102\3\1\u0183\27\3\1\u0183\24\3\1\u0184\13\3\1\u0185"+
    "\104\3\1\u0186\1\u0187\67\3\1\u0188\27\3\1\u0188\53\3"+
    "\1\u0189\57\3\1\u018a\1\3\1\u018b\12\3\1\u018c\61\3"+
    "\1\u018d\3\3\1\u018e\27\3\1\u018e\3\3\3\u0103\1\3"+
    "\11\u0103\1\u018f\56\u0103\33\3\1\u0190\43\3\4\4\4\3"+
    "\7\4\3\42\2\4\1\3\1\4\2\3\23\42\1\u0191"+
    "\6\42\2\3\1\113\10\3\4\4\4\3\7\4\3\42"+
    "\2\4\1\3\1\4\2\3\13\42\1\u0192\16\42\2\3"+
    "\1\113\53\3\1\u0193\31\3\4\4\4\3\7\4\3\42"+
    "\2\4\1\3\1\4\2\3\6\42\1\u0194\23\42\2\3"+
    "\1\113\46\3\1\u0195\36\3\4\4\4\3\7\4\3\42"+
    "\2\4\1\3\1\4\2\3\12\42\1\u0196\17\42\2\3"+
    "\1\113\5\3\1\u0197\2\3\4\4\4\3\7\4\3\42"+
    "\2\4\1\3\1\4\2\3\4\42\1\u0198\25\42\2\3"+
    "\1\113\10\3\4\4\4\3\7\4\3\42\2\4\1\3"+
    "\1\4\2\3\2\42\1\u0199\27\42\2\3\1\113\10\3"+
    "\4\4\4\3\7\4\3\42\2\4\1\3\1\4\2\3"+
    "\4\42\1\u019a\25\42\2\3\1\113\10\3\4\4\4\3"+
    "\7\4\3\42\2\4\1\3\1\4\2\3\12\42\1\u019b"+
    "\17\42\2\3\1\113\5\3\1\u019c\2\3\4\4\4\3"+
    "\7\4\3\42\2\4\1\3\1\4\2\3\22\42\1\u019d"+
    "\7\42\2\3\1\113\4\3\1\u019e\55\3\1\u019e\16\3"+
    "\1\u019e\3\3\4\4\4\3\7\4\3\42\2\4\1\3"+
    "\1\4\2\3\21\42\1\u019f\10\42\2\3\1\113\10\3"+
    "\4\4\4\3\7\4\3\42\2\4\1\3\1\4\2\3"+
    "\14\42\1\u01a0\15\42\2\3\1\113\10\3\4\4\4\3"+
    "\7\4\3\42\2\4\1\3\1\4\2\3\10\42\1\u01a1"+
    "\21\42\2\3\1\113\3\3\1\u01a2\23\3\3\113\6\3"+
    "\3\113\1\u01a3\26\113\2\3\1\113\27\3\3\113\6\3"+
    "\23\113\1\u01a4\6\113\2\3\1\113\27\3\3\113\6\3"+
    "\25\113\1\u01a5\4\113\2\3\1\113\65\3\1\u01a6\36\3"+
    "\3\113\6\3\1\u01a7\31\113\2\3\1\113\27\3\3\113"+
    "\6\3\6\113\1\u01a8\23\113\2\3\1\113\27\3\3\113"+
    "\6\3\17\113\1\u01a9\12\113\2\3\1\113\27\3\3\113"+
    "\6\3\15\113\1\u01aa\14\113\2\3\1\113\55\3\1\u01ab"+
    "\46\3\3\113\6\3\23\113\1\u01ac\6\113\2\3\1\113"+
    "\27\3\3\113\6\3\21\113\1\u01ad\10\113\2\3\1\113"+
    "\27\3\3\113\6\3\13\113\1\u01ae\16\113\2\3\1\113"+
    "\27\3\3\113\6\3\1\u01af\31\113\2\3\1\113\27\3"+
    "\3\113\6\3\27\113\1\u01b0\2\113\2\3\1\113\27\3"+
    "\3\113\6\3\23\113\1\u01b1\6\113\2\3\1\113\63\3"+
    "\1\u01b2\57\3\1\u01b3\105\3\1\u01b4\76\3\1\u01b5\66\3"+
    "\1\u01b6\61\3\1\u01b7\44\3\4\4\4\3\7\4\3\42"+
    "\2\4\1\3\1\4\2\3\14\42\1\u01b8\15\42\2\3"+
    "\1\113\54\3\1\u01b9\30\3\4\4\4\3\7\4\3\42"+
    "\2\4\1\3\1\4\2\3\4\42\1\u01ba\25\42\2\3"+
    "\1\113\44\3\1\u01bb\40\3\4\4\4\3\4\4\1\u01bc"+
    "\2\4\3\42\2\4\1\3\1\4\2\3\32\42\2\3"+
    "\1\113\10\3\4\4\4\3\7\4\3\42\2\4\1\3"+
    "\1\4\2\3\22\42\1\u01bd\7\42\2\3\1\113\4\3"+
    "\1\u01be\3\3\4\4\4\3\7\4\3\42\2\4\1\3"+
    "\1\4\2\3\10\42\1\u01bf\21\42\2\3\1\113\3\3"+
    "\1\u01c0\4\3\4\4\4\3\7\4\3\42\2\4\1\3"+
    "\1\4\2\3\25\42\1\u01c1\4\42\2\3\1\113\10\3"+
    "\4\4\4\3\7\4\3\42\2\4\1\3\1\4\2\3"+
    "\15\42\1\u01c2\14\42\2\3\1\113\10\3\4\4\4\3"+
    "\7\4\3\42\2\4\1\3\1\4\2\3\7\42\1\u01c3"+
    "\22\42\2\3\1\113\47\3\1\u01c4\35\3\4\4\4\3"+
    "\7\4\3\42\2\4\1\3\1\4\2\3\10\42\1\u01c5"+
    "\21\42\2\3\1\113\3\3\1\u01c6\4\3\4\4\4\3"+
    "\7\4\3\42\2\4\1\3\1\4\2\3\21\42\1\u01c7"+
    "\10\42\2\3\1\113\10\3\4\4\4\3\7\4\3\42"+
    "\2\4\1\3\1\4\2\3\6\42\1\u01c8\23\42\2\3"+
    "\1\113\61\3\1\u01c9\23\3\4\4\4\3\7\4\3\42"+
    "\2\4\1\3\1\4\2\3\10\42\1\u01ca\21\42\2\3"+
    "\1\113\3\3\1\u01cb\44\3\1\u01cb\27\3\1\u01cb\4\3"+
    "\4\4\4\3\7\4\3\42\2\4\1\3\1\4\2\3"+
    "\14\42\1\u01cc\15\42\2\3\1\113\10\3\4\4\4\3"+
    "\7\4\3\42\2\4\1\3\1\4\2\3\1\u01cd\31\42"+
    "\2\3\1\113\54\3\1\u01ce\30\3\4\4\4\3\7\4"+
    "\3\42\2\4\1\3\1\4\2\3\16\42\1\u01cf\13\42"+
    "\2\3\1\113\10\3\4\4\4\3\7\4\3\42\2\4"+
    "\1\3\1\4\2\3\4\42\1\u01d0\25\42\2\3\1\113"+
    "\27\3\3\113\6\3\1\u01d1\31\113\2\3\1\113\10\3"+
    "\4\4\4\3\7\4\3\42\2\4\1\3\1\4\2\3"+
    "\4\42\1\u01d2\25\42\2\3\1\113\44\3\1\u01d3\40\3"+
    "\4\4\4\3\7\4\3\42\2\4\1\3\1\4\2\3"+
    "\10\42\1\u01d4\21\42\2\3\1\113\3\3\1\u01d5\23\3"+
    "\3\113\6\3\16\113\1\u01d6\13\113\2\3\1\113\10\3"+
    "\4\4\4\3\7\4\3\42\2\4\1\3\1\4\2\3"+
    "\13\42\1\u01d7\16\42\2\3\1\113\10\3\4\4\4\3"+
    "\7\4\3\42\2\4\1\3\1\4\2\3\16\42\1\u01d8"+
    "\13\42\2\3\1\113\56\3\1\u01d9\26\3\4\4\4\3"+
    "\7\4\3\42\2\4\1\3\1\4\2\3\21\42\1\u01da"+
    "\10\42\2\3\1\113\61\3\1\u01db\23\3\4\4\4\3"+
    "\7\4\3\42\2\4\1\3\1\4\2\3\1\u01dc\31\42"+
    "\2\3\1\113\10\3\4\4\4\3\7\4\3\42\2\4"+
    "\1\3\1\4\2\3\21\42\1\u01dd\10\42\2\3\1\113"+
    "\10\3\4\4\4\3\7\4\3\42\2\4\1\3\1\4"+
    "\2\3\23\42\1\u01de\6\42\2\3\1\113\63\3\1\u01df"+
    "\21\3\4\4\4\3\4\4\1\u01e0\2\4\3\42\2\4"+
    "\1\3\1\4\2\3\32\42\2\3\1\113\24\3\1\u01e1"+
    "\60\3\4\4\4\3\7\4\3\42\2\4\1\3\1\4"+
    "\2\3\4\42\1\u01e2\25\42\2\3\1\113\10\3\4\4"+
    "\4\3\7\4\3\42\2\4\1\3\1\4\2\3\15\42"+
    "\1\u01e3\14\42\2\3\1\113\55\3\1\u01e4\63\3\1\u01e5"+
    "\40\3\4\4\4\3\4\4\1\u01e6\2\4\3\42\2\4"+
    "\1\3\1\4\2\3\32\42\2\3\1\113\10\3\4\4"+
    "\4\3\7\4\3\42\2\4\1\3\1\4\2\3\26\42"+
    "\1\u01e7\3\42\2\3\1\113\10\3\4\4\4\3\7\4"+
    "\3\42\2\4\1\3\1\4\2\3\1\u01e8\31\42\2\3"+
    "\1\113\10\3\4\4\4\3\7\4\3\42\2\4\1\3"+
    "\1\4\2\3\4\42\1\u01e9\25\42\2\3\1\113\10\3"+
    "\4\4\4\3\7\4\3\42\2\4\1\3\1\4\2\3"+
    "\4\42\1\u01ea\25\42\2\3\1\113\44\3\1\u01eb\74\3"+
    "\1\u01ec\40\3\4\4\4\3\7\4\3\42\2\4\1\3"+
    "\1\4\2\3\7\42\1\u01ed\22\42\2\3\1\113\47\3"+
    "\1\u01ee\35\3\4\4\4\3\7\4\3\42\2\4\1\3"+
    "\1\4\2\3\16\42\1\u01ef\13\42\2\3\1\113\46\3"+
    "\1\u01f0\36\3\4\4\4\3\7\4\3\u01f1\2\4\1\3"+
    "\1\4\2\3\32\4\13\3\4\4\4\3\5\4\1\213"+
    "\1\4\3\u01f2\2\4\1\3\1\4\2\3\32\4\13\3"+
    "\4\4\4\3\7\4\3\u01f3\2\4\1\3\1\4\2\3"+
    "\32\4\32\3\3\u01f4\6\3\6\u01f4\72\3\1\u01f5\114\3"+
    "\1\u01f6\76\3\1\u01f7\47\3\1\u01f8\102\3\1\u01f9\105\3"+
    "\1\u01fa\72\3\1\u01fb\102\3\1\u01fc\72\3\1\u01fd\66\3"+
    "\1\u01fe\61\3\1\u01ff\123\3\1\u0200\70\3\1\u0201\20\3"+
    "\3\u0103\1\3\11\u0103\1\u0202\56\u0103\32\3\1\u0203\44\3"+
    "\4\4\4\3\7\4\3\42\2\4\1\3\1\4\2\3"+
    "\32\42\2\3\1\u0204\10\3\4\4\4\3\7\4\3\42"+
    "\2\4\1\3\1\4\2\3\21\42\1\u0205\10\42\2\3"+
    "\1\113\61\3\1\u0206\23\3\4\4\4\3\7\4\3\42"+
    "\2\4\1\3\1\4\2\3\1\u0207\31\42\2\3\1\113"+
    "\10\3\4\4\4\3\7\4\3\42\2\4\1\3\1\4"+
    "\2\3\23\42\1\u0208\6\42\2\3\1\113\10\3\4\4"+
    "\4\3\7\4\3\42\2\4\1\3\1\4\2\3\21\42"+
    "\1\u0209\10\42\2\3\1\113\10\3\4\4\4\3\7\4"+
    "\3\42\2\4\1\3\1\4\2\3\1\42\1\u020a\30\42"+
    "\2\3\1\113\41\3\1\u020b\43\3\4\4\4\3\7\4"+
    "\3\42\2\4\1\3\1\4\2\3\15\42\1\u020c\14\42"+
    "\2\3\1\113\10\3\4\4\4\3\7\4\3\42\2\4"+
    "\1\3\1\4\2\3\4\42\1\u020d\25\42\2\3\1\113"+
    "\44\3\1\u020e\57\3\3\113\6\3\30\113\1\u020f\1\113"+
    "\2\3\1\113\27\3\3\113\6\3\23\113\1\u0210\6\113"+
    "\2\3\1\113\27\3\3\113\6\3\3\113\1\u0211\26\113"+
    "\2\3\1\113\27\3\3\113\6\3\24\113\1\u0212\5\113"+
    "\2\3\1\113\27\3\3\113\6\3\12\113\1\u0213\17\113"+
    "\2\3\1\113\5\3\1\u0214\44\3\1\u0214\27\3\1\u0214"+
    "\21\3\3\113\6\3\10\113\1\u0215\21\113\2\3\1\113"+
    "\3\3\1\u0216\23\3\3\113\6\3\10\113\1\u0217\21\113"+
    "\2\3\1\113\3\3\1\u0218\23\3\3\113\6\3\4\113"+
    "\1\u0219\25\113\2\3\1\113\27\3\3\113\6\3\14\113"+
    "\1\u021a\15\113\2\3\1\113\27\3\3\113\6\3\23\113"+
    "\1\u021b\6\113\2\3\1\113\27\3\3\113\6\3\13\113"+
    "\1\u021c\16\113\2\3\1\113\53\3\1\u021d\105\3\1\u021e"+
    "\60\3\1\u0218\27\3\1\u0218\40\3\1\u021f\104\3\1\u0220"+
    "\30\3\4\4\4\3\7\4\3\42\2\4\1\3\1\4"+
    "\2\3\1\u0221\31\42\2\3\1\113\40\3\1\u0222\44\3"+
    "\4\4\4\3\14\4\1\3\1\4\2\3\5\4\1\u0223"+
    "\14\4\1\u0224\7\4\7\3\1\u0225\3\3\4\4\4\3"+
    "\7\4\3\42\2\4\1\3\1\4\2\3\10\42\1\u0226"+
    "\21\42\2\3\1\113\3\3\1\u0227\44\3\1\u0227\27\3"+
    "\1\u0227\4\3\4\4\4\3\7\4\3\42\2\4\1\3"+
    "\1\4\2\3\16\42\1\u0228\13\42\2\3\1\113\56\3"+
    "\1\u0229\26\3\4\4\4\3\7\4\3\42\2\4\1\3"+
    "\1\4\2\3\1\u022a\31\42\2\3\1\113\10\3\4\4"+
    "\4\3\7\4\3\42\2\4\1\3\1\4\2\3\23\42"+
    "\1\u022b\6\42\2\3\1\113\63\3\1\u022c\21\3\4\4"+
    "\4\3\7\4\3\42\2\4\1\3\1\4\2\3\13\42"+
    "\1\u022d\16\42\2\3\1\113\53\3\1\u022e\31\3\4\4"+
    "\4\3\7\4\3\42\2\4\1\3\1\4\2\3\23\42"+
    "\1\u022f\6\42\2\3\1\113\10\3\4\4\4\3\7\4"+
    "\3\42\2\4\1\3\1\4\2\3\4\42\1\u0230\25\42"+
    "\2\3\1\113\63\3\1\u0231\21\3\4\4\4\3\7\4"+
    "\3\42\2\4\1\3\1\4\2\3\5\42\1\u0232\24\42"+
    "\2\3\1\113\45\3\1\u0233\37\3\4\4\4\3\7\4"+
    "\3\42\2\4\1\3\1\4\2\3\17\42\1\u0234\12\42"+
    "\2\3\1\113\10\3\4\4\4\3\7\4\3\42\2\4"+
    "\1\3\1\4\2\3\21\42\1\u0235\10\42\2\3\1\113"+
    "\57\3\1\u0236\25\3\4\4\4\3\7\4\3\42\2\4"+
    "\1\3\1\4\2\3\15\42\1\u0237\14\42\2\3\1\113"+
    "\10\3\4\4\4\3\7\4\3\42\2\4\1\3\1\4"+
    "\2\3\21\42\1\u0238\10\42\2\3\1\113\27\3\3\113"+
    "\6\3\13\113\1\u0239\16\113\2\3\1\113\10\3\4\4"+
    "\4\3\7\4\3\42\2\4\1\3\1\4\2\3\2\42"+
    "\1\u023a\27\42\2\3\1\113\42\3\1\u023b\61\3\3\113"+
    "\6\3\1\u023c\31\113\2\3\1\113\10\3\4\4\4\3"+
    "\7\4\3\42\2\4\1\3\1\4\2\3\4\42\1\u023d"+
    "\25\42\2\3\1\113\10\3\4\4\4\3\7\4\3\42"+
    "\2\4\1\3\1\4\2\3\4\42\1\u023e\25\42\2\3"+
    "\1\113\44\3\1\u023f\40\3\4\4\4\3\7\4\3\42"+
    "\2\4\1\3\1\4\2\3\23\42\1\u0240\6\42\2\3"+
    "\1\113\10\3\4\4\4\3\7\4\3\42\2\4\1\3"+
    "\1\4\2\3\22\42\1\u0241\7\42\2\3\1\113\4\3"+
    "\1\u0242\3\3\4\4\4\3\14\4\1\3\1\4\2\3"+
    "\22\4\1\u0243\7\4\7\3\1\u0244\55\3\1\u0244\16\3"+
    "\1\u0244\3\3\4\4\4\3\7\4\3\42\2\4\1\3"+
    "\1\4\2\3\21\42\1\u0245\10\42\2\3\1\113\10\3"+
    "\4\4\4\3\7\4\3\42\2\4\1\3\1\4\2\3"+
    "\6\42\1\u0246\23\42\2\3\1\113\46\3\1\u0247\107\3"+
    "\1\u0248\23\3\4\4\4\3\14\4\1\3\1\4\2\3"+
    "\1\u0249\31\4\13\3\4\4\4\3\7\4\3\42\2\4"+
    "\1\3\1\4\2\3\7\42\1\u024a\22\42\2\3\1\113"+
    "\10\3\4\4\4\3\7\4\3\42\2\4\1\3\1\4"+
    "\2\3\15\42\1\u024b\14\42\2\3\1\113\10\3\4\4"+
    "\4\3\7\4\3\42\2\4\1\3\1\4\2\3\26\42"+
    "\1\u024c\3\42\2\3\1\113\44\3\1\u024d\40\3\4\4"+
    "\4\3\5\4\1\213\1\4\3\u024e\2\4\1\3\1\4"+
    "\2\3\32\4\13\3\4\4\4\3\7\4\3\u024f\2\4"+
    "\1\3\1\4\2\3\32\4\32\3\3\u0250\6\3\6\u0250"+
    "\117\3\1\u0251\67\3\1\u0252\54\3\1\u0253\115\3\1\u0254"+
    "\62\3\1\u0255\27\3\1\u0255\42\3\1\u0256\27\3\1\u0256"+
    "\44\3\1\u0257\27\3\1\u0257\40\3\1\u0258\104\3\1\u0259"+
    "\103\3\1\u025a\64\3\1\u025b\30\3\3\u0103\1\3\11\u0103"+
    "\1\u0202\11\u0103\1\u025c\44\u0103\45\3\1\u025d\50\3\3\113"+
    "\6\3\10\113\1\u025e\21\113\2\3\1\113\3\3\1\u025f"+
    "\4\3\4\4\4\3\7\4\3\42\2\4\1\3\1\4"+
    "\2\3\16\42\1\u0260\13\42\2\3\1\113\56\3\1\u0261"+
    "\26\3\4\4\4\3\7\4\3\42\2\4\1\3\1\4"+
    "\2\3\15\42\1\u0262\14\42\2\3\1\113\10\3\4\4"+
    "\4\3\7\4\3\42\2\4\1\3\1\4\2\3\4\42"+
    "\1\u0263\25\42\2\3\1\113\10\3\4\4\4\3\7\4"+
    "\3\42\2\4\1\3\1\4\2\3\16\42\1\u0264\13\42"+
    "\2\3\1\113\56\3\1\u0265\26\3\4\4\4\3\7\4"+
    "\3\42\2\4\1\3\1\4\2\3\21\42\1\u0266\10\42"+
    "\2\3\1\113\61\3\1\u0267\42\3\3\113\6\3\16\113"+
    "\1\u0268\13\113\2\3\1\113\27\3\3\113\6\3\23\113"+
    "\1\u0269\6\113\2\3\1\113\27\3\3\113\6\3\16\113"+
    "\1\u026a\13\113\2\3\1\113\56\3\1\u026b\45\3\3\113"+
    "\6\3\17\113\1\u026c\12\113\2\3\1\113\57\3\1\u026d"+
    "\44\3\3\113\6\3\2\113\1\u026e\27\113\2\3\1\113"+
    "\27\3\3\113\6\3\1\u026f\31\113\2\3\1\113\27\3"+
    "\3\113\6\3\4\113\1\u0270\25\113\2\3\1\113\44\3"+
    "\1\u0271\113\3\1\u0272\53\3\1\u0273\42\3\4\4\4\3"+
    "\7\4\3\42\2\4\1\3\1\4\2\3\13\42\1\u0274"+
    "\16\42\2\3\1\113\53\3\1\u0275\31\3\4\4\4\3"+
    "\14\4\1\3\1\4\2\3\1\u0276\31\4\13\3\4\4"+
    "\4\3\14\4\1\3\1\4\2\3\10\4\1\u0277\21\4"+
    "\6\3\1\u0278\44\3\1\u0278\27\3\1\u0278\4\3\4\4"+
    "\4\3\7\4\3\42\2\4\1\3\1\4\2\3\1\u0279"+
    "\31\42\2\3\1\113\40\3\1\u027a\44\3\4\4\4\3"+
    "\7\4\3\42\2\4\1\3\1\4\2\3\15\42\1\u027b"+
    "\14\42\2\3\1\113\55\3\1\u027c\27\3\4\4\4\3"+
    "\7\4\3\42\2\4\1\3\1\4\2\3\21\42\1\u027d"+
    "\10\42\2\3\1\113\10\3\4\4\4\3\7\4\3\42"+
    "\2\4\1\3\1\4\2\3\30\42\1\u027e\1\42\2\3"+
    "\1\113\70\3\1\u027f\14\3\4\4\4\3\7\4\3\42"+
    "\2\4\1\3\1\4\2\3\1\u0280\31\42\2\3\1\113"+
    "\10\3\4\4\4\3\7\4\3\42\2\4\1\3\1\4"+
    "\2\3\32\42\2\3\1\u0281\40\3\1\u0282\63\3\3\113"+
    "\6\3\4\113\1\u0283\25\113\2\3\1\113\10\3\4\4"+
    "\4\3\7\4\3\42\2\4\1\3\1\4\2\3\12\42"+
    "\1\u0284\17\42\2\3\1\113\5\3\1\u0285\44\3\1\u0285"+
    "\27\3\1\u0285\21\3\3\113\6\3\3\113\1\u0286\26\113"+
    "\2\3\1\113\10\3\4\4\4\3\7\4\3\42\2\4"+
    "\1\3\1\4\2\3\2\42\1\u0287\27\42\2\3\1\113"+
    "\42\3\1\u0288\42\3\4\4\4\3\7\4\3\42\2\4"+
    "\1\3\1\4\2\3\4\42\1\u0289\25\42\2\3\1\113"+
    "\44\3\1\u028a\40\3\4\4\4\3\14\4\1\3\1\4"+
    "\2\3\4\4\1\u028b\25\4\47\3\1\u028c\40\3\4\4"+
    "\4\3\14\4\1\3\1\4\2\3\13\4\1\u028d\16\4"+
    "\13\3\4\4\4\3\7\4\3\42\2\4\1\3\1\4"+
    "\2\3\10\42\1\u028e\21\42\2\3\1\113\3\3\1\u028f"+
    "\4\3\4\4\4\3\7\4\3\42\2\4\1\3\1\4"+
    "\2\3\1\u0290\31\42\2\3\1\113\61\3\1\u0291\42\3"+
    "\3\u0292\6\3\6\u0292\105\3\1\u0293\101\3\1\u0294\67\3"+
    "\1\u0295\75\3\1\u0296\57\3\1\u0297\72\3\1\u0298\100\3"+
    "\1\u0299\57\3\3\113\6\3\15\113\1\u029a\14\113\2\3"+
    "\1\113\55\3\1\u029b\27\3\4\4\4\3\7\4\3\42"+
    "\2\4\1\3\1\4\2\3\24\42\1\u029c\5\42\2\3"+
    "\1\113\64\3\1\u029d\20\3\4\4\4\3\7\4\3\42"+
    "\2\4\1\3\1\4\2\3\21\42\1\u029e\10\42\2\3"+
    "\1\113\10\3\4\4\4\3\7\4\3\42\2\4\1\3"+
    "\1\4\2\3\27\42\1\u029f\2\42\2\3\1\113\67\3"+
    "\1\u02a0\34\3\3\113\6\3\15\113\1\u02a1\14\113\2\3"+
    "\1\113\27\3\3\113\6\3\15\113\1\u02a2\14\113\2\3"+
    "\1\113\55\3\1\u02a3\46\3\3\113\6\3\23\113\1\u02a4"+
    "\6\113\2\3\1\113\63\3\1\u02a5\40\3\3\113\6\3"+
    "\23\113\1\u02a6\6\113\2\3\1\113\27\3\3\113\6\3"+
    "\21\113\1\u02a7\10\113\2\3\1\113\63\3\1\u02a8\21\3"+
    "\4\4\4\3\14\4\1\3\1\4\2\3\14\4\1\u02a9"+
    "\15\4\13\3\4\4\4\3\14\4\1\3\1\4\2\3"+
    "\31\4\1\u02aa\74\3\1\u02ab\13\3\4\4\4\3\7\4"+
    "\3\42\2\4\1\3\1\4\2\3\32\42\2\3\1\u02ac"+
    "\74\3\1\u02ad\10\3\4\4\4\3\7\4\3\42\2\4"+
    "\1\3\1\4\2\3\21\42\1\u02ae\10\42\2\3\1\113"+
    "\27\3\3\113\6\3\15\113\1\u02af\14\113\2\3\1\113"+
    "\61\3\1\u02b0\42\3\3\113\6\3\1\u02b1\31\113\2\3"+
    "\1\113\20\3\1\u02b2\6\3\3\113\6\3\32\113\2\3"+
    "\1\113\10\3\4\4\4\3\7\4\3\42\2\4\1\3"+
    "\1\4\2\3\23\42\1\u02b3\6\42\2\3\1\113\63\3"+
    "\1\u02b4\21\3\4\4\4\3\14\4\1\3\1\4\2\3"+
    "\21\4\1\u02b5\10\4\64\3\1\u02b6\23\3\4\4\4\3"+
    "\14\4\1\3\1\4\2\3\10\4\1\u02b7\21\4\6\3"+
    "\1\u02b8\4\3\4\4\4\3\7\4\3\42\2\4\1\3"+
    "\1\4\2\3\13\42\1\u02b9\16\42\2\3\1\113\53\3"+
    "\1\u02ba\50\3\3\u02bb\6\3\6\u02bb\104\3\1\u02bc\74\3"+
    "\1\u02bd\102\3\1\u02be\74\3\1\u02bf\72\3\1\u02c0\42\3"+
    "\3\113\6\3\5\113\1\u02c1\24\113\2\3\1\113\45\3"+
    "\1\u02c2\37\3\4\4\4\3\7\4\3\42\2\4\1\3"+
    "\1\4\2\3\15\42\1\u02c3\14\42\2\3\1\113\55\3"+
    "\1\u02c4\27\3\4\4\4\3\7\4\3\42\2\4\1\3"+
    "\1\4\2\3\32\42\2\3\1\u02c5\27\3\3\113\6\3"+
    "\10\113\1\u02c6\21\113\2\3\1\113\3\3\1\u02c7\44\3"+
    "\1\u02c7\27\3\1\u02c7\23\3\3\113\6\3\4\113\1\u02c8"+
    "\25\113\2\3\1\113\10\3\4\4\4\3\14\4\1\3"+
    "\1\4\2\3\10\4\1\u02c9\21\4\6\3\1\u02ca\4\3"+
    "\4\4\4\3\14\4\1\3\1\4\2\3\4\4\1\u02cb"+
    "\25\4\47\3\1\u02cc\50\3\1\u02cd\6\3\3\u02ac\6\3"+
    "\32\u02ac\2\3\1\113\20\3\1\u02cd\6\3\3\u02ad\6\3"+
    "\32\u02ad\13\3\4\4\4\3\7\4\3\42\2\4\1\3"+
    "\1\4\2\3\32\42\2\3\1\u02ce\27\3\3\113\6\3"+
    "\24\113\1\u02cf\5\113\2\3\1\113\74\3\1\u02d0\27\3"+
    "\3\113\6\3\23\113\1\u02d1\6\113\2\3\1\113\21\3"+
    "\1\u02d2\63\3\4\4\4\3\14\4\1\3\1\4\2\3"+
    "\10\4\1\u02d3\21\4\6\3\1\u02d4\44\3\1\u02d4\27\3"+
    "\1\u02d4\4\3\4\4\4\3\14\4\1\3\1\4\2\3"+
    "\6\4\1\u02d5\23\4\51\3\1\u02d6\36\3\4\4\4\3"+
    "\7\4\3\42\2\4\1\3\1\4\2\3\4\42\1\u02d7"+
    "\25\42\2\3\1\113\44\3\1\u02d8\100\3\1\u02d9\27\3"+
    "\1\u02d9\40\3\1\u02da\57\3\3\113\6\3\16\113\1\u02db"+
    "\13\113\2\3\1\113\56\3\1\u02dc\26\3\4\4\4\3"+
    "\7\4\3\42\2\4\1\3\1\4\2\3\3\42\1\u02dd"+
    "\26\42\2\3\1\113\43\3\1\u02de\60\3\3\113\6\3"+
    "\1\u02df\31\113\2\3\1\113\27\3\3\113\6\3\15\113"+
    "\1\u02e0\14\113\2\3\1\113\55\3\1\u02e1\46\3\3\113"+
    "\6\3\1\u02e2\31\113\2\3\1\113\10\3\4\4\4\3"+
    "\14\4\1\3\1\4\2\3\13\4\1\u02e3\16\4\56\3"+
    "\1\u02e4\42\3\1\u02e5\102\3\3\113\6\3\15\113\1\u02e6"+
    "\14\113\2\3\1\113\27\3\3\113\6\3\14\113\1\u02e7"+
    "\15\113\2\3\1\113\55\3\1\u02e8\46\3\3\113\6\3"+
    "\16\113\1\u02e9\13\113\2\3\1\113\10\3\4\4\4\3"+
    "\14\4\1\3\1\4\2\3\5\4\1\u02ea\24\4\50\3"+
    "\1\u02eb\37\3\4\4\4\3\14\4\1\3\1\4\2\3"+
    "\15\4\1\u02ec\14\4\60\3\1\u02ed\74\3\1\u02ee\57\3"+
    "\1\u02ef\63\3\3\113\6\3\13\113\1\u02f0\16\113\2\3"+
    "\1\113\27\3\3\113\6\3\6\113\1\u02f1\23\113\2\3"+
    "\1\113\46\3\1\u02f2\36\3\4\4\4\3\14\4\1\3"+
    "\1\4\2\3\30\4\1\u02f3\1\4\73\3\1\u02f4\33\3"+
    "\3\113\6\3\24\113\1\u02f5\5\113\2\3\1\113\64\3"+
    "\1\u02f6\37\3\3\113\6\3\21\113\1\u02f7\10\113\2\3"+
    "\1\113\46\3\1\u02f8\55\3\3\113\6\3\4\113\1\u02f9"+
    "\25\113\2\3\1\113\27\3\3\113\6\3\14\113\1\u02fa"+
    "\15\113\2\3\1\113\54\3\1\u02fb\47\3\3\113\6\3"+
    "\10\113\1\u02fc\21\113\2\3\1\113\3\3\1\u02fd\23\3"+
    "\3\113\6\3\1\u02fe\31\113\2\3\1\113\27\3\3\113"+
    "\6\3\16\113\1\u02ff\13\113\2\3\1\113\56\3\1\u0300"+
    "\45\3\3\113\6\3\23\113\1\u0301\6\113\2\3\1\113"+
    "\27\3\3\113\6\3\16\113\1\u0302\13\113\2\3\1\113"+
    "\27\3\3\113\6\3\21\113\1\u0303\10\113\2\3\1\113"+
    "\27\3\3\113\6\3\10\113\1\u0304\21\113\2\3\1\113"+
    "\3\3\1\u0305\23\3\3\113\6\3\16\113\1\u0306\13\113"+
    "\2\3\1\113\56\3\1\u0307\25\3";

  private static int [] zzUnpacktrans() {
    int [] result = new int[35685];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\u0305\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[775];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
     int longitudToken=0;

  /* Declaración de tokens que serán reconocidos por el analizador sintáctico */
  private Symbol symbol(int type) {
    return new Symbol(type);
  }
  


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexerCC(java.io.Reader in) {
      yyline = 1; 
    yychar = 1; 
    
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':  // fall through
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { 
  return new Symbol(symbol.EOF, null);

 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { longitudToken = yytext().length(); yychar+=longitudToken; 
 System.out.println("Error de carácter: "+ yytext());
//ReporteError.agregarError(new Error("Lexico", yytext(), "Caracter no reconocido"+ yytext(), yyline, (int)yychar));
            }
          // fall through
          case 148: break;
          case 2:
            { longitudToken = yytext().length(); yychar+=longitudToken; System.out.println(yytext()); return new Symbol(symbol.TEXT, yyline, (int)yychar, yytext() );
            }
          // fall through
          case 149: break;
          case 3:
            { yychar+=1   ;  System.out.println(yytext()); return new Symbol(symbol.NOT           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 150: break;
          case 4:
            { yychar+=1  ; System.out.println(yytext());  return new Symbol(symbol.COMILLAS       ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 151: break;
          case 5:
            { yychar+=1  ; System.out.println(yytext());  return new Symbol(symbol.COMILLA_SIMPLE ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 152: break;
          case 6:
            { yychar+=1  ; System.out.println(yytext());  return new Symbol(symbol.PAR_IZQ ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 153: break;
          case 7:
            { yychar+=1  ; System.out.println(yytext());  return new Symbol(symbol.PAR_DER ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 154: break;
          case 8:
            { yychar+=1   ;  System.out.println(yytext()); return new Symbol(symbol.PLUS          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 155: break;
          case 9:
            { yychar+=1   ;  System.out.println(yytext()); return new Symbol(symbol.SUMA          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 156: break;
          case 10:
            { yychar+=1   ;  System.out.println(yytext()); return new Symbol(symbol.RESTA         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 157: break;
          case 11:
            { yychar+=1   ;  System.out.println(yytext()); return new Symbol(symbol.DIVISION      ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 158: break;
          case 12:
            { longitudToken = yytext().length();   yychar+=longitudToken;  System.out.println(yytext());       return new Symbol(symbol.NUMERO       , yyline  ,  (int)yychar, yytext() );
            }
          // fall through
          case 159: break;
          case 13:
            { yychar+=1  ; System.out.println(yytext());  return new Symbol(symbol.DOS_PUNTOS     ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 160: break;
          case 14:
            { yychar+=1  ; System.out.println(yytext());  return new Symbol(symbol.PUNTO_COMA     ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 161: break;
          case 15:
            { yychar+=1   ;  System.out.println(yytext()); return new Symbol(symbol.MENOR         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 162: break;
          case 16:
            { yychar+=1   ;  System.out.println(yytext()); return new Symbol(symbol.IGUAL         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 163: break;
          case 17:
            { yychar+=1   ;  System.out.println(yytext()); return new Symbol(symbol.MAYOR         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 164: break;
          case 18:
            { yychar+=1  ; System.out.println(yytext());  return new Symbol(symbol.CORCHETE_IZQ   ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 165: break;
          case 19:
            { yychar+=1  ; System.out.println(yytext());  return new Symbol(symbol.CORCHETE_DER   ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 166: break;
          case 20:
            { yychar+=1  ; System.out.println(yytext());  return new Symbol(symbol.LLAVE_IZQ      ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 167: break;
          case 21:
            { yychar+=1  ; System.out.println(yytext());  return new Symbol(symbol.LLAVE_DER      ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 168: break;
          case 22:
            { longitudToken = yytext().length();   yychar+=longitudToken;  System.out.println(yytext());       return new Symbol(symbol.ENTERO       , yyline  ,  (int)yychar, yytext() );
            }
          // fall through
          case 169: break;
          case 23:
            { yychar+=2   ;  System.out.println(yytext()); return new Symbol(symbol.DESIGUALDAD   ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 170: break;
          case 24:
            { longitudToken = yytext().length();   yychar+=longitudToken  ; System.out.println(yytext());  return new Symbol(symbol.CADENA         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 171: break;
          case 25:
            { yychar+=2   ;  System.out.println(yytext()); return new Symbol(symbol.AND           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 172: break;
          case 26:
            { yychar+=2   ;  System.out.println(yytext()); return new Symbol(symbol.MENOR_IGUAL   ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 173: break;
          case 27:
            { yychar+=2   ;  System.out.println(yytext()); return new Symbol(symbol.COMPARACION   ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 174: break;
          case 28:
            { yychar+=2   ;  System.out.println(yytext()); return new Symbol(symbol.MAYOR_IGUAL   ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 175: break;
          case 29:
            { longitudToken = yytext().length();   yychar+=longitudToken;  System.out.println(yytext());       return new Symbol(symbol.IDENTIFICADOR, yyline  ,  (int)yychar, yytext() );
            }
          // fall through
          case 176: break;
          case 30:
            { yychar+=2   ;  System.out.println(yytext()); return new Symbol(symbol.ID            ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 177: break;
          case 31:
            { yychar+=2   ;  System.out.println(yytext()); return new Symbol(symbol.IF            ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 178: break;
          case 32:
            { yychar+=2   ;  System.out.println(yytext()); return new Symbol(symbol.OR            ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 179: break;
          case 33:
            { longitudToken = yytext().length(); yychar+=longitudToken;
            }
          // fall through
          case 180: break;
          case 34:
            { longitudToken = yytext().length();   yychar+=longitudToken  ; System.out.println(yytext());  return new Symbol(symbol.CHARS           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 181: break;
          case 35:
            { yychar+=5   ;  System.out.println(yytext()); return new Symbol(symbol.PIXEL         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 182: break;
          case 36:
            { yychar+=3   ;  System.out.println(yytext()); return new Symbol(symbol.ALT           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 183: break;
          case 37:
            { yychar+=3   ;  System.out.println(yytext()); return new Symbol(symbol.ASC           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 184: break;
          case 38:
            { yychar+=3  ; System.out.println(yytext());  return new Symbol(symbol.P              ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 185: break;
          case 39:
            { yychar+=3   ;  System.out.println(yytext()); return new Symbol(symbol.END           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 186: break;
          case 40:
            { yychar+=3  ;  System.out.println(yytext()); return new Symbol(symbol.RED            ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 187: break;
          case 41:
            { yychar+=3   ;  System.out.println(yytext()); return new Symbol(symbol.ROW           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 188: break;
          case 42:
            { yychar+=3   ;  System.out.println(yytext()); return new Symbol(symbol.SRC           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 189: break;
          case 43:
            { longitudToken = yytext().length();   yychar+=longitudToken;  System.out.println(yytext());       return new Symbol(symbol.DECIMAL      , yyline  ,  (int)yychar, yytext() );
            }
          // fall through
          case 190: break;
          case 44:
            { longitudToken = yytext().length();  yychar+=longitudToken   ;  System.out.println(yytext()); return new Symbol(symbol.HEXADECIMAL  ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 191: break;
          case 45:
            { yychar+=4  ; System.out.println(yytext());  return new Symbol(symbol.P_C            ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 192: break;
          case 46:
            { yychar+=4  ;  System.out.println(yytext()); return new Symbol(symbol.AQUA           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 193: break;
          case 47:
            { yychar+=4  ;  System.out.println(yytext()); return new Symbol(symbol.BLUE           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 194: break;
          case 48:
            { yychar+=4   ;  System.out.println(yytext()); return new Symbol(symbol.CHAR          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 195: break;
          case 49:
            { yychar+=4   ;  System.out.println(yytext()); return new Symbol(symbol.COLS          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 196: break;
          case 50:
            { yychar+=4  ; System.out.println(yytext());  return new Symbol(symbol.BR             ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 197: break;
          case 51:
            { yychar+=4  ; System.out.println(yytext());  return new Symbol(symbol.HTML           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 198: break;
          case 52:
            { yychar+=4  ; System.out.println(yytext());  return new Symbol(symbol.H1             ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 199: break;
          case 53:
            { yychar+=4   ;  System.out.println(yytext()); return new Symbol(symbol.DESC          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 200: break;
          case 54:
            { yychar+=4   ;  System.out.println(yytext()); return new Symbol(symbol.ELSE          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 201: break;
          case 55:
            { yychar+=4   ;  System.out.println(yytext()); return new Symbol(symbol.EXIT          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 202: break;
          case 56:
            { yychar+=4  ;  System.out.println(yytext()); return new Symbol(symbol.GRAY           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 203: break;
          case 57:
            { yychar+=4  ;  System.out.println(yytext()); return new Symbol(symbol.HREF           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 204: break;
          case 58:
            { yychar+=4   ;  System.out.println(yytext()); return new Symbol(symbol.INIT          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 205: break;
          case 59:
            { yychar+=4   ;  System.out.println(yytext()); return new Symbol(symbol.LEFT          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 206: break;
          case 60:
            { yychar+=4  ;  System.out.println(yytext()); return new Symbol(symbol.LIME           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 207: break;
          case 61:
            { yychar+=4   ;  System.out.println(yytext()); return new Symbol(symbol.NAME          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 208: break;
          case 62:
            { yychar+=4  ;  System.out.println(yytext()); return new Symbol(symbol.NAVY           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 209: break;
          case 63:
            { yychar+=4   ;  System.out.println(yytext()); return new Symbol(symbol.ROWS          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 210: break;
          case 64:
            { yychar+=5  ;  System.out.println(yytext()); return new Symbol(symbol.TEAL           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 211: break;
          case 65:
            { yychar+=4   ;  System.out.println(yytext()); return new Symbol(symbol.TEXT          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 212: break;
          case 66:
            { yychar+=4   ;  System.out.println(yytext()); return new Symbol(symbol.THEN          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 213: break;
          case 67:
            { yychar+=4   ;  System.out.println(yytext()); return new Symbol(symbol.TRUE          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 214: break;
          case 68:
            { yychar+=4   ;  System.out.println(yytext()); return new Symbol(symbol.TYPE          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 215: break;
          case 69:
            { yychar+=5  ; System.out.println(yytext());  return new Symbol(symbol.BR_C           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 216: break;
          case 70:
            { yychar+=5  ; System.out.println(yytext());  return new Symbol(symbol.HTML_C         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 217: break;
          case 71:
            { yychar+=5  ; System.out.println(yytext());  return new Symbol(symbol.H1_C           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 218: break;
          case 72:
            { yychar+=5   ;  System.out.println(yytext()); return new Symbol(symbol.ARIAL         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 219: break;
          case 73:
            { yychar+=5  ;  System.out.println(yytext()); return new Symbol(symbol.BLACK          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 220: break;
          case 74:
            { yychar+=5   ;  System.out.println(yytext()); return new Symbol(symbol.CLASS         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 221: break;
          case 75:
            { yychar+=5   ;  System.out.println(yytext()); return new Symbol(symbol.COLOR         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 222: break;
          case 76:
            { yychar+=5  ; System.out.println(yytext());  return new Symbol(symbol.DIV            ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 223: break;
          case 77:
            { yychar+=5  ; System.out.println(yytext());  return new Symbol(symbol.IMG            ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 224: break;
          case 78:
            { yychar+=5   ;  System.out.println(yytext()); return new Symbol(symbol.FALSE         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 225: break;
          case 79:
            { yychar+=5  ;  System.out.println(yytext()); return new Symbol(symbol.GREEN          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 226: break;
          case 80:
            { yychar+=5  ;  System.out.println(yytext()); return new Symbol(symbol.OLIVE          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 227: break;
          case 81:
            { yychar+=5   ;  System.out.println(yytext()); return new Symbol(symbol.RADIO         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 228: break;
          case 82:
            { yychar+=5   ;  System.out.println(yytext()); return new Symbol(symbol.RIGHT         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 229: break;
          case 83:
            { yychar+=5   ;  System.out.println(yytext()); return new Symbol(symbol.WHILE         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 230: break;
          case 84:
            { yychar+=5  ;  System.out.println(yytext()); return new Symbol(symbol.WHITE          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 231: break;
          case 85:
            { yychar+=5   ;  System.out.println(yytext()); return new Symbol(symbol.WIDTH         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 232: break;
          case 86:
            { yychar+=6  ; System.out.println(yytext());  return new Symbol(symbol.DIV_C          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 233: break;
          case 87:
            { yychar+=6  ; System.out.println(yytext());  return new Symbol(symbol.IMG_C          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 234: break;
          case 88:
            { yychar+=6   ;  System.out.println(yytext()); return new Symbol(symbol.CENTER        ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 235: break;
          case 89:
            { yychar+=3   ;  System.out.println(yytext()); return new Symbol(symbol.COLUMN        ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 236: break;
          case 90:
            { yychar+=6  ; System.out.println(yytext());  return new Symbol(symbol.BODY           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 237: break;
          case 91:
            { yychar+=6  ; System.out.println(yytext());  return new Symbol(symbol.HEAD           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 238: break;
          case 92:
            { yychar+=6  ; System.out.println(yytext());  return new Symbol(symbol.LINK           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 239: break;
          case 93:
            { yychar+=6  ; System.out.println(yytext());  return new Symbol(symbol.SPAM           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 240: break;
          case 94:
            { yychar+=6   ;  System.out.println(yytext()); return new Symbol(symbol.GENEVA        ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 241: break;
          case 95:
            { yychar+=6   ;  System.out.println(yytext()); return new Symbol(symbol.HEIGHT        ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 242: break;
          case 96:
            { yychar+=6   ;  System.out.println(yytext()); return new Symbol(symbol.HUNTIL        ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 243: break;
          case 97:
            { yychar+=6   ;  System.out.println(yytext()); return new Symbol(symbol.INSERT        ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 244: break;
          case 98:
            { yychar+=6  ;  System.out.println(yytext()); return new Symbol(symbol.MARRON         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 245: break;
          case 99:
            { yychar+=6   ;  System.out.println(yytext()); return new Symbol(symbol.NUMBER        ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 246: break;
          case 100:
            { yychar+=6  ;  System.out.println(yytext()); return new Symbol(symbol.PURPLE         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 247: break;
          case 101:
            { yychar+=4   ;  System.out.println(yytext()); return new Symbol(symbol.REPEAT        ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 248: break;
          case 102:
            { yychar+=6  ;  System.out.println(yytext()); return new Symbol(symbol.SILVER         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 249: break;
          case 103:
            { yychar+=6   ;  System.out.println(yytext()); return new Symbol(symbol.STRING        ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 250: break;
          case 104:
            { yychar+=6  ;  System.out.println(yytext()); return new Symbol(symbol.YELLOW         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 251: break;
          case 105:
            { yychar+=7  ; System.out.println(yytext());  return new Symbol(symbol.BODY_C         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 252: break;
          case 106:
            { yychar+=7  ; System.out.println(yytext());  return new Symbol(symbol.HEAD_C         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 253: break;
          case 107:
            { yychar+=7  ; System.out.println(yytext());  return new Symbol(symbol.LINK_C         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 254: break;
          case 108:
            { yychar+=7  ; System.out.println(yytext());  return new Symbol(symbol.SPAN_C         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 255: break;
          case 109:
            { yychar+=7   ;  System.out.println(yytext()); return new Symbol(symbol.GLOBAL        ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 256: break;
          case 110:
            { yychar+=7   ;  System.out.println(yytext()); return new Symbol(symbol.BOOLEAN       ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 257: break;
          case 111:
            { yychar+=7   ;  System.out.println(yytext()); return new Symbol(symbol.COURIER       ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 258: break;
          case 112:
            { yychar+=7  ; System.out.println(yytext());  return new Symbol(symbol.INPUT          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 259: break;
          case 113:
            { yychar+=7  ; System.out.println(yytext());  return new Symbol(symbol.TITLE          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 260: break;
          case 114:
            { yychar+=7   ;  System.out.println(yytext()); return new Symbol(symbol.DECIMAL       ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 261: break;
          case 115:
            { yychar+=7  ;  System.out.println(yytext()); return new Symbol(symbol.FUCHSIA        ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 262: break;
          case 116:
            { yychar+=8   ;  System.out.println(yytext()); return new Symbol(symbol.INTEGER       ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 263: break;
          case 117:
            { yychar+=7   ;  System.out.println(yytext()); return new Symbol(symbol.JUSTIFY       ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 264: break;
          case 118:
            { yychar+=7   ;  System.out.println(yytext()); return new Symbol(symbol.ONCLICK       ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 265: break;
          case 119:
            { yychar+=7   ;  System.out.println(yytext()); return new Symbol(symbol.REVERSE       ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 266: break;
          case 120:
            { yychar+=7   ;  System.out.println(yytext()); return new Symbol(symbol.VERDANA       ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 267: break;
          case 121:
            { yychar+=8  ; System.out.println(yytext());  return new Symbol(symbol.INPUT_C        ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 268: break;
          case 122:
            { yychar+=8  ; System.out.println(yytext());  return new Symbol(symbol.TITLE_C        ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 269: break;
          case 123:
            { yychar+=8   ;  System.out.println(yytext()); return new Symbol(symbol.CHECKBOX      ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 270: break;
          case 124:
            { yychar+=8  ; System.out.println(yytext());  return new Symbol(symbol.BUTTON         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 271: break;
          case 125:
            { yychar+=8  ; System.out.println(yytext());  return new Symbol(symbol.OPTION         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 272: break;
          case 126:
            { yychar+=8  ; System.out.println(yytext());  return new Symbol(symbol.SELECTED       ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 273: break;
          case 127:
            { yychar+=9   ;  System.out.println(yytext()); return new Symbol(symbol.REDIRECT      ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 274: break;
          case 128:
            { yychar+=9  ; System.out.println(yytext());  return new Symbol(symbol.BUTTON_C       ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 275: break;
          case 129:
            { yychar+=9  ; System.out.println(yytext());  return new Symbol(symbol.OPTION_C       ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 276: break;
          case 130:
            { yychar+=9  ; System.out.println(yytext());  return new Symbol(symbol.SELECTED_C     ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 277: break;
          case 131:
            { yychar+=9   ;  System.out.println(yytext()); return new Symbol(symbol.FONT_SIZE     ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 278: break;
          case 132:
            { yychar+= 9  ;  System.out.println(yytext()); return new Symbol(symbol.ON_LOAD       ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 279: break;
          case 133:
            { yychar+=9   ;  System.out.println(yytext()); return new Symbol(symbol.THENWHILE     ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 280: break;
          case 134:
            { yychar+=10  ;  System.out.println(yytext()); return new Symbol(symbol.ALERT_INFO    ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 281: break;
          case 135:
            { yychar+=10 ;  System.out.println(yytext()); return new Symbol(symbol.BACKGROUND     ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 282: break;
          case 136:
            { yychar+=10 ; System.out.println(yytext());  return new Symbol(symbol.TEXTOAREA      ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 283: break;
          case 137:
            { longitudToken = yytext().length();   yychar+=longitudToken;  System.out.println(yytext());       return new Symbol(symbol.FUNTION      , yyline  ,  (int)yychar, yytext() );
            }
          // fall through
          case 284: break;
          case 138:
            { yychar+=10  ;  System.out.println(yytext()); return new Symbol(symbol.LETIMPAR_NUM  ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 285: break;
          case 139:
            { yychar+=10  ;  System.out.println(yytext()); return new Symbol(symbol.SANS_SERIF    ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 286: break;
          case 140:
            { yychar+=10  ;  System.out.println(yytext()); return new Symbol(symbol.TEXT_ALIGN    ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 287: break;
          case 141:
            { yychar+=11 ; System.out.println(yytext());  return new Symbol(symbol.TEXTOAREA_C    ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 288: break;
          case 142:
            { yychar+=11  ;  System.out.println(yytext()); return new Symbol(symbol.SCRIPTING     ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 289: break;
          case 143:
            { yychar+=11  ;  System.out.println(yytext()); return new Symbol(symbol.FONT_FAMI     ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 290: break;
          case 144:
            { yychar+=12  ;  System.out.println(yytext()); return new Symbol(symbol.SCRIPTING_C   ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 291: break;
          case 145:
            { yychar+=12  ;  System.out.println(yytext()); return new Symbol(symbol.LETIMPAR_NUM  ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 292: break;
          case 146:
            { yychar+=13  ;  System.out.println(yytext()); return new Symbol(symbol.NUM_ALEATORIO ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 293: break;
          case 147:
            { yychar+=18  ;  System.out.println(yytext()); return new Symbol(symbol.CARACTER_RAMD ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 294: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
