
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.zapil.app;

import java_cup.runtime.*;
import java.util.*;
import com.CruzZapil.CompiFinal.model.Captcha;
import com.CruzZapil.CompiFinal.model.etiqueta.Etiqueta;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\230\000\002\002\030\000\002\002\004\000\002\022" +
    "\012\000\002\023\017\000\002\024\011\000\002\003\012" +
    "\000\002\021\011\000\002\021\002\000\002\010\003\000" +
    "\002\010\004\000\002\010\003\000\002\007\012\000\002" +
    "\007\011\000\002\007\011\000\002\007\012\000\002\007" +
    "\013\000\002\007\011\000\002\007\005\000\002\007\012" +
    "\000\002\007\012\000\002\007\012\000\002\111\003\000" +
    "\002\111\002\000\002\107\003\000\002\107\004\000\002" +
    "\107\003\000\002\110\012\000\002\110\011\000\002\110" +
    "\011\000\002\110\012\000\002\110\011\000\002\110\005" +
    "\000\002\110\012\000\002\110\012\000\002\110\012\000" +
    "\002\105\003\000\002\105\004\000\002\015\012\000\002" +
    "\065\005\000\002\065\006\000\002\066\007\000\002\066" +
    "\007\000\002\066\007\000\002\066\007\000\002\066\007" +
    "\000\002\066\003\000\002\067\005\000\002\067\006\000" +
    "\002\070\007\000\002\070\007\000\002\070\007\000\002" +
    "\070\007\000\002\070\007\000\002\070\003\000\002\071" +
    "\005\000\002\071\006\000\002\072\007\000\002\072\007" +
    "\000\002\072\007\000\002\072\007\000\002\072\007\000" +
    "\002\072\007\000\002\072\003\000\002\073\005\000\002" +
    "\073\006\000\002\074\007\000\002\074\007\000\002\074" +
    "\007\000\002\074\007\000\002\074\007\000\002\074\003" +
    "\000\002\075\005\000\002\075\006\000\002\076\007\000" +
    "\002\076\007\000\002\076\007\000\002\076\007\000\002" +
    "\076\007\000\002\076\007\000\002\076\007\000\002\076" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\077\005\000\002\077\006\000\002\100\007\000" +
    "\002\100\007\000\002\100\007\000\002\100\007\000\002" +
    "\100\007\000\002\100\003\000\002\101\005\000\002\101" +
    "\006\000\002\102\007\000\002\102\007\000\002\102\007" +
    "\000\002\102\007\000\002\102\007\000\002\102\007\000" +
    "\002\102\003\000\002\103\005\000\002\103\006\000\002" +
    "\104\007\000\002\104\007\000\002\104\007\000\002\104" +
    "\007\000\002\104\007\000\002\104\007\000\002\104\003" +
    "\000\002\120\003\000\002\120\003\000\002\120\003\000" +
    "\002\120\003\000\002\120\003\000\002\011\005\000\002" +
    "\011\006\000\002\012\007\000\002\012\007\000\002\012" +
    "\007\000\002\012\007\000\002\012\007\000\002\012\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u022b\000\004\013\005\001\002\000\004\002\u022d\001" +
    "\002\000\004\015\006\001\002\000\004\007\007\001\002" +
    "\000\004\123\010\001\002\000\004\154\011\001\002\000" +
    "\004\004\012\001\002\000\004\222\013\001\002\000\004" +
    "\004\014\001\002\000\004\010\015\001\002\000\004\007" +
    "\016\001\002\000\004\124\017\001\002\000\004\154\020" +
    "\001\002\000\004\004\021\001\002\000\004\117\022\001" +
    "\002\000\004\004\023\001\002\000\004\010\024\001\002" +
    "\000\004\014\025\001\002\000\004\013\027\001\002\000" +
    "\004\013\064\001\002\000\004\017\030\001\002\000\004" +
    "\014\031\001\002\000\004\013\033\001\002\000\004\013" +
    "\050\001\002\000\004\023\034\001\002\000\004\007\035" +
    "\001\002\000\004\055\036\001\002\000\004\154\037\001" +
    "\002\000\004\004\040\001\002\000\004\231\041\001\002" +
    "\000\004\004\042\001\002\000\004\010\043\001\002\000" +
    "\004\014\044\001\002\000\004\013\045\001\002\000\004" +
    "\024\046\001\002\000\004\014\047\001\002\000\004\013" +
    "\ufffe\001\002\000\004\021\055\001\002\000\004\013\052" +
    "\001\002\000\004\020\053\001\002\000\004\014\054\001" +
    "\002\000\004\013\uffff\001\002\000\004\014\056\001\002" +
    "\000\004\117\057\001\002\000\004\013\060\001\002\000" +
    "\004\022\061\001\002\000\004\014\062\001\002\000\004" +
    "\013\ufffd\001\002\000\004\013\u022a\001\002\000\004\025" +
    "\065\001\002\000\006\007\067\014\ufffa\001\002\000\004" +
    "\014\120\001\002\000\004\056\070\001\002\000\004\154" +
    "\071\001\002\000\004\004\072\001\002\000\046\003\107" +
    "\057\100\060\101\061\077\062\103\063\102\064\076\065" +
    "\114\066\075\067\105\070\110\071\073\072\113\073\115" +
    "\074\106\075\111\076\074\077\112\001\002\000\004\004" +
    "\uff7c\001\002\000\004\004\uff77\001\002\000\004\004\uff7f" +
    "\001\002\000\004\004\uff81\001\002\000\004\004\uff84\001" +
    "\002\000\004\004\uff86\001\002\000\004\004\uff85\001\002" +
    "\000\004\004\uff82\001\002\000\004\004\uff83\001\002\000" +
    "\004\004\116\001\002\000\004\004\uff7e\001\002\000\004" +
    "\004\uff79\001\002\000\004\004\uff75\001\002\000\004\004" +
    "\uff7d\001\002\000\004\004\uff78\001\002\000\004\004\uff76" +
    "\001\002\000\004\004\uff7b\001\002\000\004\004\uff80\001" +
    "\002\000\004\004\uff7a\001\002\000\004\010\117\001\002" +
    "\000\004\014\ufffb\001\002\000\006\003\123\013\124\001" +
    "\002\000\004\013\u0227\001\002\000\004\013\ufff9\001\002" +
    "\000\004\013\ufff7\001\002\000\026\027\134\031\126\033" +
    "\131\035\132\041\133\043\136\045\127\047\125\051\135" +
    "\053\130\001\002\000\004\007\u01d9\001\002\000\004\007" +
    "\u01a9\001\002\000\004\014\u021a\001\002\000\004\007\u0183" +
    "\001\002\000\004\007\u0159\001\002\000\004\007\u0129\001" +
    "\002\000\004\007\333\001\002\000\004\007\266\001\002" +
    "\000\004\007\205\001\002\000\004\014\137\001\002\000" +
    "\004\007\141\001\002\000\006\007\177\013\176\001\002" +
    "\000\016\003\143\123\142\130\147\131\146\132\150\133" +
    "\145\001\002\000\004\154\172\001\002\000\004\010\uffbb" +
    "\001\002\000\004\010\171\001\002\000\004\154\165\001" +
    "\002\000\004\154\161\001\002\000\004\154\155\001\002" +
    "\000\004\154\151\001\002\000\004\004\152\001\002\000" +
    "\004\223\153\001\002\000\004\004\154\001\002\000\004" +
    "\010\uffbd\001\002\000\004\004\156\001\002\000\004\117" +
    "\157\001\002\000\004\004\160\001\002\000\004\010\uffbf" +
    "\001\002\000\004\004\162\001\002\000\004\223\163\001" +
    "\002\000\004\004\164\001\002\000\004\010\uffbe\001\002" +
    "\000\004\004\166\001\002\000\004\117\167\001\002\000" +
    "\004\004\170\001\002\000\004\010\uffbc\001\002\000\006" +
    "\007\uffc2\013\uffc2\001\002\000\004\004\173\001\002\000" +
    "\004\222\174\001\002\000\004\004\175\001\002\000\004" +
    "\010\uffc0\001\002\000\004\044\202\001\002\000\016\003" +
    "\143\123\142\130\147\131\146\132\150\133\145\001\002" +
    "\000\004\010\201\001\002\000\006\007\uffc1\013\uffc1\001" +
    "\002\000\004\014\203\001\002\000\004\013\ufff1\001\002" +
    "\000\006\007\256\014\255\001\002\000\016\003\212\100" +
    "\211\101\210\103\213\111\214\123\206\001\002\000\004" +
    "\154\251\001\002\000\004\010\250\001\002\000\004\154" +
    "\244\001\002\000\004\154\240\001\002\000\004\010\uffcc" +
    "\001\002\000\004\154\226\001\002\000\004\154\215\001" +
    "\002\000\004\004\216\001\002\000\014\003\220\112\217" +
    "\113\221\114\222\115\223\001\002\000\004\004\uff74\001" +
    "\002\000\004\004\uff70\001\002\000\004\004\uff73\001\002" +
    "\000\004\004\uff72\001\002\000\004\004\uff71\001\002\000" +
    "\004\004\225\001\002\000\004\010\uffce\001\002\000\004" +
    "\004\227\001\002\000\016\003\231\104\234\105\235\106" +
    "\232\107\233\110\236\001\002\000\004\004\237\001\002" +
    "\000\004\004\uff6a\001\002\000\004\004\uff6d\001\002\000" +
    "\004\004\uff6c\001\002\000\004\004\uff6f\001\002\000\004" +
    "\004\uff6e\001\002\000\004\004\uff6b\001\002\000\004\010" +
    "\uffcf\001\002\000\004\004\241\001\002\000\046\003\107" +
    "\057\100\060\101\061\077\062\103\063\102\064\076\065" +
    "\114\066\075\067\105\070\110\071\073\072\113\073\115" +
    "\074\106\075\111\076\074\077\112\001\002\000\004\004" +
    "\243\001\002\000\004\010\uffcd\001\002\000\004\004\245" +
    "\001\002\000\004\102\246\001\002\000\004\004\247\001" +
    "\002\000\004\010\uffd0\001\002\000\006\007\uffd3\014\uffd3" +
    "\001\002\000\004\004\252\001\002\000\004\222\253\001" +
    "\002\000\004\004\254\001\002\000\004\010\uffd1\001\002" +
    "\000\004\117\261\001\002\000\016\003\212\100\211\101" +
    "\210\103\213\111\214\123\206\001\002\000\004\010\260" +
    "\001\002\000\006\007\uffd2\014\uffd2\001\002\000\004\013" +
    "\262\001\002\000\004\052\263\001\002\000\004\014\264" +
    "\001\002\000\004\013\uffee\001\002\000\006\007\324\014" +
    "\323\001\002\000\016\003\273\100\271\101\270\103\274" +
    "\111\275\123\267\001\002\000\004\154\317\001\002\000" +
    "\004\154\313\001\002\000\004\154\307\001\002\000\004" +
    "\010\306\001\002\000\004\010\uff87\001\002\000\004\154" +
    "\302\001\002\000\004\154\276\001\002\000\004\004\277" +
    "\001\002\000\014\003\220\112\217\113\221\114\222\115" +
    "\223\001\002\000\004\004\301\001\002\000\004\010\uff89" +
    "\001\002\000\004\004\303\001\002\000\016\003\231\104" +
    "\234\105\235\106\232\107\233\110\236\001\002\000\004" +
    "\004\305\001\002\000\004\010\uff8a\001\002\000\006\007" +
    "\uff8e\014\uff8e\001\002\000\004\004\310\001\002\000\046" +
    "\003\107\057\100\060\101\061\077\062\103\063\102\064" +
    "\076\065\114\066\075\067\105\070\110\071\073\072\113" +
    "\073\115\074\106\075\111\076\074\077\112\001\002\000" +
    "\004\004\312\001\002\000\004\010\uff8c\001\002\000\004" +
    "\004\314\001\002\000\004\102\315\001\002\000\004\004" +
    "\316\001\002\000\004\010\uff8b\001\002\000\004\004\320" +
    "\001\002\000\004\222\321\001\002\000\004\004\322\001" +
    "\002\000\004\010\uff88\001\002\000\004\117\327\001\002" +
    "\000\016\003\273\100\271\101\270\103\274\111\275\123" +
    "\267\001\002\000\004\010\326\001\002\000\006\007\uff8d" +
    "\014\uff8d\001\002\000\004\013\330\001\002\000\004\030" +
    "\331\001\002\000\004\014\332\001\002\000\004\013\ufff6" +
    "\001\002\000\022\003\344\056\341\100\337\101\345\103" +
    "\346\111\342\117\347\123\343\001\002\000\006\007\336" +
    "\014\335\001\002\000\010\003\uffeb\013\uffeb\117\u0108\001" +
    "\002\000\022\003\344\056\341\100\337\101\345\103\346" +
    "\111\342\117\347\123\343\001\002\000\004\154\u0104\001" +
    "\002\000\004\010\u0103\001\002\000\004\154\377\001\002" +
    "\000\004\154\373\001\002\000\004\154\367\001\002\000" +
    "\004\010\uffb1\001\002\000\004\154\363\001\002\000\004" +
    "\154\357\001\002\000\004\154\350\001\002\000\004\004" +
    "\351\001\002\000\010\003\353\224\354\225\352\001\002" +
    "\000\004\004\uffaf\001\002\000\004\004\uffae\001\002\000" +
    "\004\004\uffb0\001\002\000\004\004\356\001\002\000\004" +
    "\010\uffb7\001\002\000\004\004\360\001\002\000\016\003" +
    "\231\104\234\105\235\106\232\107\233\110\236\001\002" +
    "\000\004\004\362\001\002\000\004\010\uffb5\001\002\000" +
    "\004\004\364\001\002\000\004\102\365\001\002\000\004" +
    "\004\366\001\002\000\004\010\uffb6\001\002\000\004\004" +
    "\370\001\002\000\004\222\371\001\002\000\004\004\372" +
    "\001\002\000\004\010\uffb8\001\002\000\004\004\374\001" +
    "\002\000\014\003\220\112\217\113\221\114\222\115\223" +
    "\001\002\000\004\004\376\001\002\000\004\010\uffb4\001" +
    "\002\000\004\004\u0100\001\002\000\046\003\107\057\100" +
    "\060\101\061\077\062\103\063\102\064\076\065\114\066" +
    "\075\067\105\070\110\071\073\072\113\073\115\074\106" +
    "\075\111\076\074\077\112\001\002\000\004\004\u0102\001" +
    "\002\000\004\010\uffb2\001\002\000\006\007\uffb9\014\uffb9" +
    "\001\002\000\004\004\u0105\001\002\000\046\003\107\057" +
    "\100\060\101\061\077\062\103\063\102\064\076\065\114" +
    "\066\075\067\105\070\110\071\073\072\113\073\115\074" +
    "\106\075\111\076\074\077\112\001\002\000\004\004\u0107" +
    "\001\002\000\004\010\uffb3\001\002\000\006\003\uffec\013" +
    "\uffec\001\002\000\006\003\u010b\013\u010c\001\002\000\004" +
    "\013\u0203\001\002\000\004\013\uffe8\001\002\000\024\027" +
    "\u0114\031\u0110\033\u0112\035\u0113\043\u0116\045\u010f\047\u010e" +
    "\051\u0115\053\u0111\001\002\000\004\013\uffea\001\002\000" +
    "\004\007\u01d9\001\002\000\004\014\u01d7\001\002\000\004" +
    "\007\u01a9\001\002\000\004\007\u0183\001\002\000\004\007" +
    "\u0159\001\002\000\004\007\u0129\001\002\000\004\007\266" +
    "\001\002\000\004\007\205\001\002\000\004\014\u0117\001" +
    "\002\000\004\007\141\001\002\000\006\007\177\013\u0119" +
    "\001\002\000\004\044\u011a\001\002\000\004\014\u011b\001" +
    "\002\000\004\013\uffe3\001\002\000\006\007\256\014\u011d" +
    "\001\002\000\004\117\u011e\001\002\000\004\013\u011f\001" +
    "\002\000\004\052\u0120\001\002\000\004\014\u0121\001\002" +
    "\000\004\013\uffe0\001\002\000\006\007\324\014\u0123\001" +
    "\002\000\004\117\u0124\001\002\000\004\013\u0125\001\002" +
    "\000\004\030\u0126\001\002\000\004\014\u0127\001\002\000" +
    "\004\013\uffe7\001\002\000\006\007\u0147\014\u0146\001\002" +
    "\000\016\003\u012d\100\u012c\101\u012b\103\u012f\111\u0130\123" +
    "\u012a\001\002\000\004\154\u0142\001\002\000\004\154\u013e" +
    "\001\002\000\004\154\u013a\001\002\000\004\010\uffa6\001" +
    "\002\000\004\010\u0139\001\002\000\004\154\u0135\001\002" +
    "\000\004\154\u0131\001\002\000\004\004\u0132\001\002\000" +
    "\014\003\220\112\217\113\221\114\222\115\223\001\002" +
    "\000\004\004\u0134\001\002\000\004\010\uffa8\001\002\000" +
    "\004\004\u0136\001\002\000\016\003\231\104\234\105\235" +
    "\106\232\107\233\110\236\001\002\000\004\004\u0138\001" +
    "\002\000\004\010\uffa9\001\002\000\006\007\uffad\014\uffad" +
    "\001\002\000\004\004\u013b\001\002\000\046\003\107\057" +
    "\100\060\101\061\077\062\103\063\102\064\076\065\114" +
    "\066\075\067\105\070\110\071\073\072\113\073\115\074" +
    "\106\075\111\076\074\077\112\001\002\000\004\004\u013d" +
    "\001\002\000\004\010\uffa7\001\002\000\004\004\u013f\001" +
    "\002\000\004\102\u0140\001\002\000\004\004\u0141\001\002" +
    "\000\004\010\uffaa\001\002\000\004\004\u0143\001\002\000" +
    "\004\222\u0144\001\002\000\004\004\u0145\001\002\000\004" +
    "\010\uffab\001\002\000\004\013\u014c\001\002\000\016\003" +
    "\u012d\100\u012c\101\u012b\103\u012f\111\u0130\123\u012a\001\002" +
    "\000\004\010\u0149\001\002\000\006\007\uffac\014\uffac\001" +
    "\002\000\004\013\uffde\001\002\000\004\013\u0155\001\002" +
    "\000\004\037\u014d\001\002\000\004\230\u014e\001\002\000" +
    "\004\154\u014f\001\002\000\004\004\u0150\001\002\000\004" +
    "\117\u0151\001\002\000\004\004\u0152\001\002\000\004\014" +
    "\u0153\001\002\000\004\013\uffdc\001\002\000\004\013\uffdd" +
    "\001\002\000\006\036\u0156\037\u014d\001\002\000\004\014" +
    "\u0157\001\002\000\004\013\uffe4\001\002\000\006\007\u017c" +
    "\014\u017b\001\002\000\020\003\u015e\101\u015c\103\u0160\111" +
    "\u0161\123\u015a\125\u015d\126\u015b\001\002\000\004\154\u0177" +
    "\001\002\000\004\154\u0173\001\002\000\004\154\u016f\001" +
    "\002\000\004\154\u016b\001\002\000\004\010\uff9d\001\002" +
    "\000\004\010\u016a\001\002\000\004\154\u0166\001\002\000" +
    "\004\154\u0162\001\002\000\004\004\u0163\001\002\000\014" +
    "\003\220\112\217\113\221\114\222\115\223\001\002\000" +
    "\004\004\u0165\001\002\000\004\010\uffa1\001\002\000\004" +
    "\004\u0167\001\002\000\016\003\231\104\234\105\235\106" +
    "\232\107\233\110\236\001\002\000\004\004\u0169\001\002" +
    "\000\004\010\uffa2\001\002\000\006\007\uffa5\014\uffa5\001" +
    "\002\000\004\004\u016c\001\002\000\004\223\u016d\001\002" +
    "\000\004\004\u016e\001\002\000\004\010\uff9f\001\002\000" +
    "\004\004\u0170\001\002\000\004\102\u0171\001\002\000\004" +
    "\004\u0172\001\002\000\004\010\uffa3\001\002\000\004\004" +
    "\u0174\001\002\000\004\223\u0175\001\002\000\004\004\u0176" +
    "\001\002\000\004\010\uff9e\001\002\000\004\004\u0178\001" +
    "\002\000\004\222\u0179\001\002\000\004\004\u017a\001\002" +
    "\000\004\010\uffa0\001\002\000\004\013\u017f\001\002\000" +
    "\020\003\u015e\101\u015c\103\u0160\111\u0161\123\u015a\125\u015d" +
    "\126\u015b\001\002\000\004\010\u017e\001\002\000\006\007" +
    "\uffa4\014\uffa4\001\002\000\004\034\u0180\001\002\000\004" +
    "\014\u0181\001\002\000\004\013\uffe5\001\002\000\006\007" +
    "\u01a1\014\u01a0\001\002\000\016\003\u0187\100\u0186\101\u0185" +
    "\103\u0189\111\u018a\123\u0184\001\002\000\004\154\u019c\001" +
    "\002\000\004\154\u0198\001\002\000\004\154\u0194\001\002" +
    "\000\004\010\uffd4\001\002\000\004\010\u0193\001\002\000" +
    "\004\154\u018f\001\002\000\004\154\u018b\001\002\000\004" +
    "\004\u018c\001\002\000\014\003\220\112\217\113\221\114" +
    "\222\115\223\001\002\000\004\004\u018e\001\002\000\004" +
    "\010\uffd6\001\002\000\004\004\u0190\001\002\000\016\003" +
    "\231\104\234\105\235\106\232\107\233\110\236\001\002" +
    "\000\004\004\u0192\001\002\000\004\010\uffd7\001\002\000" +
    "\006\007\uffdb\014\uffdb\001\002\000\004\004\u0195\001\002" +
    "\000\046\003\107\057\100\060\101\061\077\062\103\063" +
    "\102\064\076\065\114\066\075\067\105\070\110\071\073" +
    "\072\113\073\115\074\106\075\111\076\074\077\112\001" +
    "\002\000\004\004\u0197\001\002\000\004\010\uffd5\001\002" +
    "\000\004\004\u0199\001\002\000\004\102\u019a\001\002\000" +
    "\004\004\u019b\001\002\000\004\010\uffd8\001\002\000\004" +
    "\004\u019d\001\002\000\004\222\u019e\001\002\000\004\004" +
    "\u019f\001\002\000\004\010\uffd9\001\002\000\004\117\u01a4" +
    "\001\002\000\016\003\u0187\100\u0186\101\u0185\103\u0189\111" +
    "\u018a\123\u0184\001\002\000\004\010\u01a3\001\002\000\006" +
    "\007\uffda\014\uffda\001\002\000\004\013\u01a5\001\002\000" +
    "\004\054\u01a6\001\002\000\004\014\u01a7\001\002\000\004" +
    "\013\uffdf\001\002\000\006\007\u01d1\014\u01d0\001\002\000" +
    "\020\003\u01ae\100\u01ad\101\u01ac\103\u01af\111\u01b1\116\u01b0" +
    "\123\u01ab\001\002\000\004\010\u01cf\001\002\000\004\154" +
    "\u01cb\001\002\000\004\154\u01c7\001\002\000\004\154\u01c3" +
    "\001\002\000\004\010\uff94\001\002\000\004\154\u01bf\001" +
    "\002\000\004\154\u01b6\001\002\000\004\154\u01b2\001\002" +
    "\000\004\004\u01b3\001\002\000\014\003\220\112\217\113" +
    "\221\114\222\115\223\001\002\000\004\004\u01b5\001\002" +
    "\000\004\010\uff96\001\002\000\004\004\u01b7\001\002\000" +
    "\014\003\u01b9\117\u01b8\120\u01bc\121\u01ba\122\u01bb\001\002" +
    "\000\004\004\uff93\001\002\000\004\004\uff8f\001\002\000" +
    "\004\004\uff91\001\002\000\004\004\uff90\001\002\000\004" +
    "\004\uff92\001\002\000\004\004\u01be\001\002\000\004\010" +
    "\uff9a\001\002\000\004\004\u01c0\001\002\000\016\003\231" +
    "\104\234\105\235\106\232\107\233\110\236\001\002\000" +
    "\004\004\u01c2\001\002\000\004\010\uff97\001\002\000\004" +
    "\004\u01c4\001\002\000\046\003\107\057\100\060\101\061" +
    "\077\062\103\063\102\064\076\065\114\066\075\067\105" +
    "\070\110\071\073\072\113\073\115\074\106\075\111\076" +
    "\074\077\112\001\002\000\004\004\u01c6\001\002\000\004" +
    "\010\uff95\001\002\000\004\004\u01c8\001\002\000\004\102" +
    "\u01c9\001\002\000\004\004\u01ca\001\002\000\004\010\uff98" +
    "\001\002\000\004\004\u01cc\001\002\000\004\222\u01cd\001" +
    "\002\000\004\004\u01ce\001\002\000\004\010\uff99\001\002" +
    "\000\006\007\uff9c\014\uff9c\001\002\000\004\013\u01d4\001" +
    "\002\000\020\003\u01ae\100\u01ad\101\u01ac\103\u01af\111\u01b1" +
    "\116\u01b0\123\u01ab\001\002\000\004\010\u01d3\001\002\000" +
    "\006\007\uff9b\014\uff9b\001\002\000\004\032\u01d5\001\002" +
    "\000\004\014\u01d6\001\002\000\004\013\uffe6\001\002\000" +
    "\004\013\uffe2\001\002\000\006\007\u01fc\014\u01fb\001\002" +
    "\000\020\003\u01dd\056\u01de\100\u01dc\101\u01db\103\u01e0\111" +
    "\u01e1\123\u01da\001\002\000\004\154\u01f7\001\002\000\004" +
    "\154\u01f3\001\002\000\004\154\u01ef\001\002\000\004\010" +
    "\uffc3\001\002\000\004\154\u01eb\001\002\000\004\010\u01ea" +
    "\001\002\000\004\154\u01e6\001\002\000\004\154\u01e2\001" +
    "\002\000\004\004\u01e3\001\002\000\014\003\220\112\217" +
    "\113\221\114\222\115\223\001\002\000\004\004\u01e5\001" +
    "\002\000\004\010\uffc6\001\002\000\004\004\u01e7\001\002" +
    "\000\016\003\231\104\234\105\235\106\232\107\233\110" +
    "\236\001\002\000\004\004\u01e9\001\002\000\004\010\uffc7" +
    "\001\002\000\006\007\uffcb\014\uffcb\001\002\000\004\004" +
    "\u01ec\001\002\000\046\003\107\057\100\060\101\061\077" +
    "\062\103\063\102\064\076\065\114\066\075\067\105\070" +
    "\110\071\073\072\113\073\115\074\106\075\111\076\074" +
    "\077\112\001\002\000\004\004\u01ee\001\002\000\004\010" +
    "\uffc4\001\002\000\004\004\u01f0\001\002\000\046\003\107" +
    "\057\100\060\101\061\077\062\103\063\102\064\076\065" +
    "\114\066\075\067\105\070\110\071\073\072\113\073\115" +
    "\074\106\075\111\076\074\077\112\001\002\000\004\004" +
    "\u01f2\001\002\000\004\010\uffc5\001\002\000\004\004\u01f4" +
    "\001\002\000\004\102\u01f5\001\002\000\004\004\u01f6\001" +
    "\002\000\004\010\uffc8\001\002\000\004\004\u01f8\001\002" +
    "\000\004\222\u01f9\001\002\000\004\004\u01fa\001\002\000" +
    "\004\010\uffc9\001\002\000\004\117\u01ff\001\002\000\020" +
    "\003\u01dd\056\u01de\100\u01dc\101\u01db\103\u01e0\111\u01e1\123" +
    "\u01da\001\002\000\004\010\u01fe\001\002\000\006\007\uffca" +
    "\014\uffca\001\002\000\004\013\u0200\001\002\000\004\050" +
    "\u0201\001\002\000\004\014\u0202\001\002\000\004\013\uffe1" +
    "\001\002\000\026\027\u0114\031\u0110\033\u0112\035\u0113\042" +
    "\u0205\043\u0116\045\u010f\047\u010e\051\u0115\053\u0111\001\002" +
    "\000\004\013\uffe9\001\002\000\004\014\u0206\001\002\000" +
    "\004\013\ufff2\001\002\000\004\010\u0208\001\002\000\006" +
    "\007\uffba\014\uffba\001\002\000\006\007\u0147\014\u020a\001" +
    "\002\000\004\013\u014c\001\002\000\004\013\u020c\001\002" +
    "\000\006\036\u020d\037\u014d\001\002\000\004\014\u020e\001" +
    "\002\000\004\013\ufff3\001\002\000\006\007\u017c\014\u0210" +
    "\001\002\000\004\013\u0211\001\002\000\004\034\u0212\001" +
    "\002\000\004\014\u0213\001\002\000\004\013\ufff4\001\002" +
    "\000\006\007\u01a1\014\u0215\001\002\000\004\117\u0216\001" +
    "\002\000\004\013\u0217\001\002\000\004\054\u0218\001\002" +
    "\000\004\014\u0219\001\002\000\004\013\uffed\001\002\000" +
    "\004\013\ufff0\001\002\000\006\007\u01d1\014\u021c\001\002" +
    "\000\004\013\u021d\001\002\000\004\032\u021e\001\002\000" +
    "\004\014\u021f\001\002\000\004\013\ufff5\001\002\000\006" +
    "\007\u01fc\014\u0221\001\002\000\004\117\u0222\001\002\000" +
    "\004\013\u0223\001\002\000\004\050\u0224\001\002\000\004" +
    "\014\u0225\001\002\000\004\013\uffef\001\002\000\004\013" +
    "\ufff8\001\002\000\030\026\u0228\027\134\031\126\033\131" +
    "\035\132\041\133\043\136\045\127\047\125\051\135\053" +
    "\130\001\002\000\004\014\u0229\001\002\000\004\013\ufffc" +
    "\001\002\000\004\016\u022b\001\002\000\004\014\u022c\001" +
    "\002\000\004\002\001\001\002\000\004\002\000\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u022b\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\025\001\001\000\004\003\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\031\001\001\000\004" +
    "\024\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\103\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\007\121\010\120\001\001\000\004\007\u0225\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\071\u021f\001\001\000\004\103\u021a\001\001\000\002" +
    "\001\001\000\004\065\u0213\001\001\000\004\101\u020e\001" +
    "\001\000\004\077\u0208\001\001\000\004\075\333\001\001" +
    "\000\004\011\264\001\001\000\004\067\203\001\001\000" +
    "\002\001\001\000\004\073\137\001\001\000\002\001\001" +
    "\000\004\074\143\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\074\177\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\070\206\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\223\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\227\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\241\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\070\256\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\271\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\277\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\303\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\310\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\324\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\076\u0206\001\001\000\002" +
    "\001\001\000\004\111\u0108\001\001\000\004\076\337\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\354\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\360\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\374\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\u0100" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\u0105\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\107" +
    "\u0109\110\u010c\001\001\000\004\110\u0203\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\071" +
    "\u01d7\001\001\000\002\001\001\000\004\103\u01a7\001\001" +
    "\000\004\065\u0181\001\001\000\004\101\u0157\001\001\000" +
    "\004\077\u0127\001\001\000\004\011\u0121\001\001\000\004" +
    "\067\u011b\001\001\000\002\001\001\000\004\073\u0117\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\100\u012d\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\u0132\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\u0136\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\u013b\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\015\u0149\105\u014a\001\001\000\004\100\u0147\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\u0153\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\102\u015e\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\u0163\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\u0167\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\102\u017c\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\066\u0187\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\u018c\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\u0190\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\u0195\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\066\u01a1" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\104\u01a9\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\u01b3\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\120\u01bc\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\u01c0\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\u01c4\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\104\u01d1\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\072\u01de\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\u01e3\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\u01e7\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\u01ec\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\u01f0" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\072\u01fc\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\015\u0149\105\u020a\001\001\000\004\015\u0153\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 

    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 

       // PanelReporte.agregarError(new Errores("Sintactico",String.valueOf(s.value),"no se esperaba: "+String.valueOf( s.value), s.left, s.right));
    } 
    /**
     * Método al que se llama cuando se identifica un error sintáctico en el que 
     * ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido.");

    }

   // para el objeto captcha
        private Captcha captcha;

        public Captcha getCaptcha(){
            return captcha;
        }

    /// lista de etiqueta

        private ArrayList<Etiqueta> listaEtiqueta = new ArrayList<Etiqueta>();

         public ArrayList<Etiqueta> getListEtiqueta(){
          return listaEtiqueta;
         }

        private ArrayList <String> listParametro = new ArrayList<String>();
        private ArrayList <String> listAtributo  = new ArrayList<String>();




                 /// funcion para distribuir los parametros de una etiqueta: 

            public String separarAtributos() {
                StringBuilder resultado = new StringBuilder();

                if (!listAtributo.isEmpty()){
                for (String atributo : listAtributo) {
                        resultado.append(atributo).append(" ");
                }           
                }

                if (!listParametro.isEmpty()  ){
                          resultado.append(" style= \" ");

                for (String parametro : listParametro) {
                        resultado.append(parametro).append(" ");
                }
                  resultado.append(" \" ");
                }

                listParametro.clear();
                listAtributo.clear();

                String parametro = resultado.toString().trim();

            return parametro;
        }

    

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // iniciar ::= MENOR HTML CORCHETE_IZQ ID IGUAL COMILLAS IDENTIFICADOR COMILLAS CORCHETE_DER CORCHETE_IZQ NAME IGUAL COMILLAS TEXT COMILLAS CORCHETE_DER MAYOR head body MENOR HTML_C MAYOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-15)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int heleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int heright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object he = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int boleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int boright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object bo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		

      // Crear el objeto Captcha con los datos recopilados

        System.out.println("Captcha creado con éxito");
        System.out.println("ID: " + id);
        System.out.println("Nombre: " + nombre);
        System.out.println("Head: " + he);
        
        for (Etiqueta e : (List<Etiqueta>) he) {
            System.out.println("Etiqueta: " + e);
        }

         captcha  = new Captcha((String) id, (String) nombre, (ArrayList<Etiqueta>) he, (BodyContent) bo);
    

    

              CUP$parser$result = parser.getSymbolFactory().newSymbol("iniciar",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-21)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= iniciar EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // head ::= MENOR HEAD MAYOR link title MENOR HEAD_C MAYOR 
            {
              Object RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object ti = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		  

        // Crear un objeto para almacenar el contenido del head
        List<Etiqueta> headContent = new ArrayList<>();
        headContent.add((Etiqueta) li);
        headContent.add((Etiqueta) ti);
        RESULT = (ArrayList<Etiqueta>) headContent;

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("head",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // link ::= MENOR LINK CORCHETE_IZQ HREF IGUAL COMILLAS URL COMILLAS CORCHETE_DER MAYOR MENOR LINK_C MAYOR 
            {
              Object RESULT =null;
		int urleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int urright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object ur = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		  
    String parametro = "href = \""+ur +"\"" ;
        RESULT = new Etiqueta("link", parametro, null);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("link",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // title ::= MENOR TITLE MAYOR TEXT MENOR TITLE_C MAYOR 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object txt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		  
        // Guardar el texto del título
        RESULT = new Etiqueta("title", null, (String) txt);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("title",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // body ::= MENOR BODY background MAYOR etiq MENOR BODY_C MAYOR 
            {
              Object RESULT =null;
		int bgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object bg = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int etileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int etiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object eti = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		  
        // Crear un objeto para almacenar el contenido del body
        BodyContent bodyContent = new BodyContent();
        bodyContent.background = (String) bg;
        bodyContent.etiquetas = (List<Etiqueta>) eti;
        RESULT = bodyContent;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("body",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // background ::= CORCHETE_IZQ BACKGROUND IGUAL COMILLAS colors COMILLAS CORCHETE_DER 
            {
              Object RESULT =null;
		int colleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object col = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT= " background-color:  "+ col+"   ;"  ;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("background",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // background ::= 
            {
              Object RESULT =null;
		 RESULT=""; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("background",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // etiq ::= etiqueta 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
         List<Etiqueta> lista = new ArrayList<>();
        lista.add((Etiqueta) e);
        RESULT = lista; 

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiq",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // etiq ::= etiq etiqueta 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

         if (e1 == null) {
             e1 = new ArrayList<>();
         }

         // Verificar si e2 es una instancia de Etiqueta antes de agregarla a la lista
         if (e2 instanceof Etiqueta) {
             ((ArrayList<Etiqueta>) e1).add((Etiqueta) e2);
         }
        RESULT = e1; 

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiq",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // etiq ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiq",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // etiqueta ::= MENOR SPAM paramsSpam MAYOR TEXT MENOR SPAM_C MAYOR 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object txt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 

        String parametro = separarAtributos();
         RESULT= new Etiqueta("spam",(String) parametro ,(String) txt); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiqueta",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // etiqueta ::= MENOR INPUT paramsInput MAYOR MENOR INPUT_C MAYOR 
            {
              Object RESULT =null;
		 
        String parametro = separarAtributos();
         RESULT= new Etiqueta ("input",(String) parametro ,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiqueta",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // etiqueta ::= MENOR TEXTOAREA paramsTextoArea MAYOR MENOR TEXTOAREA_C MAYOR 
            {
              Object RESULT =null;
		  
        String parametro = separarAtributos();
        RESULT= new Etiqueta("textarea",(String) parametro ,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiqueta",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // etiqueta ::= MENOR SELECTED paramsSelect MAYOR opt MENOR SELECTED_C MAYOR 
            {
              Object RESULT =null;
		int otleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int otright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object ot = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		  
        String parametro = separarAtributos();
        Etiqueta etiquetaSelect = new Etiqueta("select", parametro, null);
        // Agregar todas las opciones como hijos de la etiqueta select
        for (Etiqueta e : (List<Etiqueta>)  ot) {
            etiquetaSelect.agregarHijo(e);
        }
         RESULT = etiquetaSelect;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiqueta",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // etiqueta ::= MENOR DIV paramsDiv MAYOR textos etiq2 MENOR DIV_C MAYOR 
            {
              Object RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int txtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object txt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object contenido = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 
        String parametro = separarAtributos();

        Etiqueta etiquetaDiv = new Etiqueta("div",(String) parametro ,(String) txt);
              // Agregar todas las etiquetas hijas al div
        for (Etiqueta e : (List<Etiqueta>)  contenido) {
            etiquetaDiv.agregarHijo(e);
        }
          RESULT = etiquetaDiv;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiqueta",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // etiqueta ::= MENOR IMG MAYOR paramsImg MENOR IMG_C MAYOR 
            {
              Object RESULT =null;
		int imgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int imgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object img = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        String parametro = separarAtributos();  
          RESULT= new Etiqueta("img",(String) parametro ,(String) img); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiqueta",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // etiqueta ::= MENOR BR MAYOR 
            {
              Object RESULT =null;
		 
        String parametro = separarAtributos(); RESULT= new Etiqueta("br",null ,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiqueta",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // etiqueta ::= MENOR BUTTON paramsButton MAYOR TEXT MENOR BUTTON_C MAYOR 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object txt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 
        String parametro = separarAtributos(); 
           RESULT= new Etiqueta("button",(String) parametro ,(String) txt); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiqueta",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // etiqueta ::= MENOR H1 paramsH1 MAYOR TEXT MENOR H1_C MAYOR 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object txt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		  
        String parametro = separarAtributos();
           RESULT= new Etiqueta("h1",(String) parametro ,(String) txt ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiqueta",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // etiqueta ::= MENOR P paramsP MAYOR TEXT MENOR P_C MAYOR 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object txt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 
        String parametro = separarAtributos(); 
        RESULT= new Etiqueta("p",(String) parametro , (String) txt); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiqueta",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // textos ::= TEXT 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object txt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = txt; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("textos",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // textos ::= 
            {
              Object RESULT =null;
		 RESULT=""; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("textos",71, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // etiq2 ::= etiqueta2 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
         List<Etiqueta> lista = new ArrayList<>();
        lista.add((Etiqueta) e);
        RESULT = lista; 

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiq2",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // etiq2 ::= etiq2 etiqueta2 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

         if (e1 == null) {
             e1 = new ArrayList<>();
         }

         // Verificar si e2 es una instancia de Etiqueta antes de agregarla a la lista
         if (e2 instanceof Etiqueta) {
             ((ArrayList<Etiqueta>) e1).add((Etiqueta) e2);
         }
        RESULT = e1; 

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiq2",69, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // etiq2 ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiq2",69, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // etiqueta2 ::= MENOR SPAM paramsSpam MAYOR TEXT MENOR SPAM_C MAYOR 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object txt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 

        String parametro = separarAtributos();
         RESULT= new Etiqueta("spam",(String) parametro ,(String) txt); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiqueta2",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // etiqueta2 ::= MENOR INPUT paramsInput MAYOR MENOR INPUT_C MAYOR 
            {
              Object RESULT =null;
		 
        String parametro = separarAtributos();
         RESULT= new Etiqueta ("input",(String) parametro ,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiqueta2",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // etiqueta2 ::= MENOR TEXTOAREA paramsTextoArea MAYOR MENOR TEXTOAREA_C MAYOR 
            {
              Object RESULT =null;
		  
        String parametro = separarAtributos();
        RESULT= new Etiqueta("textarea",(String) parametro ,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiqueta2",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // etiqueta2 ::= MENOR SELECTED paramsSelect MAYOR opt MENOR SELECTED_C MAYOR 
            {
              Object RESULT =null;
		int otleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int otright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object ot = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		  
        String parametro = separarAtributos();
        Etiqueta etiquetaSelect = new Etiqueta("select", parametro, null);
        // Agregar todas las opciones como hijos de la etiqueta select
        for (Etiqueta e : (List<Etiqueta>)  ot) {
            etiquetaSelect.agregarHijo(e);
        }
         RESULT = etiquetaSelect;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiqueta2",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // etiqueta2 ::= MENOR IMG MAYOR paramsImg MENOR IMG_C MAYOR 
            {
              Object RESULT =null;
		int imgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int imgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object img = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        String parametro = separarAtributos();  
          RESULT= new Etiqueta("img",(String) parametro ,(String) img); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiqueta2",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // etiqueta2 ::= MENOR BR MAYOR 
            {
              Object RESULT =null;
		 
        String parametro = separarAtributos(); RESULT= new Etiqueta("br",null ,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiqueta2",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // etiqueta2 ::= MENOR BUTTON paramsButton MAYOR TEXT MENOR BUTTON_C MAYOR 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object txt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 
        String parametro = separarAtributos(); 
           RESULT= new Etiqueta("button",(String) parametro ,(String) txt); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiqueta2",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // etiqueta2 ::= MENOR H1 paramsH1 MAYOR TEXT MENOR H1_C MAYOR 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object txt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		  
        String parametro = separarAtributos();
           RESULT= new Etiqueta("h1",(String) parametro ,(String) txt ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiqueta2",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // etiqueta2 ::= MENOR P paramsP MAYOR TEXT MENOR P_C MAYOR 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object txt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 
        String parametro = separarAtributos(); 
        RESULT= new Etiqueta("p",(String) parametro , (String) txt); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiqueta2",70, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // opt ::= options 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

         List<Etiqueta> lista = new ArrayList<>();
         lista.add((Etiqueta)o);
         RESULT = lista;

         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opt",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // opt ::= opt options 
            {
              Object RESULT =null;
		int prevleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int prevright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object prev = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        
                 // Verificar si e2 es una instancia de Etiqueta antes de agregarla a la lista
         if (o instanceof Etiqueta) {
             ((ArrayList<Etiqueta>) prev).add((Etiqueta) o);
         }
        
           RESULT = prev;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opt",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // options ::= MENOR OPTION VALUE IGUAL COMILLAS TEXT COMILLAS MAYOR 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object txt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
        Etiqueta etiquetaOption = new Etiqueta("option",(String) txt,null );
        RESULT = etiquetaOption;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("options",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // paramsP ::= CORCHETE_IZQ parametros_P CORCHETE_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramsP",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // paramsP ::= paramsP CORCHETE_IZQ parametros_P CORCHETE_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramsP",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // parametros_P ::= ID IGUAL COMILLAS IDENTIFICADOR COMILLAS 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 String tmp = "id = \""+ide+"\"";  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_P",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // parametros_P ::= FONT_SIZE IGUAL COMILLAS PIXEL COMILLAS 
            {
              Object RESULT =null;
		int pixleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pixright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object pix = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 String tmp = " font-size: "+ pix +";  "    ;listParametro.add(tmp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_P",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // parametros_P ::= FONT_FAMI IGUAL COMILLAS font COMILLAS 
            {
              Object RESULT =null;
		int fonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fonright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object fon = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 String tmp = " font-family:  "+ fon +";  " ;listParametro.add(tmp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_P",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // parametros_P ::= TEXT_ALIGN IGUAL COMILLAS align COMILLAS 
            {
              Object RESULT =null;
		int alileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aliright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ali = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 String tmp = " text-align:  "+ ali  +";  " ;listParametro.add(tmp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_P",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // parametros_P ::= COLOR IGUAL COMILLAS colors COMILLAS 
            {
              Object RESULT =null;
		int colleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object col = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 String tmp = " color:  "+ col+"   ;"       ;listParametro.add(tmp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_P",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // parametros_P ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_P",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // paramsH1 ::= CORCHETE_IZQ parametros_H1 CORCHETE_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramsH1",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // paramsH1 ::= paramsH1 CORCHETE_IZQ parametros_H1 CORCHETE_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramsH1",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // parametros_H1 ::= ID IGUAL COMILLAS IDENTIFICADOR COMILLAS 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 String tmp = " id = \" "+ide+" \" ; "     ;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_H1",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // parametros_H1 ::= FONT_SIZE IGUAL COMILLAS PIXEL COMILLAS 
            {
              Object RESULT =null;
		int pixleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pixright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object pix = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 String tmp = " font-size:  "+ pix +"; "  ;listParametro.add(tmp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_H1",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // parametros_H1 ::= FONT_FAMI IGUAL COMILLAS font COMILLAS 
            {
              Object RESULT =null;
		int fonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fonright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object fon = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 String tmp = " font-family:  "+ fon +"; ";listParametro.add(tmp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_H1",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // parametros_H1 ::= TEXT_ALIGN IGUAL COMILLAS align COMILLAS 
            {
              Object RESULT =null;
		int alileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aliright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ali = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 String tmp = " text-align:  "+ ali  +"; ";listParametro.add(tmp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_H1",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // parametros_H1 ::= COLOR IGUAL COMILLAS colors COMILLAS 
            {
              Object RESULT =null;
		int colleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object col = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 String tmp = " color: "+ col+"  ;"       ;listParametro.add(tmp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_H1",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // parametros_H1 ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_H1",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // paramsButton ::= CORCHETE_IZQ parametros_Button CORCHETE_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramsButton",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // paramsButton ::= paramsButton CORCHETE_IZQ parametros_Button CORCHETE_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramsButton",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // parametros_Button ::= ID IGUAL COMILLAS IDENTIFICADOR COMILLAS 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 String tmp = "id = \""+ide+"\""               ;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_Button",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // parametros_Button ::= FONT_SIZE IGUAL COMILLAS PIXEL COMILLAS 
            {
              Object RESULT =null;
		int pixleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pixright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object pix = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 String tmp = " font-size:  "+ pix +";  "      ;listParametro.add(tmp);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_Button",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // parametros_Button ::= FONT_FAMI IGUAL COMILLAS font COMILLAS 
            {
              Object RESULT =null;
		int fonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fonright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object fon = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 String tmp = " font-family:  "+ fon +"; "     ;listParametro.add(tmp);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_Button",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // parametros_Button ::= TEXT_ALIGN IGUAL COMILLAS align COMILLAS 
            {
              Object RESULT =null;
		int alileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aliright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ali = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 String tmp = " text-align:  "+ ali  +";  "    ;listParametro.add(tmp);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_Button",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // parametros_Button ::= COLOR IGUAL COMILLAS colors COMILLAS 
            {
              Object RESULT =null;
		int colleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object col = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 String tmp = " color: "+ col+"   ;"           ;listParametro.add(tmp);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_Button",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // parametros_Button ::= BACKGROUND IGUAL COMILLAS colors COMILLAS 
            {
              Object RESULT =null;
		int bacleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bacright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object bac = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 String tmp = " background-color: "+ bac+"  ;" ;listParametro.add(tmp);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_Button",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // parametros_Button ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_Button",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // paramsImg ::= CORCHETE_IZQ parametros_Img CORCHETE_DER 
            {
              Object RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramsImg",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // paramsImg ::= paramsImg CORCHETE_IZQ parametros_Img CORCHETE_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramsImg",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // parametros_Img ::= ID IGUAL COMILLAS IDENTIFICADOR COMILLAS 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 String tmp = "id = \""+ide+"\""    ; listAtributo.add(tmp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_Img",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // parametros_Img ::= SRC IGUAL COMILLAS TEXT COMILLAS 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object txt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 String tmp = "src = \""+txt+"\""   ; listAtributo.add(tmp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_Img",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // parametros_Img ::= WIDTH IGUAL COMILLAS NUMERO COMILLAS 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 String tmp = "width = \""+num+"\"" ; listAtributo.add(tmp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_Img",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // parametros_Img ::= HEIGHT IGUAL COMILLAS NUMERO COMILLAS 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 String tmp = "height = \""+num+"\""; listAtributo.add(tmp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_Img",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // parametros_Img ::= ALT IGUAL COMILLAS TEXT COMILLAS 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object txt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 String tmp = "alt = \""+txt+"\""   ; listAtributo.add(tmp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_Img",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // parametros_Img ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_Img",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // paramsDiv ::= CORCHETE_IZQ parametros_Div CORCHETE_DER 
            {
              Object RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramsDiv",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // paramsDiv ::= paramsDiv CORCHETE_IZQ parametros_Div CORCHETE_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramsDiv",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // parametros_Div ::= ID IGUAL COMILLAS IDENTIFICADOR COMILLAS 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 String tmp= "id = \""+ide+"\""                ;listAtributo.add(tmp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_Div",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // parametros_Div ::= TEXT IGUAL COMILLAS clase COMILLAS 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object txt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int clsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int clsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object cls = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 String tmp= txt+" = \""+cls+"\""             ;listAtributo.add(tmp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_Div",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // parametros_Div ::= FONT_SIZE IGUAL COMILLAS PIXEL COMILLAS 
            {
              Object RESULT =null;
		int pixleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pixright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object pix = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 String tmp= " font-size:  "+ pix +";  "       ;listParametro.add(tmp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_Div",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // parametros_Div ::= FONT_FAMI IGUAL COMILLAS font COMILLAS 
            {
              Object RESULT =null;
		int fonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fonright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object fon = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 String tmp= " font-family:  "+ fon +";  "     ;listParametro.add(tmp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_Div",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // parametros_Div ::= TEXT_ALIGN IGUAL COMILLAS align COMILLAS 
            {
              Object RESULT =null;
		int alileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aliright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ali = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 String tmp= " text-align: \" "+ ali  +";  "   ;listParametro.add(tmp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_Div",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // parametros_Div ::= COLOR IGUAL COMILLAS colors COMILLAS 
            {
              Object RESULT =null;
		int colleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object col = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 String tmp= " color:  "+ col+"  ;"            ;listParametro.add(tmp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_Div",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // parametros_Div ::= BACKGROUND IGUAL COMILLAS colors COMILLAS 
            {
              Object RESULT =null;
		int colleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object col = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 String tmp= " background-color:  "+ col+"  ;" ;listParametro.add(tmp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_Div",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // parametros_Div ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_Div",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // clase ::= ROW 
            {
              Object RESULT =null;
		 RESULT= "row "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("clase",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // clase ::= COLUMN 
            {
              Object RESULT =null;
		 RESULT= " col-1"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("clase",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // clase ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("clase",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // paramsSelect ::= CORCHETE_IZQ parametros_Select CORCHETE_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramsSelect",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // paramsSelect ::= paramsSelect CORCHETE_IZQ parametros_Select CORCHETE_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramsSelect",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // parametros_Select ::= ID IGUAL COMILLAS IDENTIFICADOR COMILLAS 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 String tmp= "id = \" "+ide+"\" "; listAtributo.add(tmp);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_Select",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // parametros_Select ::= FONT_SIZE IGUAL COMILLAS PIXEL COMILLAS 
            {
              Object RESULT =null;
		int pixleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pixright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object pix = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 String tmp= " font-size: "+ pix +";  "   ;listParametro.add(tmp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_Select",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // parametros_Select ::= FONT_FAMI IGUAL COMILLAS font COMILLAS 
            {
              Object RESULT =null;
		int fonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fonright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object fon = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 String tmp= " font-family: "+ fon +";  " ;listParametro.add(tmp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_Select",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // parametros_Select ::= TEXT_ALIGN IGUAL COMILLAS align COMILLAS 
            {
              Object RESULT =null;
		int alileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aliright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ali = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 String tmp= " text-align:  "+ ali  +";  " ;listParametro.add(tmp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_Select",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // parametros_Select ::= COLOR IGUAL COMILLAS colors COMILLAS 
            {
              Object RESULT =null;
		int colleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object col = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 String tmp= " color:  "+ col+"   ;"  ;listParametro.add(tmp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_Select",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // parametros_Select ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_Select",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // paramsTextoArea ::= CORCHETE_IZQ parametros_TextoArea CORCHETE_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramsTextoArea",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // paramsTextoArea ::= paramsTextoArea CORCHETE_IZQ parametros_TextoArea CORCHETE_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramsTextoArea",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // parametros_TextoArea ::= FONT_SIZE IGUAL COMILLAS PIXEL COMILLAS 
            {
              Object RESULT =null;
		int pixleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pixright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object pix = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 String tmp = " font-size:  "+ pix +";  "   ; listParametro.add(tmp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_TextoArea",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // parametros_TextoArea ::= FONT_FAMI IGUAL COMILLAS font COMILLAS 
            {
              Object RESULT =null;
		int fonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fonright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object fon = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 String tmp = " font-family:  "+ fon +";  " ; listParametro.add(tmp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_TextoArea",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // parametros_TextoArea ::= TEXT_ALIGN IGUAL COMILLAS align COMILLAS 
            {
              Object RESULT =null;
		int alileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aliright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ali = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 String tmp = " text-align:  "+ ali  +";  " ; listParametro.add(tmp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_TextoArea",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // parametros_TextoArea ::= ID IGUAL COMILLAS IDENTIFICADOR COMILLAS 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 String tmp = "id = \""+ide+"\"";   listAtributo.add(tmp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_TextoArea",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // parametros_TextoArea ::= COLS IGUAL COMILLAS NUMERO COMILLAS 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 String tmp = "cols = \""+num+"\""; listAtributo.add(tmp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_TextoArea",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // parametros_TextoArea ::= ROWS IGUAL COMILLAS NUMERO COMILLAS 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 String tmp = "rows = \""+num+"\""; listAtributo.add(tmp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_TextoArea",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // parametros_TextoArea ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_TextoArea",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // paramsInput ::= CORCHETE_IZQ parametros_input CORCHETE_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramsInput",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // paramsInput ::= paramsInput CORCHETE_IZQ parametros_input CORCHETE_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramsInput",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // parametros_input ::= TYPE IGUAL COMILLAS type_input COMILLAS 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 String tmp = "type = \""+type+"\""; listAtributo.add(tmp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_input",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // parametros_input ::= ID IGUAL COMILLAS IDENTIFICADOR COMILLAS 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 String tmp = "id = \""+ide+"\"";    listAtributo.add(tmp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_input",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // parametros_input ::= FONT_SIZE IGUAL COMILLAS PIXEL COMILLAS 
            {
              Object RESULT =null;
		int pixleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pixright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object pix = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 String tmp = " font-size:  "+ pix   +";  "   ; listParametro.add(tmp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_input",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // parametros_input ::= FONT_FAMI IGUAL COMILLAS font COMILLAS 
            {
              Object RESULT =null;
		int fonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fonright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object fon = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 String tmp = " font-family:  "+ fon +";  "   ; listParametro.add(tmp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_input",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // parametros_input ::= TEXT_ALIGN IGUAL COMILLAS align COMILLAS 
            {
              Object RESULT =null;
		int alileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aliright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ali = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 String tmp = " text-align:  "+ ali  +";  "   ; listParametro.add(tmp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_input",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // parametros_input ::= COLOR IGUAL COMILLAS colors COMILLAS 
            {
              Object RESULT =null;
		int colleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object col = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 String tmp = " color:  "+ col+"  ; "         ; listParametro.add(tmp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_input",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // parametros_input ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_input",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // type_input ::= TEXT 
            {
              Object RESULT =null;
		 RESULT = "text"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_input",78, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // type_input ::= NUMBER 
            {
              Object RESULT =null;
		 RESULT = "number"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_input",78, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // type_input ::= RADIO 
            {
              Object RESULT =null;
		 RESULT = "radio"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_input",78, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // type_input ::= CHECKBOX 
            {
              Object RESULT =null;
		 RESULT = "checkbox"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_input",78, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // type_input ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_input",78, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // paramsSpam ::= CORCHETE_IZQ parametros_spam CORCHETE_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramsSpam",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // paramsSpam ::= paramsSpam CORCHETE_IZQ parametros_spam CORCHETE_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramsSpam",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // parametros_spam ::= COLOR IGUAL COMILLAS colors COMILLAS 
            {
              Object RESULT =null;
		int colleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object col = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 String tmp =" color:  "+ (String) col+"  ; " ; listParametro.add(tmp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_spam",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // parametros_spam ::= FONT_SIZE IGUAL COMILLAS PIXEL COMILLAS 
            {
              Object RESULT =null;
		int pixleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pixright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object pix = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 String tmp =" font-size: "+(String) pix +" ; "; listParametro.add(tmp);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_spam",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // parametros_spam ::= FONT_FAMI IGUAL COMILLAS font COMILLAS 
            {
              Object RESULT =null;
		int fonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fonright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object fon = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 String tmp =" font-family: "+(String) fon +" ; "; listParametro.add(tmp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_spam",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // parametros_spam ::= TEXT_ALIGN IGUAL COMILLAS align COMILLAS 
            {
              Object RESULT =null;
		int alileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aliright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ali = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 String tmp =" text-align: "+(String) ali+" ; "; listParametro.add(tmp);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_spam",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // parametros_spam ::= ID IGUAL COMILLAS IDENTIFICADOR COMILLAS 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 String tmp = "id = \""+ide+"\""; listAtributo.add(tmp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_spam",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // parametros_spam ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_spam",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // colors ::= BLACK 
            {
              Object RESULT =null;
		int blackleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blackright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object black = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =black ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("colors",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // colors ::= OLIVE 
            {
              Object RESULT =null;
		int oliveleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oliveright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object olive = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =olive ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("colors",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // colors ::= TEAL 
            {
              Object RESULT =null;
		int tealleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tealright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object teal = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =teal ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("colors",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // colors ::= RED 
            {
              Object RESULT =null;
		int redleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int redright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object red = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =red ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("colors",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // colors ::= BLUE 
            {
              Object RESULT =null;
		int blueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object blue = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =blue ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("colors",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // colors ::= MARRON 
            {
              Object RESULT =null;
		int marronleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int marronright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object marron = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT ="brown" ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("colors",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // colors ::= NAVY 
            {
              Object RESULT =null;
		int navyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int navyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object navy = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =navy ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("colors",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // colors ::= GRAY 
            {
              Object RESULT =null;
		int grayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int grayright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object gray = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =gray ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("colors",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // colors ::= LIME 
            {
              Object RESULT =null;
		int limeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int limeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lime = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =lime ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("colors",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // colors ::= FUCHSIA 
            {
              Object RESULT =null;
		int fuchsialeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fuchsiaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fuchsia = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =fuchsia ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("colors",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // colors ::= GREEN 
            {
              Object RESULT =null;
		int greenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int greenright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object green = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =green ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("colors",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // colors ::= WHITE 
            {
              Object RESULT =null;
		int whiteleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int whiteright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object white = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =white ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("colors",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // colors ::= PURPLE 
            {
              Object RESULT =null;
		int purpleleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int purpleright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object purple = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =purple ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("colors",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // colors ::= SILVER 
            {
              Object RESULT =null;
		int silverleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int silverright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object silver = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =silver ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("colors",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // colors ::= YELLOW 
            {
              Object RESULT =null;
		int yellowleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yellowright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object yellow = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =yellow ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("colors",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // colors ::= AQUA 
            {
              Object RESULT =null;
		int aqualeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aquaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object aqua = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =aqua ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("colors",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // colors ::= HEXADECIMAL 
            {
              Object RESULT =null;
		int hexaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hexaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hexa = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =hexa ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("colors",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // colors ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("colors",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // align ::= LEFT 
            {
              Object RESULT =null;
		int lefleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lefright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lef = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= lef; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("align",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // align ::= RIGHT 
            {
              Object RESULT =null;
		int rigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rigright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rig = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= rig; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("align",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // align ::= CENTER 
            {
              Object RESULT =null;
		int cenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cenright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cen = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= cen; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("align",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // align ::= JUSTIFY 
            {
              Object RESULT =null;
		int jusleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int jusright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object jus = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= jus; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("align",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // align ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("align",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // font ::= COURIER 
            {
              Object RESULT =null;
		int couleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int couright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cou = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= cou ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("font",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // font ::= VERDANA 
            {
              Object RESULT =null;
		int verleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int verright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ver = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= ver ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("font",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // font ::= ARIAL 
            {
              Object RESULT =null;
		int arileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ariright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ari = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= ari ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("font",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // font ::= GENEVA 
            {
              Object RESULT =null;
		int genleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int genright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object gen = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= gen ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("font",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // font ::= SANS_SERIF 
            {
              Object RESULT =null;
		int sanleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sanright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object san = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= san ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("font",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // font ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("font",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
