package com.zapil.app; 
import java_cup.runtime.*;
import java.util.*;


parser code{: 

    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 

       // PanelReporte.agregarError(new Errores("Sintactico",String.valueOf(s.value),"no se esperaba: "+String.valueOf( s.value), s.left, s.right));
    } 
    /**
     * Método al que se llama cuando se identifica un error sintáctico en el que 
     * ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido.");

    }

   // para el objeto captcha
        private Captcha captcha;

        public Captcha getCaptcha(){
            return captcha;
        }

    /// lista de etiqueta

        private ArrayList<Etiqueta> listaEtiqueta = new List<Etiqueta>();

         public ArrayList<Etiqueta> getListEtiqueta(){
          return listaEtiqueta;
         }






                 /// funcion para distribuir los parametros de una etiqueta: 

            public String separarAtributos(String paramsSpam) {

            String finalResult = "";
            StringBuilder attributesResult = new StringBuilder();
            StringBuilder styleResult = new StringBuilder();

            // Atributos específicos
            String[] attributeNames = {"id", "src", "width", "height", "alt", "class", "cols", "rows", "type"};

            // Buscar y separar los atributos específicos
            for (String attr : attributeNames) {
                int attrStart = paramsSpam.indexOf(attr + "=");
                if (attrStart != -1) {
                    // Encontrar el final del atributo (busca el punto y coma o el final de la cadena)
                    int attrEnd = paramsSpam.indexOf(";", attrStart);
                    if (attrEnd == -1) {
                        attrEnd = paramsSpam.length();
                    }

                    // Extraer el atributo
                    String attribute = paramsSpam.substring(attrStart, attrEnd).trim();
                    attributesResult.append(attribute).append(" ");

                    // Remover el atributo del string original
                    paramsSpam = paramsSpam.replace(attribute + ";", "").trim();
                }
            }

            // Cualquier cosa que quede en paramsSpam se considera como parte del estilo
            if (!paramsSpam.isEmpty()) {
                styleResult.append("style=\"").append(paramsSpam.trim()).append("\"");
            }

            // Combinar los resultados de los atributos y el estilo
            finalResult = attributesResult.toString().trim() + " " + styleResult.toString().trim();

            return finalResult.trim();
        }

    :}


terminal COMILLAS ,LLAVE_IZQ ,LLAVE_DER ,CORCHETE_IZQ ,CORCHETE_DER ,PAR_IZQ ,PAR_DER ,MENOR ,MAYOR ,HTML ,HTML_C ,HEAD ,HEAD_C ,TITLE ,TITLE_C ,LINK ,LINK_C ,BODY ,BODY_C ,SPAM ,SPAN_C;
terminal INPUT, INPUT_C, TEXTOAREA, TEXTOAREA_C, SELECTED ,SELECTED_C ,OPTION ,OPTION_C ,DIV ,DIV_C ,IMG ,IMG_C ,BR ,BR_C ,BUTTON ,BUTTON_C ,H1 ,H1_C ,P ,P_C, HREF, BACKGROUND;
terminal BLACK, OLIVE, TEAL, RED, BLUE, MARRON, NAVY, GRAY, LIME, FUCHSIA, GREEN, WHITE, PURPLE, SILVER, YELLOW, AQUA, HEXADECIMAL;
terminal COLOR, FONT_SIZE, PIXEL, FONT_FAMI, COURIER, VERDANA, ARIAL, GENEVA, SANS_SERIF, TEXT_ALIGN, LEFT, RIGHT, CENTER, JUSTIFY, TYPE, TEXT, NUMBER, RADIO, CHECKBOX, ID, NAME, COLS, ROWS, CLASS, SRC, WIDTH, HEIGHT, ALT, ONCLICK;
terminal SCRIPTING, SCRIPTING_C, ON_LOAD, INTEGER, DECIMAL, BOOLEAN, CHAR, STRING, COMPARACION, DESIGUALDAD, MENOR_IGUAL, MAYOR_IGUAL, OR, AND, NOT, IGUAL, SUMA, RESTA, PLUS, DIVISION,  ASC, DESC;
terminal LETIMPAR_NUM, REVERSE, CARACTER_RAMD, NUM_ALEATORIO, ALERT_INFO, EXIT, REDIRECT, INIT, IF, THEN, END, ELSE, REPEAT, HUNTIL, INSERT, WHILE, THENWHILE;
terminal PAREN_IZQ, PAREN_DER, COMA, MULTIPLICACION, OPERADOR_ARITMETICO, OPERADOR_RELACIONAL, OPERADOR_LOGICO;


terminal FUNTION, COMILLA_SIMPLE, DOS_PUNTOS, CADENA, TRUE, FALSE, ENTERO, PUNTO_COMA, IDENTIFICADOR, NUMERO, ROW, COLUMN, GLOBAL;
terminal CHARS, VALUE;

non terminal iniciar, body, colors, font, align, etiqueta, etiq, paramsSpam, parametros_spam;
non terminal clase, script, options, insert;
non terminal funcion, on_load, background;
non terminal head, link, title, lista_instrucciones, instruccion, condicion, condicion_relacional, condicion_logica, llamada_funcion_booleana;
non terminal ciclo_repeat, inicializacion, condicion_limite, expresion_numerica, expresion_aritmetica, tipo_variable, lista_parametros, parametro;
non terminal ciclo_while, expresion_booleana, bloque_instrucciones, instruccion_simple;
non terminal declaracion, modo, charComa, reglaChar, decimalComa, reglaDecimal, booleanComa, reglaBoolean, stringComa, reglaString, integerComa, reglaInteger, bool, separarAtributos;
non terminal paramsP, parametros_P, paramsH1, parametros_H1, paramsButton, parametros_Button, paramsImg, parametros_Img, paramsDiv, parametros_Div, paramsSelect, parametros_Select, paramsTextoArea, parametros_TextoArea, paramsInput, parametros_input;
non terminal opt;

non terminal sentenciaIf, clicloRepeat, cicloWhile, sentencia_else_if, sentencia_else, expresion, type_input;


iniciar ::=MENOR HTML CORCHETE_IZQ ID IGUAL COMILLAS IDENTIFICADOR:id COMILLAS CORCHETE_DER
        CORCHETE_IZQ NAME IGUAL COMILLAS CADENA:nombre COMILLAS CORCHETE_DER MAYOR  
        head:he
        link:li
        title:ti
        body:bo

        MENOR HTML_C MAYOR

{:      // Crear el objeto Captcha con los datos recopilados
       captcha  = new Captcha(id, nombre, he, li, ti, bo.background, bo.etiquetas);
    
:};
 
head::= MENOR HEAD MAYOR  MENOR  MENOR HEAD_C MAYOR
        {:  
        RESULT = "head " ;
        :};

link::= LINK CORCHETE_IZQ HREF IGUAL COMILLAS CADENA:txt COMILLAS CORCHETE_DER MAYOR  MENOR LINK_C MAYOR
    {:  
        
        RESULT = txt;
    :};

title::= MENOR TITLE MAYOR CADENA:txt MENOR TITLE_C MAYOR   
        {:  
        // Guardar el texto del título
        RESULT = txt;
    :};

body::= MENOR BODY background:bg MAYOR etiq:eti MENOR BODY_C MAYOR 
    {:  
        // Crear un objeto para almacenar el contenido del body
        BodyContent bodyContent = new BodyContent();
        bodyContent.background = (String) bg;
        bodyContent.etiquetas = (List<Etiqueta>) eti;
        RESULT = bodyContent;
    :};
        
background ::=  CORCHETE_IZQ BACKGROUND IGUAL COMILLAS colors:col COMILLAS CORCHETE_DER {: RESULT=" background-color: \" "+ col+"  \" ;"  ;  :}
                |/* vacio */ {: RESULT="" :};

etiq ::=   etiqueta :e 
        {: 

         List<Etiqueta> lista = new ArrayList<>();
        lista.add((Etiqueta) e);
        RESULT = lista; 

        :}
        | etiq:e1 etiqueta:e2 {:

        e1.add((Etiqueta) e2); 
        RESULT = e1; 

        :}
        | error  ;

etiqueta ::= MENOR SPAM paramsSpam:params MAYOR TEXT:txt MENOR SPAN_C MAYOR               
        {:  String parametro = separarAtributos((String) params)  ; RESULT= new Etiqueta("spam",(String) parametro ,(String) txt); :}  
        | MENOR INPUT paramsInput:params MAYOR  MENOR INPUT_C MAYOR                      
        {:  String parametro = separarAtributos((String) params) ;  RESULT= new Etiqueta ("input",(String) parametro ,null); :}
        | MENOR TEXTOAREA paramsTextoArea:params MAYOR  MENOR TEXTOAREA_C MAYOR           
        {:  String parametro = separarAtributos((String) params)  ; RESULT= new Etiqueta("textarea",(String) parametro ,null); :}    
        | MENOR SELECTED paramsSelect:params MAYOR opt:ot MENOR SELECTED_C MAYOR     
        {:  
        
                String parametro = separarAtributos((String) params); 
                Etiqueta etiquetaSelect = new Etiqueta("select", parametro, null);
                // Agregar todas las opciones como hijos de la etiqueta select
                for (Etiqueta e : (List<Etiqueta>)  ot) {
                    etiquetaSelect.agregarHijo(e);
                }

                RESULT = etiquetaSelect;

         :}        
        | MENOR DIV paramsDiv:params MAYOR etiq:contenido MENOR DIV_C MAYOR                
        {: 
         String parametro = separarAtributos((String) params)  ; 

                Etiqueta etiquetaDiv = new Etiqueta("div",(String) parametro ,null);
                      // Agregar todas las etiquetas hijas al div
                for (Etiqueta e : (List<Etiqueta>)  contenido) {
                    etiquetaDiv.agregarHijo(e);
                }
                RESULT = etiquetaDiv;
         :}
        | MENOR IMG MAYOR paramsImg:params MENOR IMG_C:img MAYOR                          
        {:  String parametro = separarAtributos((String) params)  ; RESULT= new Etiqueta("img",(String) parametro ,(String) img); :}     
        | MENOR BR MAYOR                                                           
        {:  RESULT= new Etiqueta("br",null ,null); :}
        | MENOR BUTTON paramsButton:params MAYOR TEXT:txt MENOR BUTTON_C MAYOR            
        {:  String parametro = separarAtributos((String) params)  ; RESULT= new Etiqueta("button",(String) parametro ,(String) txt); :}  
        | MENOR H1 paramsH1:params MAYOR TEXT:txt MENOR H1_C MAYOR                         
        {:  String parametro = separarAtributos((String) params)  ; RESULT= new Etiqueta("h1",(String) parametro ,(String) txt ); :}  
        | MENOR P paramsP:params MAYOR TEXT:txt MENOR P_C MAYOR                           
        {:  String parametro = separarAtributos((String) params)  ; RESULT= new Etiqueta("p",(String) parametro , (String) txt); :};      

opt ::= options:o 
        {:   
         List<Etiqueta> lista = new ArrayList<>();
         lista.add((Etiqueta)o);
         RESULT = lista;
         :}
        |opt:prev options:o {: prev.add(o);   RESULT = prev;  :};

options ::=  MENOR OPTION VALUE IGUAL COMILLAS TEXT:txt COMILLAS MAYOR  
        {: 
        Etiqueta etiquetaOption = new Etiqueta("option",(String) txt,null );
        RESULT = etiquetaOption;
    :};

/*
script ::= MENOR SCRIPTING MAYOR FUNTION CORCHETE_IZQ funcion CORCHETE_DER MENOR SCRIPTING_C MAYOR
        | MENOR SCRIPTING MAYOR ON_LOAD CORCHETE_IZQ on_load CORCHETE_DER MENOR SCRIPTING_C MAYOR
        | error;


funcion ::=  declaracion
        | sentenciaIf
        | clicloRepeat
        | cicloWhile
        | insert
        | error;



//***********************
//********+ IF +*********
//***********************
//***********************



sentenciaIf ::= IF PAREN_IZQ condicion PAREN_DER THEN bloque_instrucciones 
               | IF PAREN_IZQ condicion PAREN_DER THEN bloque_instrucciones sentencia_else_if 
               | IF PAREN_IZQ condicion PAREN_DER THEN bloque_instrucciones sentencia_else;

sentencia_else_if ::= ELSE IF PAREN_IZQ condicion PAREN_DER THEN bloque_instrucciones 
                    | ELSE IF PAREN_IZQ condicion PAREN_DER THEN bloque_instrucciones sentencia_else_if
                    | ELSE IF PAREN_IZQ condicion PAREN_DER THEN bloque_instrucciones sentencia_else;

sentencia_else ::= ELSE bloque_instrucciones;

// Producción para un bloque de instrucciones que comienza con INIT y termina con END 
bloque_instrucciones ::= INIT LLAVE_IZQ DOS_PUNTOS lista_instrucciones DOS_PUNTOS LLAVE_DER END
                       | lista_instrucciones; 

// Lista de instrucciones puede ser cero o más 
lista_instrucciones ::= lista_instrucciones;
                       



// Esta es una definición simplificada de una instrucción 
instruccion ::= IDENTIFICADOR PUNTO_COMA;

// Ejemplo de una expresión booleana 
expresion_booleana ::= TRUE
                     | FALSE
                     | IDENTIFICADOR;


// Producción principal para las condiciones del IF
condicion ::= condicion_relacional
            | condicion_logica
            | llamada_funcion_booleana
            | PAR_IZQ condicion PAR_DER;  // Permite agrupar expresiones

// Producciones para comparaciones relacionales
condicion_relacional ::= expresion COMPARACION expresion
                       | expresion DESIGUALDAD expresion
                       | expresion MENOR expresion
                       | expresion MAYOR expresion
                       | expresion MENOR_IGUAL expresion
                       | expresion MAYOR_IGUAL expresion;
                 

// Producciones para operaciones lógicas
condicion_logica ::= condicion AND condicion
                   | condicion OR condicion
                   | NOT condicion;

// Producción para llamadas a funciones que retornan booleano
llamada_funcion_booleana ::= IDENTIFICADOR PAR_IZQ lista_parametros PAR_DER;


lista_parametros ::= lista_parametros COMA expresion
                   | expresion;


// Producción para una expresión (puede ser un valor numérico, identificador, etc.)
expresion ::= NUMERO
            | IDENTIFICADOR
            | llamada_funcion_booleana
            | expresion_aritmetica;

// Producción para una expresión aritmética (opcional, si se quieren manejar operaciones)
expresion_aritmetica ::= expresion SUMA expresion
                       | expresion RESTA expresion
                       | expresion MULTIPLICACION expresion
                       | expresion DIVISION expresion
                       | PAR_IZQ expresion_aritmetica PAR_DER;


//***********************
//******+ REPEAT +*******
//***********************
//***********************


// Producción principal para el ciclo REPEAT
ciclo_repeat ::= REPEAT PAR_IZQ inicializacion PAR_DER HUNTIL PAR_IZQ condicion_limite PAR_DER bloque_instrucciones;

// Producción para la inicialización (asignación o declaración)
inicializacion ::= tipo_variable IDENTIFICADOR IGUAL expresion // Declaración con tipo
                 | IDENTIFICADOR IGUAL expresion;               // Asignación simple

// Producción para el límite de la condición
condicion_limite ::= expresion_numerica // Puede ser una expresión numérica
                   | IDENTIFICADOR;     // O una variable

// Producción para el bloque de instrucciones
bloque_instrucciones ::= INIT LLAVE_IZQ lista_instrucciones LLAVE_DER END
                       | instruccion_simple;

// Producción para lista de instrucciones en un bloque
lista_instrucciones ::= instruccion_simple
                      | lista_instrucciones instruccion_simple;

// Producción para una instrucción simple
instruccion_simple ::= IDENTIFICADOR PAR_IZQ lista_parametros PAR_DER PUNTO_COMA
                     | IDENTIFICADOR IGUAL expresion PUNTO_COMA
                     | expresion PUNTO_COMA;

// Producción para el tipo de variable en una declaración
tipo_variable ::= INTEGER
                | DECIMAL
                | BOOLEAN
                | CHAR
                | STRING;

// Producción para expresiones numéricas
expresion_numerica ::= expresion
                     | PAR_IZQ expresion PAR_DER;

// Producción para la expresión genérica
expresion ::= expresion OPERADOR_ARITMETICO expresion
            | NUMERO
            | IDENTIFICADOR
            | PAR_IZQ expresion PAR_DER;

// Producción para la lista de parámetros en una llamada de función
lista_parametros ::= parametro
                   | lista_parametros COMA parametro;

// Producción para un parámetro
parametro ::= IDENTIFICADOR
            | expresion;
            


//***********************
//****+ CICLO WHILE +****
//***********************
//***********************


ciclo_while ::= WHILE PAR_IZQ condicion PAR_DER  THENWHILE bloque_instrucciones;

// Producción para la condición del ciclo WHILE
condicion ::= expresion_booleana
            | IDENTIFICADOR; // Puede ser una expresión booleana o una variable booleana

// Producción para el bloque de instrucciones
bloque_instrucciones ::= INIT LLAVE_IZQ lista_instrucciones LLAVE_DER END
                       | instruccion_simple;

// Producción para la lista de instrucciones dentro del bloque
lista_instrucciones ::= instruccion_simple
                      | lista_instrucciones instruccion_simple;

// Producción para una instrucción simple
instruccion_simple ::= IDENTIFICADOR PAR_IZQ lista_parametros PAR_DER PUNTO_COMA
                     | IDENTIFICADOR IGUAL expresion PUNTO_COMA
                     | expresion PUNTO_COMA;

// Producción para expresiones booleanas
expresion_booleana ::= expresion OPERADOR_RELACIONAL expresion
                     | expresion OPERADOR_LOGICO expresion_booleana
                     | TRUE
                     | FALSE
                     | PAR_IZQ expresion_booleana PAR_DER;

// Producción para la expresión genérica
expresion ::= expresion OPERADOR_ARITMETICO expresion
            | NUMERO
            | IDENTIFICADOR
            | PAR_IZQ expresion PAR_DER;

// Producción para la lista de parámetros en una llamada de función
lista_parametros ::= parametro
                   | lista_parametros COMA parametro;

// Producción para un parámetro
parametro ::= IDENTIFICADOR
            | expresion;



//***********************
//***+ FUNCIONES CLC +***
//***********************
//***********************






//***********************
//****+ DECLARACION +****
//***********************
//***********************



declaracion ::= INTEGER modo IDENTIFICADOR IGUAL ENTERO PUNTO_COMA
        | INTEGER modo IDENTIFICADOR PUNTO_COMA
        | INTEGER modo integerComa PUNTO_COMA
        | DECIMAL modo IDENTIFICADOR IGUAL DECIMAL PUNTO_COMA
        | DECIMAL modo  IDENTIFICADOR  PUNTO_COMA
        | DECIMAL modo decimalComa  PUNTO_COMA
        | BOOLEAN modo IDENTIFICADOR IGUAL bool PUNTO_COMA
        | BOOLEAN modo IDENTIFICADOR PUNTO_COMA
        | BOOLEAN modo booleanComa PUNTO_COMA
        | CHAR modo IDENTIFICADOR IGUAL CHARS PUNTO_COMA
        | CHAR modo IDENTIFICADOR PUNTO_COMA
        | CHAR modo charComa PUNTO_COMA
        | STRING modo IDENTIFICADOR IGUAL CADENA PUNTO_COMA
        | STRING modo IDENTIFICADOR PUNTO_COMA
        | STRING modo stringComa PUNTO_COMA
        | IDENTIFICADOR
        | error;


charComa::= IDENTIFICADOR
        | IDENTIFICADOR COMA charComa
        | IDENTIFICADOR IGUAL reglaChar COMA charComa
        | error;

reglaChar::= CHARS
        | CHARS SUMA NUMERO    
        | CHARS SUMA CADENA
        | CHARS SUMA DECIMAL
        | CHARS SUMA CHARS
        | CHARS SUMA bool
        | CHARS SUMA IDENTIFICADOR
        | CHARS RESTA NUMERO
        | CHARS RESTA DECIMAL
        | CHARS RESTA CHARS
        | CHARS RESTA IDENTIFICADOR
        | CHARS MULTIPLICACION NUMERO
        | CHARS MULTIPLICACION DECIMAL
        | CHARS MULTIPLICACION CHARS
        | CHARS MULTIPLICACION bool
        | CHARS MULTIPLICACION IDENTIFICADOR
        | CHARS DIVISION INTEGER
        | CHARS DIVISION DECIMAL
        | CHARS DIVISION CHARS
        | CHARS DIVISION bool 
        | CHARS DIVISION IDENTIFICADOR
        | error;


decimalComa::= IDENTIFICADOR
        | IDENTIFICADOR COMA decimalComa
        | IDENTIFICADOR IGUAL reglaDecimal COMA decimalComa
        | error;

reglaDecimal::= DECIMAL
        | DECIMAL SUMA NUMERO    
        | DECIMAL SUMA CADENA
        | DECIMAL SUMA DECIMAL
        | DECIMAL SUMA CHARS
        | DECIMAL SUMA bool
        | DECIMAL SUMA IDENTIFICADOR
        | DECIMAL RESTA NUMERO
        | DECIMAL RESTA DECIMAL
        | DECIMAL RESTA CHARS
        | DECIMAL RESTA bool
        | DECIMAL RESTA IDENTIFICADOR
        | DECIMAL MULTIPLICACION NUMERO
        | DECIMAL MULTIPLICACION DECIMAL
        | DECIMAL MULTIPLICACION CHARS
        | DECIMAL MULTIPLICACION bool
        | DECIMAL MULTIPLICACION IDENTIFICADOR
        | DECIMAL DIVISION INTEGER
        | DECIMAL DIVISION DECIMAL
        | DECIMAL DIVISION CHARS
        | DECIMAL DIVISION bool 
        | DECIMAL DIVISION IDENTIFICADOR
        | error;

booleanComa::= IDENTIFICADOR
        | IDENTIFICADOR COMA booleanComa
        | IDENTIFICADOR IGUAL reglaBoolean COMA booleanComa
        | error;


reglaBoolean::= bool
        | bool SUMA NUMERO    
        | bool SUMA DECIMAL
        | bool SUMA CHARS
        | bool SUMA bool
        | bool SUMA IDENTIFICADOR
        | bool RESTA NUMERO
        | bool RESTA DECIMAL
        | bool RESTA IDENTIFICADOR
        | bool MULTIPLICACION NUMERO
        | bool MULTIPLICACION DECIMAL
        | bool MULTIPLICACION CHARS
        | bool MULTIPLICACION bool
        | bool MULTIPLICACION IDENTIFICADOR
        | bool DIVISION INTEGER
        | bool DIVISION DECIMAL
        | bool DIVISION CHARS
        | bool DIVISION IDENTIFICADOR
        | error;

stringComa::= IDENTIFICADOR
        | IDENTIFICADOR COMA stringComa
        | IDENTIFICADOR IGUAL reglaString COMA stringComa
        | error;


reglaString::= CADENA
        | CADENA SUMA NUMERO   
        | CADENA SUMA CADENA 
        | CADENA SUMA DECIMAL
        | CADENA SUMA CHARS
        | CADENA SUMA bool
        | CADENA SUMA IDENTIFICADOR
        | error;

integerComa::= IDENTIFICADOR 
        | IDENTIFICADOR COMA integerComa 
        | IDENTIFICADOR IGUAL reglaInteger COMA integerComa 
        | error;


reglaInteger::= ENTERO
        | ENTERO SUMA NUMERO
        | ENTERO SUMA CADENA
        | ENTERO SUMA DECIMAL
        | ENTERO SUMA CHARS
        | ENTERO SUMA bool
        | ENTERO SUMA IDENTIFICADOR
        | ENTERO RESTA NUMERO
        | ENTERO RESTA DECIMAL
        | ENTERO RESTA CHARS
        | ENTERO RESTA bool
        | ENTERO RESTA IDENTIFICADOR
        | ENTERO MULTIPLICACION NUMERO
        | ENTERO MULTIPLICACION DECIMAL
        | ENTERO MULTIPLICACION CHARS
        | ENTERO MULTIPLICACION bool
        | ENTERO MULTIPLICACION IDENTIFICADOR
        | ENTERO DIVISION INTEGER
        | ENTERO DIVISION DECIMAL
        | ENTERO DIVISION CHARS
        | ENTERO DIVISION bool
        | ENTERO DIVISION IDENTIFICADOR
        | error;


bool::= TRUE   {: RESULT = "true"; :}
        |FALSE {: RESULT = "false"; :}
        | error;

modo ::= GLOBAL {: RESULT = "@global"; :}
        | error;

*/

paramsP ::= CORCHETE_IZQ parametros_P:params CORCHETE_DER {: RESULT = params; :}
                | paramsP:prev CORCHETE_IZQ parametros_P:params CORCHETE_DER {: RESULT = prev + " " + params; :};

parametros_P ::= ID IGUAL COMILLAS IDENTIFICADOR:ide  COMILLAS   {: RESULT= "id=\""+ide+"\"";  :}
                | FONT_SIZE IGUAL COMILLAS PIXEL:pix COMILLAS    {: RESULT= " font-size: \" "+ pix +"; \" "   ; :}      
                | FONT_FAMI IGUAL COMILLAS font:fon COMILLAS     {: RESULT= " font-family: \" "+ fon +"; \" " ; :}      
                | TEXT_ALIGN IGUAL COMILLAS align:ali COMILLAS   {: RESULT= " text-align: \" "+ ali  +"; \" " ; :}              
                | COLOR IGUAL COMILLAS colors:col COMILLAS       {: RESULT= " color: \" "+ col+"  \" ;"  ; :}    
                | error;

paramsH1 ::=    CORCHETE_IZQ parametros_H1:params CORCHETE_DER {: RESULT = params; :}
                | paramsH1:prev CORCHETE_IZQ parametros_H1:params CORCHETE_DER {: RESULT = prev + " " + params; :};

parametros_H1 ::= ID IGUAL COMILLAS IDENTIFICADOR:ide  COMILLAS   {: RESULT= "id=\""+ide+"\"";  :}
                | FONT_SIZE IGUAL COMILLAS PIXEL:pix COMILLAS     {: RESULT= " font-size: \" "+ pix +"; \" "   ; :}         
                | FONT_FAMI IGUAL COMILLAS font:fon COMILLAS      {: RESULT= " font-family: \" "+ fon +"; \" " ; :}        
                | TEXT_ALIGN IGUAL COMILLAS align:ali COMILLAS    {: RESULT= " text-align: \" "+ ali  +"; \" " ; :}                  
                | COLOR IGUAL COMILLAS colors:col COMILLAS        {: RESULT= " color: \" "+ col+"  \" ;"  ; :}      
                | error;


paramsButton ::= CORCHETE_IZQ parametros_Button:params CORCHETE_DER {: RESULT = params; :}
                | paramsButton:prev CORCHETE_IZQ parametros_Button:params CORCHETE_DER {: RESULT = prev + " " + params; :};
               

parametros_Button ::= ID IGUAL COMILLAS IDENTIFICADOR:ide  COMILLAS   {: RESULT= "id=\""+ide+"\"";  :}
                | FONT_SIZE IGUAL COMILLAS PIXEL:pix COMILLAS     {: RESULT= " font-size: \" "+ pix +"; \" "   ; :}          
                | FONT_FAMI IGUAL COMILLAS font:fon COMILLAS      {: RESULT= " font-family: \" "+ fon +"; \" " ;  :}     
                | TEXT_ALIGN IGUAL COMILLAS align:ali COMILLAS    {: RESULT= " text-align: \" "+ ali  +"; \" " ;  :}           
                | COLOR IGUAL COMILLAS colors:col COMILLAS        {: RESULT= " color: \" "+ col+"  \" ;"  ; :}   
                | BACKGROUND IGUAL COMILLAS colors:bac COMILLAS   {: RESULT= " background-color: \" "+ bac+"  \" ;"  ;  :}        
               // | ONCLICK IGUAL COMILLAS funcion: COMILLAS        {: RESULT=  :}      
               // | ONCLICK IGUAL COMILLAS on_load: COMILLAS        {: RESULT=  :}     
                | error;


paramsImg ::=  CORCHETE_IZQ parametros_Img:params CORCHETE_DER {: RESULT = params; :}
                | paramsImg:prev CORCHETE_IZQ parametros_Img:params CORCHETE_DER {: RESULT = prev + " " + params; :};
             

parametros_Img ::= ID IGUAL COMILLAS IDENTIFICADOR:ide COMILLAS  {: RESULT= "id=\""+ide+"\""; :}         
                | SRC IGUAL COMILLAS TEXT:txt COMILLAS           {: RESULT= "src=\""+txt+"\""; :}    
                | WIDTH IGUAL COMILLAS NUMERO:num COMILLAS       {: RESULT= "width=\""+num+"\""; :}       
                | HEIGHT IGUAL COMILLAS NUMERO:num COMILLAS      {: RESULT= "height=\""+num+"\""; :}        
                | ALT IGUAL COMILLAS TEXT:txt COMILLAS           {: RESULT= "alt=\""+txt+"\""; :}             
                | error;

paramsDiv ::=   CORCHETE_IZQ parametros_Div:params CORCHETE_DER {: RESULT = params; :}
                | paramsDiv:prev CORCHETE_IZQ parametros_Div:params CORCHETE_DER {: RESULT = prev + " " + params; :};
              

parametros_Div ::= ID IGUAL COMILLAS IDENTIFICADOR:ide  COMILLAS   {: RESULT= "id=\""+ide+"\"";  :}
                | CLASS IGUAL COMILLAS clase:cls   COMILLAS        {: RESULT= "class=\""+cls+"\""; :}
                | FONT_SIZE IGUAL COMILLAS PIXEL:pix  COMILLAS     {: RESULT= " font-size: \" "+ pix +"; \" "   ; :}           
                | FONT_FAMI IGUAL COMILLAS font:fon  COMILLAS      {: RESULT= " font-family: \" "+ fon +"; \" " ; :}       
                | TEXT_ALIGN IGUAL COMILLAS align:ali  COMILLAS    {: RESULT= " text-align: \" "+ ali  +"; \" " ; :}            
                | COLOR IGUAL COMILLAS colors:col  COMILLAS        {: RESULT= " color: \" "+ col+"  \" ;"  ; :}     
                | BACKGROUND IGUAL COMILLAS colors:col  COMILLAS   {: RESULT= " background-color: \" "+ col+"  \" ;"  ; :}          
                | error;

clase ::= ROW     {: RESULT= "row "; :}  
        | COLUMN  {: RESULT= " col-1"; :} 
        | error;


paramsSelect ::= CORCHETE_IZQ parametros_Select:params CORCHETE_DER  {: RESULT = params; :}
                | paramsSelect:prev CORCHETE_IZQ parametros_Select:params CORCHETE_DER  {: RESULT = prev + " " + params; :};
              
 
parametros_Select ::= ID IGUAL COMILLAS IDENTIFICADOR:ide   COMILLAS  {: RESULT= "id=\""+ide+"\"";  :} 
                | FONT_SIZE IGUAL COMILLAS PIXEL :pix   COMILLAS      {: RESULT= " font-size: \" "+ pix +"; \" "   ; :}         
                | FONT_FAMI IGUAL COMILLAS font:fon   COMILLAS        {: RESULT= " font-family: \" "+ fon +"; \" " ; :}   
                | TEXT_ALIGN IGUAL COMILLAS align:ali   COMILLAS      {: RESULT= " text-align: \" "+ ali  +"; \" " ; :}     
                | COLOR IGUAL COMILLAS colors:col   COMILLAS          {: RESULT= " color: \" "+ col+"  \" ;"  ; :} 
                | error;


paramsTextoArea ::= CORCHETE_IZQ parametros_TextoArea:params CORCHETE_DER {: RESULT = params; :}
                | paramsTextoArea:prev CORCHETE_IZQ parametros_TextoArea:params CORCHETE_DER {: RESULT = prev + " " + params; :};
                

parametros_TextoArea ::= FONT_SIZE IGUAL COMILLAS PIXEL:pix COMILLAS   {: RESULT = " font-size: \" "+ pix +"; \" "   ; :}     
                        | FONT_FAMI IGUAL COMILLAS font:fon COMILLAS   {: RESULT = " font-family: \" "+ fon +"; \" " ; :}    
                        | TEXT_ALIGN IGUAL COMILLAS align:ali COMILLAS {: RESULT = " text-align: \" "+ ali  +"; \" " ; :}      
                        | ID IGUAL COMILLAS IDENTIFICADOR:ide COMILLAS {: RESULT = "id=\""+ide+"\""; :}       
                        | COLS IGUAL COMILLAS NUMERO:num COMILLAS      {: RESULT = "cols=\""+num+"\""; :}  
                        | ROWS IGUAL COMILLAS NUMERO:num COMILLAS      {: RESULT = "rows=\""+num+"\""; :} 
                        | error;
                        

paramsInput ::=  CORCHETE_IZQ parametros_input:params CORCHETE_DER  {: RESULT = params; :}
                | paramsInput:prev CORCHETE_IZQ parametros_input:params CORCHETE_DER  {: RESULT = prev + " " + params; :};
  

parametros_input ::= TYPE IGUAL COMILLAS type_input:type COMILLAS {: RESULT = "type=\""+type+"\""; :}            
                | ID IGUAL COMILLAS IDENTIFICADOR:ide COMILLAS    {: RESULT = "id=\""+ide+"\""; :}        
                | FONT_SIZE IGUAL COMILLAS PIXEL:pix COMILLAS     {: RESULT = " font-size: \" "+ pix   +"; \" "   ; :}   
                | FONT_FAMI IGUAL COMILLAS font:fon COMILLAS      {: RESULT = " font-family: \" "+ fon +"; \" "   ; :}  
                | TEXT_ALIGN IGUAL COMILLAS align:ali COMILLAS    {: RESULT = " text-align: \" "+ ali  +"; \" "   ; :}   
                | COLOR IGUAL COMILLAS colors:col COMILLAS        {: RESULT = " color: \" "+ col+"  \"; "  ; :}
                | error;

type_input ::= TEXT         {: RESULT = "text"; :}
                | NUMBER    {: RESULT = "number"; :}
                | RADIO     {: RESULT = "radio"; :}
                | CHECKBOX  {: RESULT = "checkbox"; :}
                | error;

paramsSpam ::=    CORCHETE_IZQ parametros_spam:params CORCHETE_DER  {: RESULT = params; :}
                | paramsSpam:prev CORCHETE_IZQ parametros_spam:params CORCHETE_DER {: RESULT = prev + " " + params; :};
              

parametros_spam ::= COLOR IGUAL COMILLAS colors:col COMILLAS    {: RESULT = " color: \" "+ col        +"  \"; "  ;:}       
                | FONT_SIZE IGUAL COMILLAS PIXEL:pix COMILLAS   {: RESULT = " font-size: \" "+ pix   +"; \" "  ;:}        
                | FONT_FAMI IGUAL COMILLAS font:fon COMILLAS    {: RESULT = " font-family: \" "+ fon +"; \" "  ;:}       
                | TEXT_ALIGN IGUAL COMILLAS align:ali COMILLAS  {: RESULT = " text-align: \" "+ ali  +"; \" "  ;:}         
                | ID IGUAL COMILLAS IDENTIFICADOR:ide COMILLAS  {: RESULT = " id = \" "+ ide +" \" "  ;:}         
                | error;

colors ::= BLACK       :black     {: RESULT =black ; :}         
            | OLIVE    :olive     {: RESULT =olive ; :}            
            | TEAL     :teal      {: RESULT =teal ; :}          
            | RED      :red       {: RESULT =red ; :}         
            | BLUE     :blue      {: RESULT =blue ; :}          
            | MARRON   :marron    {: RESULT ="brown" ; :}            
            | NAVY     :navy      {: RESULT =navy ; :}          
            | GRAY     :gray      {: RESULT =gray ; :}          
            | LIME     :lime      {: RESULT =lime ; :}          
            | FUCHSIA  :fuchsia   {: RESULT =fuchsia ; :}             
            | GREEN    :green     {: RESULT =green ; :}           
            | WHITE    :white     {: RESULT =white ; :}           
            | PURPLE   :purple    {: RESULT =purple ; :}            
            | SILVER   :silver    {: RESULT =silver ; :}            
            | YELLOW   :yellow    {: RESULT =yellow ; :}            
            | AQUA     :aqua      {: RESULT =aqua ; :}          
            | HEXADECIMAL:hexa    {: RESULT =hexa ; :}                 
            | error;    

align ::= LEFT      :lef  {: RESULT= lef; :}
        | RIGHT     :rig  {: RESULT= rig; :}           
        | CENTER    :cen  {: RESULT= cen; :}            
        | JUSTIFY   :jus  {: RESULT= jus; :}             
        | error;


font ::= COURIER        :cou  {: RESULT= cou ; :}         
        | VERDANA       :ver  {: RESULT= ver ; :}         
        | ARIAL         :ari  {: RESULT= ari ; :}       
        | GENEVA        :gen  {: RESULT= gen ; :}        
        | SANS_SERIF    :san  {: RESULT= san ; :}            
        | error;
                



