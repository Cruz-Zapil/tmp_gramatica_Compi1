
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.CruzZapil.CompiFinal.gramatica;

import java_cup.runtime.*;
import java.util.*;

import com.CruzZapil.CompiFinal.model.Captcha;
import com.CruzZapil.CompiFinal.model.etiqueta.Etiqueta;

import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return symbol.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\212\000\002\002\032\000\002\002\004\000\002\022" +
    "\011\000\002\023\016\000\002\024\011\000\002\003\012" +
    "\000\002\021\011\000\002\021\002\000\002\010\003\000" +
    "\002\010\004\000\002\010\003\000\002\007\012\000\002" +
    "\007\011\000\002\007\011\000\002\007\012\000\002\007" +
    "\012\000\002\007\011\000\002\007\005\000\002\007\012" +
    "\000\002\007\012\000\002\007\012\000\002\105\003\000" +
    "\002\105\004\000\002\015\012\000\002\065\005\000\002" +
    "\065\006\000\002\066\007\000\002\066\007\000\002\066" +
    "\007\000\002\066\007\000\002\066\007\000\002\066\003" +
    "\000\002\067\005\000\002\067\006\000\002\070\007\000" +
    "\002\070\007\000\002\070\007\000\002\070\007\000\002" +
    "\070\007\000\002\070\003\000\002\071\005\000\002\071" +
    "\006\000\002\072\007\000\002\072\007\000\002\072\007" +
    "\000\002\072\007\000\002\072\007\000\002\072\007\000" +
    "\002\072\003\000\002\073\005\000\002\073\006\000\002" +
    "\074\007\000\002\074\007\000\002\074\007\000\002\074" +
    "\007\000\002\074\007\000\002\074\003\000\002\075\005" +
    "\000\002\075\006\000\002\076\007\000\002\076\007\000" +
    "\002\076\007\000\002\076\007\000\002\076\007\000\002" +
    "\076\007\000\002\076\007\000\002\076\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\077\005" +
    "\000\002\077\006\000\002\100\007\000\002\100\007\000" +
    "\002\100\007\000\002\100\007\000\002\100\007\000\002" +
    "\100\003\000\002\101\005\000\002\101\006\000\002\102" +
    "\007\000\002\102\007\000\002\102\007\000\002\102\007" +
    "\000\002\102\007\000\002\102\007\000\002\102\003\000" +
    "\002\103\005\000\002\103\006\000\002\104\007\000\002" +
    "\104\007\000\002\104\007\000\002\104\007\000\002\104" +
    "\007\000\002\104\007\000\002\104\003\000\002\114\003" +
    "\000\002\114\003\000\002\114\003\000\002\114\003\000" +
    "\002\114\003\000\002\011\005\000\002\011\006\000\002" +
    "\012\007\000\002\012\007\000\002\012\007\000\002\012" +
    "\007\000\002\012\007\000\002\012\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01ee\000\004\013\005\001\002\000\004\002\u01f0\001" +
    "\002\000\004\015\006\001\002\000\004\007\007\001\002" +
    "\000\004\123\010\001\002\000\004\154\011\001\002\000" +
    "\004\004\012\001\002\000\004\223\013\001\002\000\004" +
    "\004\014\001\002\000\004\010\015\001\002\000\004\007" +
    "\016\001\002\000\004\124\017\001\002\000\004\154\020" +
    "\001\002\000\004\004\021\001\002\000\004\216\022\001" +
    "\002\000\004\004\023\001\002\000\004\010\024\001\002" +
    "\000\004\014\025\001\002\000\004\013\027\001\002\000" +
    "\004\023\036\001\002\000\004\017\030\001\002\000\004" +
    "\014\031\001\002\000\004\013\032\001\002\000\004\013" +
    "\033\001\002\000\004\020\034\001\002\000\004\014\035" +
    "\001\002\000\004\023\uffff\001\002\000\004\007\u01e5\001" +
    "\002\000\004\013\040\001\002\000\004\021\u01df\001\002" +
    "\000\004\013\043\001\002\000\004\013\u01dc\001\002\000" +
    "\004\025\044\001\002\000\006\007\046\014\ufffa\001\002" +
    "\000\004\014\077\001\002\000\004\056\047\001\002\000" +
    "\004\154\050\001\002\000\004\004\051\001\002\000\046" +
    "\003\065\057\057\060\060\061\056\062\062\063\061\064" +
    "\055\065\073\066\054\067\064\070\067\071\052\072\072" +
    "\073\074\074\066\075\070\076\053\077\071\001\002\000" +
    "\004\004\uff8a\001\002\000\004\004\uff85\001\002\000\004" +
    "\004\uff8d\001\002\000\004\004\uff8f\001\002\000\004\004" +
    "\uff92\001\002\000\004\004\uff94\001\002\000\004\004\uff93" +
    "\001\002\000\004\004\uff90\001\002\000\004\004\uff91\001" +
    "\002\000\004\004\075\001\002\000\004\004\uff8c\001\002" +
    "\000\004\004\uff83\001\002\000\004\004\uff87\001\002\000" +
    "\004\004\uff8b\001\002\000\004\004\uff86\001\002\000\004" +
    "\004\uff84\001\002\000\004\004\uff89\001\002\000\004\004" +
    "\uff8e\001\002\000\004\004\uff88\001\002\000\004\010\076" +
    "\001\002\000\004\014\ufffb\001\002\000\006\003\102\013" +
    "\103\001\002\000\004\013\u01d9\001\002\000\004\013\ufff9" +
    "\001\002\000\004\013\ufff7\001\002\000\026\027\113\031" +
    "\105\033\110\035\111\041\112\043\115\045\106\047\104" +
    "\051\114\053\107\001\002\000\004\007\u01af\001\002\000" +
    "\004\007\u0180\001\002\000\004\014\u017e\001\002\000\004" +
    "\007\u0159\001\002\000\004\007\u012f\001\002\000\004\007" +
    "\377\001\002\000\004\007\312\001\002\000\004\007\245" +
    "\001\002\000\004\007\164\001\002\000\004\014\116\001" +
    "\002\000\004\007\120\001\002\000\006\007\156\013\155" +
    "\001\002\000\016\003\122\123\121\130\126\131\125\132" +
    "\127\133\124\001\002\000\004\154\151\001\002\000\004" +
    "\010\uffc9\001\002\000\004\010\150\001\002\000\004\154" +
    "\144\001\002\000\004\154\140\001\002\000\004\154\134" +
    "\001\002\000\004\154\130\001\002\000\004\004\131\001" +
    "\002\000\004\224\132\001\002\000\004\004\133\001\002" +
    "\000\004\010\uffcb\001\002\000\004\004\135\001\002\000" +
    "\004\117\136\001\002\000\004\004\137\001\002\000\004" +
    "\010\uffcd\001\002\000\004\004\141\001\002\000\004\224" +
    "\142\001\002\000\004\004\143\001\002\000\004\010\uffcc" +
    "\001\002\000\004\004\145\001\002\000\004\117\146\001" +
    "\002\000\004\004\147\001\002\000\004\010\uffca\001\002" +
    "\000\006\007\uffd0\013\uffd0\001\002\000\004\004\152\001" +
    "\002\000\004\223\153\001\002\000\004\004\154\001\002" +
    "\000\004\010\uffce\001\002\000\004\044\161\001\002\000" +
    "\016\003\122\123\121\130\126\131\125\132\127\133\124" +
    "\001\002\000\004\010\160\001\002\000\006\007\uffcf\013" +
    "\uffcf\001\002\000\004\014\162\001\002\000\004\013\ufff1" +
    "\001\002\000\006\007\235\014\234\001\002\000\016\003" +
    "\171\100\170\101\167\103\172\111\173\123\165\001\002" +
    "\000\004\154\230\001\002\000\004\010\227\001\002\000" +
    "\004\154\223\001\002\000\004\154\217\001\002\000\004" +
    "\010\uffda\001\002\000\004\154\205\001\002\000\004\154" +
    "\174\001\002\000\004\004\175\001\002\000\014\003\177" +
    "\112\176\113\200\114\202\115\201\001\002\000\004\004" +
    "\uff82\001\002\000\004\004\uff7e\001\002\000\004\004\uff81" +
    "\001\002\000\004\004\uff7f\001\002\000\004\004\uff80\001" +
    "\002\000\004\004\204\001\002\000\004\010\uffdc\001\002" +
    "\000\004\004\206\001\002\000\016\003\210\104\213\105" +
    "\214\106\211\107\212\110\215\001\002\000\004\004\216" +
    "\001\002\000\004\004\uff78\001\002\000\004\004\uff7b\001" +
    "\002\000\004\004\uff7a\001\002\000\004\004\uff7d\001\002" +
    "\000\004\004\uff7c\001\002\000\004\004\uff79\001\002\000" +
    "\004\010\uffdd\001\002\000\004\004\220\001\002\000\046" +
    "\003\065\057\057\060\060\061\056\062\062\063\061\064" +
    "\055\065\073\066\054\067\064\070\067\071\052\072\072" +
    "\073\074\074\066\075\070\076\053\077\071\001\002\000" +
    "\004\004\222\001\002\000\004\010\uffdb\001\002\000\004" +
    "\004\224\001\002\000\004\102\225\001\002\000\004\004" +
    "\226\001\002\000\004\010\uffde\001\002\000\006\007\uffe1" +
    "\014\uffe1\001\002\000\004\004\231\001\002\000\004\223" +
    "\232\001\002\000\004\004\233\001\002\000\004\010\uffdf" +
    "\001\002\000\004\117\240\001\002\000\016\003\171\100" +
    "\170\101\167\103\172\111\173\123\165\001\002\000\004" +
    "\010\237\001\002\000\006\007\uffe0\014\uffe0\001\002\000" +
    "\004\013\241\001\002\000\004\052\242\001\002\000\004" +
    "\014\243\001\002\000\004\013\uffee\001\002\000\006\007" +
    "\303\014\302\001\002\000\016\003\252\100\250\101\247" +
    "\103\253\111\254\123\246\001\002\000\004\154\276\001" +
    "\002\000\004\154\272\001\002\000\004\154\266\001\002" +
    "\000\004\010\265\001\002\000\004\010\uff95\001\002\000" +
    "\004\154\261\001\002\000\004\154\255\001\002\000\004" +
    "\004\256\001\002\000\014\003\177\112\176\113\200\114" +
    "\202\115\201\001\002\000\004\004\260\001\002\000\004" +
    "\010\uff97\001\002\000\004\004\262\001\002\000\016\003" +
    "\210\104\213\105\214\106\211\107\212\110\215\001\002" +
    "\000\004\004\264\001\002\000\004\010\uff98\001\002\000" +
    "\006\007\uff9c\014\uff9c\001\002\000\004\004\267\001\002" +
    "\000\046\003\065\057\057\060\060\061\056\062\062\063" +
    "\061\064\055\065\073\066\054\067\064\070\067\071\052" +
    "\072\072\073\074\074\066\075\070\076\053\077\071\001" +
    "\002\000\004\004\271\001\002\000\004\010\uff9a\001\002" +
    "\000\004\004\273\001\002\000\004\102\274\001\002\000" +
    "\004\004\275\001\002\000\004\010\uff99\001\002\000\004" +
    "\004\277\001\002\000\004\223\300\001\002\000\004\004" +
    "\301\001\002\000\004\010\uff96\001\002\000\004\117\306" +
    "\001\002\000\016\003\252\100\250\101\247\103\253\111" +
    "\254\123\246\001\002\000\004\010\305\001\002\000\006" +
    "\007\uff9b\014\uff9b\001\002\000\004\013\307\001\002\000" +
    "\004\030\310\001\002\000\004\014\311\001\002\000\004" +
    "\013\ufff6\001\002\000\022\003\323\056\320\100\316\101" +
    "\324\103\325\111\321\123\322\127\326\001\002\000\006" +
    "\007\315\014\314\001\002\000\006\003\102\013\103\001" +
    "\002\000\022\003\323\056\320\100\316\101\324\103\325" +
    "\111\321\123\322\127\326\001\002\000\004\154\363\001" +
    "\002\000\004\010\362\001\002\000\004\154\356\001\002" +
    "\000\004\154\352\001\002\000\004\154\346\001\002\000" +
    "\004\010\uffbf\001\002\000\004\154\342\001\002\000\004" +
    "\154\336\001\002\000\004\154\327\001\002\000\004\004" +
    "\330\001\002\000\010\003\332\225\333\226\331\001\002" +
    "\000\004\004\uffbd\001\002\000\004\004\uffbc\001\002\000" +
    "\004\004\uffbe\001\002\000\004\004\335\001\002\000\004" +
    "\010\uffc5\001\002\000\004\004\337\001\002\000\016\003" +
    "\210\104\213\105\214\106\211\107\212\110\215\001\002" +
    "\000\004\004\341\001\002\000\004\010\uffc3\001\002\000" +
    "\004\004\343\001\002\000\004\102\344\001\002\000\004" +
    "\004\345\001\002\000\004\010\uffc4\001\002\000\004\004" +
    "\347\001\002\000\004\223\350\001\002\000\004\004\351" +
    "\001\002\000\004\010\uffc6\001\002\000\004\004\353\001" +
    "\002\000\014\003\177\112\176\113\200\114\202\115\201" +
    "\001\002\000\004\004\355\001\002\000\004\010\uffc2\001" +
    "\002\000\004\004\357\001\002\000\046\003\065\057\057" +
    "\060\060\061\056\062\062\063\061\064\055\065\073\066" +
    "\054\067\064\070\067\071\052\072\072\073\074\074\066" +
    "\075\070\076\053\077\071\001\002\000\004\004\361\001" +
    "\002\000\004\010\uffc0\001\002\000\006\007\uffc7\014\uffc7" +
    "\001\002\000\004\004\364\001\002\000\046\003\065\057" +
    "\057\060\060\061\056\062\062\063\061\064\055\065\073" +
    "\066\054\067\064\070\067\071\052\072\072\073\074\074" +
    "\066\075\070\076\053\077\071\001\002\000\004\004\366" +
    "\001\002\000\004\010\uffc1\001\002\000\004\013\371\001" +
    "\002\000\004\013\ufff8\001\002\000\030\027\113\031\105" +
    "\033\110\035\111\041\112\042\372\043\115\045\106\047" +
    "\104\051\114\053\107\001\002\000\004\014\373\001\002" +
    "\000\004\013\ufff2\001\002\000\004\010\375\001\002\000" +
    "\006\007\uffc8\014\uffc8\001\002\000\006\007\u011d\014\u011c" +
    "\001\002\000\016\003\u0103\100\u0102\101\u0101\103\u0105\111" +
    "\u0106\123\u0100\001\002\000\004\154\u0118\001\002\000\004" +
    "\154\u0114\001\002\000\004\154\u0110\001\002\000\004\010" +
    "\uffb4\001\002\000\004\010\u010f\001\002\000\004\154\u010b" +
    "\001\002\000\004\154\u0107\001\002\000\004\004\u0108\001" +
    "\002\000\014\003\177\112\176\113\200\114\202\115\201" +
    "\001\002\000\004\004\u010a\001\002\000\004\010\uffb6\001" +
    "\002\000\004\004\u010c\001\002\000\016\003\210\104\213" +
    "\105\214\106\211\107\212\110\215\001\002\000\004\004" +
    "\u010e\001\002\000\004\010\uffb7\001\002\000\006\007\uffbb" +
    "\014\uffbb\001\002\000\004\004\u0111\001\002\000\046\003" +
    "\065\057\057\060\060\061\056\062\062\063\061\064\055" +
    "\065\073\066\054\067\064\070\067\071\052\072\072\073" +
    "\074\074\066\075\070\076\053\077\071\001\002\000\004" +
    "\004\u0113\001\002\000\004\010\uffb5\001\002\000\004\004" +
    "\u0115\001\002\000\004\102\u0116\001\002\000\004\004\u0117" +
    "\001\002\000\004\010\uffb8\001\002\000\004\004\u0119\001" +
    "\002\000\004\223\u011a\001\002\000\004\004\u011b\001\002" +
    "\000\004\010\uffb9\001\002\000\004\013\u0122\001\002\000" +
    "\016\003\u0103\100\u0102\101\u0101\103\u0105\111\u0106\123\u0100" +
    "\001\002\000\004\010\u011f\001\002\000\006\007\uffba\014" +
    "\uffba\001\002\000\004\013\uffec\001\002\000\004\013\u012b" +
    "\001\002\000\004\037\u0123\001\002\000\004\231\u0124\001" +
    "\002\000\004\154\u0125\001\002\000\004\004\u0126\001\002" +
    "\000\004\117\u0127\001\002\000\004\004\u0128\001\002\000" +
    "\004\014\u0129\001\002\000\004\013\uffea\001\002\000\004" +
    "\013\uffeb\001\002\000\006\036\u012c\037\u0123\001\002\000" +
    "\004\014\u012d\001\002\000\004\013\ufff3\001\002\000\006" +
    "\007\u0152\014\u0151\001\002\000\020\003\u0134\101\u0131\103" +
    "\u0136\111\u0137\123\u0130\125\u0133\126\u0132\001\002\000\004" +
    "\154\u014d\001\002\000\004\154\u0149\001\002\000\004\154" +
    "\u0145\001\002\000\004\154\u0141\001\002\000\004\010\uffab" +
    "\001\002\000\004\010\u0140\001\002\000\004\154\u013c\001" +
    "\002\000\004\154\u0138\001\002\000\004\004\u0139\001\002" +
    "\000\014\003\177\112\176\113\200\114\202\115\201\001" +
    "\002\000\004\004\u013b\001\002\000\004\010\uffaf\001\002" +
    "\000\004\004\u013d\001\002\000\016\003\210\104\213\105" +
    "\214\106\211\107\212\110\215\001\002\000\004\004\u013f" +
    "\001\002\000\004\010\uffb0\001\002\000\006\007\uffb3\014" +
    "\uffb3\001\002\000\004\004\u0142\001\002\000\004\224\u0143" +
    "\001\002\000\004\004\u0144\001\002\000\004\010\uffad\001" +
    "\002\000\004\004\u0146\001\002\000\004\224\u0147\001\002" +
    "\000\004\004\u0148\001\002\000\004\010\uffac\001\002\000" +
    "\004\004\u014a\001\002\000\004\102\u014b\001\002\000\004" +
    "\004\u014c\001\002\000\004\010\uffb1\001\002\000\004\004" +
    "\u014e\001\002\000\004\223\u014f\001\002\000\004\004\u0150" +
    "\001\002\000\004\010\uffae\001\002\000\004\013\u0155\001" +
    "\002\000\020\003\u0134\101\u0131\103\u0136\111\u0137\123\u0130" +
    "\125\u0133\126\u0132\001\002\000\004\010\u0154\001\002\000" +
    "\006\007\uffb2\014\uffb2\001\002\000\004\034\u0156\001\002" +
    "\000\004\014\u0157\001\002\000\004\013\ufff4\001\002\000" +
    "\006\007\u0177\014\u0176\001\002\000\016\003\u015d\100\u015c" +
    "\101\u015b\103\u015f\111\u0160\123\u015a\001\002\000\004\154" +
    "\u0172\001\002\000\004\154\u016e\001\002\000\004\154\u016a" +
    "\001\002\000\004\010\uffe2\001\002\000\004\010\u0169\001" +
    "\002\000\004\154\u0165\001\002\000\004\154\u0161\001\002" +
    "\000\004\004\u0162\001\002\000\014\003\177\112\176\113" +
    "\200\114\202\115\201\001\002\000\004\004\u0164\001\002" +
    "\000\004\010\uffe4\001\002\000\004\004\u0166\001\002\000" +
    "\016\003\210\104\213\105\214\106\211\107\212\110\215" +
    "\001\002\000\004\004\u0168\001\002\000\004\010\uffe5\001" +
    "\002\000\006\007\uffe9\014\uffe9\001\002\000\004\004\u016b" +
    "\001\002\000\046\003\065\057\057\060\060\061\056\062" +
    "\062\063\061\064\055\065\073\066\054\067\064\070\067" +
    "\071\052\072\072\073\074\074\066\075\070\076\053\077" +
    "\071\001\002\000\004\004\u016d\001\002\000\004\010\uffe3" +
    "\001\002\000\004\004\u016f\001\002\000\004\102\u0170\001" +
    "\002\000\004\004\u0171\001\002\000\004\010\uffe6\001\002" +
    "\000\004\004\u0173\001\002\000\004\223\u0174\001\002\000" +
    "\004\004\u0175\001\002\000\004\010\uffe7\001\002\000\004" +
    "\117\u017a\001\002\000\016\003\u015d\100\u015c\101\u015b\103" +
    "\u015f\111\u0160\123\u015a\001\002\000\004\010\u0179\001\002" +
    "\000\006\007\uffe8\014\uffe8\001\002\000\004\013\u017b\001" +
    "\002\000\004\054\u017c\001\002\000\004\014\u017d\001\002" +
    "\000\004\013\uffed\001\002\000\004\013\ufff0\001\002\000" +
    "\006\007\u01a8\014\u01a7\001\002\000\020\003\u0185\100\u0184" +
    "\101\u0183\103\u0186\111\u0188\116\u0187\123\u0182\001\002\000" +
    "\004\010\u01a6\001\002\000\004\154\u01a2\001\002\000\004" +
    "\154\u019e\001\002\000\004\154\u019a\001\002\000\004\010" +
    "\uffa2\001\002\000\004\154\u0196\001\002\000\004\154\u018d" +
    "\001\002\000\004\154\u0189\001\002\000\004\004\u018a\001" +
    "\002\000\014\003\177\112\176\113\200\114\202\115\201" +
    "\001\002\000\004\004\u018c\001\002\000\004\010\uffa4\001" +
    "\002\000\004\004\u018e\001\002\000\014\003\u018f\117\u0191" +
    "\120\u0193\121\u0190\122\u0192\001\002\000\004\004\uff9d\001" +
    "\002\000\004\004\uff9f\001\002\000\004\004\uffa1\001\002" +
    "\000\004\004\uff9e\001\002\000\004\004\uffa0\001\002\000" +
    "\004\004\u0195\001\002\000\004\010\uffa8\001\002\000\004" +
    "\004\u0197\001\002\000\016\003\210\104\213\105\214\106" +
    "\211\107\212\110\215\001\002\000\004\004\u0199\001\002" +
    "\000\004\010\uffa5\001\002\000\004\004\u019b\001\002\000" +
    "\046\003\065\057\057\060\060\061\056\062\062\063\061" +
    "\064\055\065\073\066\054\067\064\070\067\071\052\072" +
    "\072\073\074\074\066\075\070\076\053\077\071\001\002" +
    "\000\004\004\u019d\001\002\000\004\010\uffa3\001\002\000" +
    "\004\004\u019f\001\002\000\004\102\u01a0\001\002\000\004" +
    "\004\u01a1\001\002\000\004\010\uffa6\001\002\000\004\004" +
    "\u01a3\001\002\000\004\223\u01a4\001\002\000\004\004\u01a5" +
    "\001\002\000\004\010\uffa7\001\002\000\006\007\uffaa\014" +
    "\uffaa\001\002\000\004\013\u01ab\001\002\000\020\003\u0185" +
    "\100\u0184\101\u0183\103\u0186\111\u0188\116\u0187\123\u0182\001" +
    "\002\000\004\010\u01aa\001\002\000\006\007\uffa9\014\uffa9" +
    "\001\002\000\004\032\u01ac\001\002\000\004\014\u01ad\001" +
    "\002\000\004\013\ufff5\001\002\000\006\007\u01d2\014\u01d1" +
    "\001\002\000\020\003\u01b3\056\u01b4\100\u01b2\101\u01b1\103" +
    "\u01b6\111\u01b7\123\u01b0\001\002\000\004\154\u01cd\001\002" +
    "\000\004\154\u01c9\001\002\000\004\154\u01c5\001\002\000" +
    "\004\010\uffd1\001\002\000\004\154\u01c1\001\002\000\004" +
    "\010\u01c0\001\002\000\004\154\u01bc\001\002\000\004\154" +
    "\u01b8\001\002\000\004\004\u01b9\001\002\000\014\003\177" +
    "\112\176\113\200\114\202\115\201\001\002\000\004\004" +
    "\u01bb\001\002\000\004\010\uffd4\001\002\000\004\004\u01bd" +
    "\001\002\000\016\003\210\104\213\105\214\106\211\107" +
    "\212\110\215\001\002\000\004\004\u01bf\001\002\000\004" +
    "\010\uffd5\001\002\000\006\007\uffd9\014\uffd9\001\002\000" +
    "\004\004\u01c2\001\002\000\046\003\065\057\057\060\060" +
    "\061\056\062\062\063\061\064\055\065\073\066\054\067" +
    "\064\070\067\071\052\072\072\073\074\074\066\075\070" +
    "\076\053\077\071\001\002\000\004\004\u01c4\001\002\000" +
    "\004\010\uffd2\001\002\000\004\004\u01c6\001\002\000\046" +
    "\003\065\057\057\060\060\061\056\062\062\063\061\064" +
    "\055\065\073\066\054\067\064\070\067\071\052\072\072" +
    "\073\074\074\066\075\070\076\053\077\071\001\002\000" +
    "\004\004\u01c8\001\002\000\004\010\uffd3\001\002\000\004" +
    "\004\u01ca\001\002\000\004\102\u01cb\001\002\000\004\004" +
    "\u01cc\001\002\000\004\010\uffd6\001\002\000\004\004\u01ce" +
    "\001\002\000\004\223\u01cf\001\002\000\004\004\u01d0\001" +
    "\002\000\004\010\uffd7\001\002\000\004\117\u01d5\001\002" +
    "\000\020\003\u01b3\056\u01b4\100\u01b2\101\u01b1\103\u01b6\111" +
    "\u01b7\123\u01b0\001\002\000\004\010\u01d4\001\002\000\006" +
    "\007\uffd8\014\uffd8\001\002\000\004\013\u01d6\001\002\000" +
    "\004\050\u01d7\001\002\000\004\014\u01d8\001\002\000\004" +
    "\013\uffef\001\002\000\030\026\u01da\027\113\031\105\033" +
    "\110\035\111\041\112\043\115\045\106\047\104\051\114" +
    "\053\107\001\002\000\004\014\u01db\001\002\000\004\013" +
    "\ufffc\001\002\000\004\016\u01dd\001\002\000\004\014\u01de" +
    "\001\002\000\004\002\001\001\002\000\004\014\u01e0\001" +
    "\002\000\004\216\u01e1\001\002\000\004\013\u01e2\001\002" +
    "\000\004\022\u01e3\001\002\000\004\014\u01e4\001\002\000" +
    "\004\013\ufffd\001\002\000\004\055\u01e6\001\002\000\004" +
    "\154\u01e7\001\002\000\004\004\u01e8\001\002\000\004\216" +
    "\u01e9\001\002\000\004\004\u01ea\001\002\000\004\010\u01eb" +
    "\001\002\000\004\014\u01ec\001\002\000\004\013\u01ed\001" +
    "\002\000\004\024\u01ee\001\002\000\004\014\u01ef\001\002" +
    "\000\004\013\ufffe\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01ee\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\025\001\001\000\004\023\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\040\001\001\000\002\001\001" +
    "\000\004\003\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\100" +
    "\010\077\001\001\000\004\007\367\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\071\u01ad" +
    "\001\001\000\004\103\u017e\001\001\000\002\001\001\000" +
    "\004\065\u0157\001\001\000\004\101\u012d\001\001\000\004" +
    "\077\375\001\001\000\004\075\312\001\001\000\004\011" +
    "\243\001\001\000\004\067\162\001\001\000\002\001\001" +
    "\000\004\073\116\001\001\000\002\001\001\000\004\074" +
    "\122\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\074\156\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\070\165\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\202\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\206\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\220\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\070\235\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\250\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\256\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\262\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\267\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\303\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\076\373\001\001\000\002\001\001\000" +
    "\006\007\100\010\366\001\001\000\004\076\316\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\333\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\337\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\353\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\357\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\364\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\367\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\100\u0103\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\u0108\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\u010c\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\u0111\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\015\u011f\105\u0120" +
    "\001\001\000\004\100\u011d\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\u0129\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\102\u0134\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\u0139\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\u013d\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\102\u0152\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\066\u015d\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\u0162\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\u0166\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\u016b\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\066\u0177\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\104\u0180\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\u018a\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\114\u0193\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\u0197\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\u019b\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\104\u01a8\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\072\u01b4" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\u01b9\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\u01bd\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\u01c2\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\u01c6\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\072\u01d2\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 

    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 

       // PanelReporte.agregarError(new Errores("Sintactico",String.valueOf(s.value),"no se esperaba: "+String.valueOf( s.value), s.left, s.right));
    } 
    /**
     * Método al que se llama cuando se identifica un error sintáctico en el que 
     * ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido.");

    }

   // para el objeto captcha
        private Captcha captcha;

        public Captcha getCaptcha(){
            return captcha;
        }

    /// lista de etiqueta

        private ArrayList<Etiqueta> listaEtiqueta = new ArrayList<Etiqueta>();

         public ArrayList<Etiqueta> getListEtiqueta(){
          return listaEtiqueta;
         }






                 /// funcion para distribuir los parametros de una etiqueta: 

            public String separarAtributos(String paramsSpam) {

            String finalResult = "";
            StringBuilder attributesResult = new StringBuilder();
            StringBuilder styleResult = new StringBuilder();

            // Atributos específicos
            String[] attributeNames = {"id", "src", "width", "height", "alt", "class", "cols", "rows", "type"};

            // Buscar y separar los atributos específicos
            for (String attr : attributeNames) {
                int attrStart = paramsSpam.indexOf(attr + "=");
                if (attrStart != -1) {
                    // Encontrar el final del atributo (busca el punto y coma o el final de la cadena)
                    int attrEnd = paramsSpam.indexOf(";", attrStart);
                    if (attrEnd == -1) {
                        attrEnd = paramsSpam.length();
                    }

                    // Extraer el atributo
                    String attribute = paramsSpam.substring(attrStart, attrEnd).trim();
                    attributesResult.append(attribute).append(" ");

                    // Remover el atributo del string original
                    paramsSpam = paramsSpam.replace(attribute + ";", "").trim();
                }
            }

            // Cualquier cosa que quede en paramsSpam se considera como parte del estilo
            if (!paramsSpam.isEmpty()) {
                styleResult.append("style=\"").append(paramsSpam.trim()).append("\"");
            }

            // Combinar los resultados de los atributos y el estilo
            finalResult = attributesResult.toString().trim() + " " + styleResult.toString().trim();

            return finalResult.trim();
        }

    

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // iniciar ::= MENOR HTML CORCHETE_IZQ ID IGUAL COMILLAS IDENTIFICADOR COMILLAS CORCHETE_DER CORCHETE_IZQ NAME IGUAL COMILLAS CADENA COMILLAS CORCHETE_DER MAYOR head link title body MENOR HTML_C MAYOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-17)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int heleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int heright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object he = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object ti = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int boleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int boright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object bo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		      // Crear el objeto Captcha con los datos recopilados
       captcha  = new Captcha((String)id, (String) nombre, (String) he,  (String)li, (String)ti, (Vector) bo);
    

              CUP$parser$result = parser.getSymbolFactory().newSymbol("iniciar",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-23)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= iniciar EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // head ::= MENOR HEAD MAYOR MENOR MENOR HEAD_C MAYOR 
            {
              Object RESULT =null;
		  
        RESULT = "head " ;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("head",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // link ::= LINK CORCHETE_IZQ HREF IGUAL COMILLAS CADENA COMILLAS CORCHETE_DER MAYOR MENOR LINK_C MAYOR 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object txt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		  
        
        RESULT = txt;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("link",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // title ::= MENOR TITLE MAYOR CADENA MENOR TITLE_C MAYOR 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object txt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		  
        // Guardar el texto del título
        RESULT = txt;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("title",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // body ::= MENOR BODY background MAYOR etiq MENOR BODY_C MAYOR 
            {
              Object RESULT =null;
		int bgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object bg = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int etileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int etiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object eti = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		  
        // Crear un objeto para almacenar el contenido del body
        BodyContent bodyContent = new BodyContent();
        bodyContent.background = (String) bg;
        bodyContent.etiquetas = (List<Etiqueta>) eti;
        RESULT = bodyContent;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("body",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // background ::= CORCHETE_IZQ BACKGROUND IGUAL COMILLAS colors COMILLAS CORCHETE_DER 
            {
              Object RESULT =null;
		int colleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object col = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT=" background-color: \" "+ col+"  \" ;"  ;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("background",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // background ::= 
            {
              Object RESULT =null;
		 RESULT=""; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("background",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // etiq ::= etiqueta 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 

         List<Etiqueta> lista = new ArrayList<>();
        lista.add((Etiqueta) e);
        RESULT = lista; 

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiq",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // etiq ::= etiq etiqueta 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

        ((Vector) e1).add((Etiqueta) e2); 
        RESULT = e1; 

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiq",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // etiq ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiq",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // etiqueta ::= MENOR SPAM paramsSpam MAYOR TEXT MENOR SPAN_C MAYOR 
            {
              Object RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int txtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object txt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		  String parametro = separarAtributos((String) params)  ; RESULT= new Etiqueta("spam",(String) parametro ,(String) txt); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiqueta",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // etiqueta ::= MENOR INPUT paramsInput MAYOR MENOR INPUT_C MAYOR 
            {
              Object RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		  String parametro = separarAtributos((String) params) ;  RESULT= new Etiqueta ("input",(String) parametro ,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiqueta",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // etiqueta ::= MENOR TEXTOAREA paramsTextoArea MAYOR MENOR TEXTOAREA_C MAYOR 
            {
              Object RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		  String parametro = separarAtributos((String) params)  ; RESULT= new Etiqueta("textarea",(String) parametro ,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiqueta",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // etiqueta ::= MENOR SELECTED paramsSelect MAYOR opt MENOR SELECTED_C MAYOR 
            {
              Object RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int otleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int otright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object ot = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		  
        
                String parametro = separarAtributos((String) params); 
                Etiqueta etiquetaSelect = new Etiqueta("select", parametro, null);
                // Agregar todas las opciones como hijos de la etiqueta select
                for (Etiqueta e : (List<Etiqueta>)  ot) {
                    etiquetaSelect.agregarHijo(e);
                }

                RESULT = etiquetaSelect;

         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiqueta",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // etiqueta ::= MENOR DIV paramsDiv MAYOR etiq MENOR DIV_C MAYOR 
            {
              Object RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object contenido = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 
         String parametro = separarAtributos((String) params)  ; 

                Etiqueta etiquetaDiv = new Etiqueta("div",(String) parametro ,null);
                      // Agregar todas las etiquetas hijas al div
                for (Etiqueta e : (List<Etiqueta>)  contenido) {
                    etiquetaDiv.agregarHijo(e);
                }
                RESULT = etiquetaDiv;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiqueta",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // etiqueta ::= MENOR IMG MAYOR paramsImg MENOR IMG_C MAYOR 
            {
              Object RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int imgleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int imgright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object img = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  String parametro = separarAtributos((String) params)  ; RESULT= new Etiqueta("img",(String) parametro ,(String) img); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiqueta",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // etiqueta ::= MENOR BR MAYOR 
            {
              Object RESULT =null;
		  RESULT= new Etiqueta("br",null ,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiqueta",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // etiqueta ::= MENOR BUTTON paramsButton MAYOR TEXT MENOR BUTTON_C MAYOR 
            {
              Object RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int txtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object txt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		  String parametro = separarAtributos((String) params)  ; RESULT= new Etiqueta("button",(String) parametro ,(String) txt); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiqueta",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // etiqueta ::= MENOR H1 paramsH1 MAYOR TEXT MENOR H1_C MAYOR 
            {
              Object RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int txtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object txt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		  String parametro = separarAtributos((String) params)  ; RESULT= new Etiqueta("h1",(String) parametro ,(String) txt ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiqueta",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // etiqueta ::= MENOR P paramsP MAYOR TEXT MENOR P_C MAYOR 
            {
              Object RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int txtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object txt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		  String parametro = separarAtributos((String) params)  ; RESULT= new Etiqueta("p",(String) parametro , (String) txt); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiqueta",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // opt ::= options 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		   
         List<Etiqueta> lista = new ArrayList<>();
         lista.add((Etiqueta)o);
         RESULT = lista;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opt",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // opt ::= opt options 
            {
              Object RESULT =null;
		int prevleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int prevright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object prev = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ((Vector) prev).add(o);   RESULT = prev;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("opt",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // options ::= MENOR OPTION VALUE IGUAL COMILLAS TEXT COMILLAS MAYOR 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object txt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
        Etiqueta etiquetaOption = new Etiqueta("option",(String) txt,null );
        RESULT = etiquetaOption;
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("options",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // paramsP ::= CORCHETE_IZQ parametros_P CORCHETE_DER 
            {
              Object RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = params; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramsP",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // paramsP ::= paramsP CORCHETE_IZQ parametros_P CORCHETE_DER 
            {
              Object RESULT =null;
		int prevleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int prevright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object prev = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = prev + " " + params; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramsP",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // parametros_P ::= ID IGUAL COMILLAS IDENTIFICADOR COMILLAS 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= "id=\""+ide+"\"";  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_P",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // parametros_P ::= FONT_SIZE IGUAL COMILLAS PIXEL COMILLAS 
            {
              Object RESULT =null;
		int pixleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pixright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object pix = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= " font-size: \" "+ pix +"; \" "   ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_P",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // parametros_P ::= FONT_FAMI IGUAL COMILLAS font COMILLAS 
            {
              Object RESULT =null;
		int fonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fonright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object fon = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= " font-family: \" "+ fon +"; \" " ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_P",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // parametros_P ::= TEXT_ALIGN IGUAL COMILLAS align COMILLAS 
            {
              Object RESULT =null;
		int alileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aliright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ali = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= " text-align: \" "+ ali  +"; \" " ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_P",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // parametros_P ::= COLOR IGUAL COMILLAS colors COMILLAS 
            {
              Object RESULT =null;
		int colleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object col = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= " color: \" "+ col+"  \" ;"  ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_P",52, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // parametros_P ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_P",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // paramsH1 ::= CORCHETE_IZQ parametros_H1 CORCHETE_DER 
            {
              Object RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = params; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramsH1",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // paramsH1 ::= paramsH1 CORCHETE_IZQ parametros_H1 CORCHETE_DER 
            {
              Object RESULT =null;
		int prevleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int prevright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object prev = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = prev + " " + params; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramsH1",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // parametros_H1 ::= ID IGUAL COMILLAS IDENTIFICADOR COMILLAS 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= "id=\""+ide+"\"";  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_H1",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // parametros_H1 ::= FONT_SIZE IGUAL COMILLAS PIXEL COMILLAS 
            {
              Object RESULT =null;
		int pixleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pixright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object pix = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= " font-size: \" "+ pix +"; \" "   ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_H1",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // parametros_H1 ::= FONT_FAMI IGUAL COMILLAS font COMILLAS 
            {
              Object RESULT =null;
		int fonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fonright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object fon = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= " font-family: \" "+ fon +"; \" " ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_H1",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // parametros_H1 ::= TEXT_ALIGN IGUAL COMILLAS align COMILLAS 
            {
              Object RESULT =null;
		int alileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aliright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ali = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= " text-align: \" "+ ali  +"; \" " ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_H1",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // parametros_H1 ::= COLOR IGUAL COMILLAS colors COMILLAS 
            {
              Object RESULT =null;
		int colleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object col = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= " color: \" "+ col+"  \" ;"  ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_H1",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // parametros_H1 ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_H1",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // paramsButton ::= CORCHETE_IZQ parametros_Button CORCHETE_DER 
            {
              Object RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = params; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramsButton",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // paramsButton ::= paramsButton CORCHETE_IZQ parametros_Button CORCHETE_DER 
            {
              Object RESULT =null;
		int prevleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int prevright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object prev = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = prev + " " + params; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramsButton",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // parametros_Button ::= ID IGUAL COMILLAS IDENTIFICADOR COMILLAS 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= "id=\""+ide+"\"";  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_Button",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // parametros_Button ::= FONT_SIZE IGUAL COMILLAS PIXEL COMILLAS 
            {
              Object RESULT =null;
		int pixleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pixright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object pix = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= " font-size: \" "+ pix +"; \" "   ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_Button",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // parametros_Button ::= FONT_FAMI IGUAL COMILLAS font COMILLAS 
            {
              Object RESULT =null;
		int fonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fonright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object fon = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= " font-family: \" "+ fon +"; \" " ;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_Button",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // parametros_Button ::= TEXT_ALIGN IGUAL COMILLAS align COMILLAS 
            {
              Object RESULT =null;
		int alileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aliright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ali = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= " text-align: \" "+ ali  +"; \" " ;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_Button",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // parametros_Button ::= COLOR IGUAL COMILLAS colors COMILLAS 
            {
              Object RESULT =null;
		int colleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object col = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= " color: \" "+ col+"  \" ;"  ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_Button",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // parametros_Button ::= BACKGROUND IGUAL COMILLAS colors COMILLAS 
            {
              Object RESULT =null;
		int bacleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bacright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object bac = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= " background-color: \" "+ bac+"  \" ;"  ;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_Button",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // parametros_Button ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_Button",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // paramsImg ::= CORCHETE_IZQ parametros_Img CORCHETE_DER 
            {
              Object RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = params; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramsImg",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // paramsImg ::= paramsImg CORCHETE_IZQ parametros_Img CORCHETE_DER 
            {
              Object RESULT =null;
		int prevleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int prevright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object prev = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = prev + " " + params; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramsImg",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // parametros_Img ::= ID IGUAL COMILLAS IDENTIFICADOR COMILLAS 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= "id=\""+ide+"\""; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_Img",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // parametros_Img ::= SRC IGUAL COMILLAS TEXT COMILLAS 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object txt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= "src=\""+txt+"\""; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_Img",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // parametros_Img ::= WIDTH IGUAL COMILLAS NUMERO COMILLAS 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= "width=\""+num+"\""; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_Img",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // parametros_Img ::= HEIGHT IGUAL COMILLAS NUMERO COMILLAS 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= "height=\""+num+"\""; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_Img",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // parametros_Img ::= ALT IGUAL COMILLAS TEXT COMILLAS 
            {
              Object RESULT =null;
		int txtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int txtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object txt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= "alt=\""+txt+"\""; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_Img",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // parametros_Img ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_Img",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // paramsDiv ::= CORCHETE_IZQ parametros_Div CORCHETE_DER 
            {
              Object RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = params; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramsDiv",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // paramsDiv ::= paramsDiv CORCHETE_IZQ parametros_Div CORCHETE_DER 
            {
              Object RESULT =null;
		int prevleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int prevright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object prev = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = prev + " " + params; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramsDiv",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // parametros_Div ::= ID IGUAL COMILLAS IDENTIFICADOR COMILLAS 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= "id=\""+ide+"\"";  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_Div",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // parametros_Div ::= CLASS IGUAL COMILLAS clase COMILLAS 
            {
              Object RESULT =null;
		int clsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int clsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object cls = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= "class=\""+cls+"\""; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_Div",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // parametros_Div ::= FONT_SIZE IGUAL COMILLAS PIXEL COMILLAS 
            {
              Object RESULT =null;
		int pixleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pixright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object pix = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= " font-size: \" "+ pix +"; \" "   ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_Div",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // parametros_Div ::= FONT_FAMI IGUAL COMILLAS font COMILLAS 
            {
              Object RESULT =null;
		int fonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fonright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object fon = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= " font-family: \" "+ fon +"; \" " ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_Div",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // parametros_Div ::= TEXT_ALIGN IGUAL COMILLAS align COMILLAS 
            {
              Object RESULT =null;
		int alileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aliright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ali = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= " text-align: \" "+ ali  +"; \" " ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_Div",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // parametros_Div ::= COLOR IGUAL COMILLAS colors COMILLAS 
            {
              Object RESULT =null;
		int colleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object col = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= " color: \" "+ col+"  \" ;"  ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_Div",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // parametros_Div ::= BACKGROUND IGUAL COMILLAS colors COMILLAS 
            {
              Object RESULT =null;
		int colleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object col = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= " background-color: \" "+ col+"  \" ;"  ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_Div",60, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // parametros_Div ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_Div",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // clase ::= ROW 
            {
              Object RESULT =null;
		 RESULT= "row "; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("clase",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // clase ::= COLUMN 
            {
              Object RESULT =null;
		 RESULT= " col-1"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("clase",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // clase ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("clase",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // paramsSelect ::= CORCHETE_IZQ parametros_Select CORCHETE_DER 
            {
              Object RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = params; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramsSelect",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // paramsSelect ::= paramsSelect CORCHETE_IZQ parametros_Select CORCHETE_DER 
            {
              Object RESULT =null;
		int prevleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int prevright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object prev = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = prev + " " + params; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramsSelect",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // parametros_Select ::= ID IGUAL COMILLAS IDENTIFICADOR COMILLAS 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= "id=\""+ide+"\"";  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_Select",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // parametros_Select ::= FONT_SIZE IGUAL COMILLAS PIXEL COMILLAS 
            {
              Object RESULT =null;
		int pixleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pixright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object pix = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= " font-size: \" "+ pix +"; \" "   ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_Select",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // parametros_Select ::= FONT_FAMI IGUAL COMILLAS font COMILLAS 
            {
              Object RESULT =null;
		int fonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fonright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object fon = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= " font-family: \" "+ fon +"; \" " ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_Select",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // parametros_Select ::= TEXT_ALIGN IGUAL COMILLAS align COMILLAS 
            {
              Object RESULT =null;
		int alileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aliright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ali = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= " text-align: \" "+ ali  +"; \" " ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_Select",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // parametros_Select ::= COLOR IGUAL COMILLAS colors COMILLAS 
            {
              Object RESULT =null;
		int colleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object col = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= " color: \" "+ col+"  \" ;"  ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_Select",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // parametros_Select ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_Select",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // paramsTextoArea ::= CORCHETE_IZQ parametros_TextoArea CORCHETE_DER 
            {
              Object RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = params; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramsTextoArea",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // paramsTextoArea ::= paramsTextoArea CORCHETE_IZQ parametros_TextoArea CORCHETE_DER 
            {
              Object RESULT =null;
		int prevleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int prevright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object prev = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = prev + " " + params; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramsTextoArea",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // parametros_TextoArea ::= FONT_SIZE IGUAL COMILLAS PIXEL COMILLAS 
            {
              Object RESULT =null;
		int pixleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pixright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object pix = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = " font-size: \" "+ pix +"; \" "   ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_TextoArea",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // parametros_TextoArea ::= FONT_FAMI IGUAL COMILLAS font COMILLAS 
            {
              Object RESULT =null;
		int fonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fonright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object fon = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = " font-family: \" "+ fon +"; \" " ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_TextoArea",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // parametros_TextoArea ::= TEXT_ALIGN IGUAL COMILLAS align COMILLAS 
            {
              Object RESULT =null;
		int alileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aliright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ali = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = " text-align: \" "+ ali  +"; \" " ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_TextoArea",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // parametros_TextoArea ::= ID IGUAL COMILLAS IDENTIFICADOR COMILLAS 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "id=\""+ide+"\""; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_TextoArea",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // parametros_TextoArea ::= COLS IGUAL COMILLAS NUMERO COMILLAS 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "cols=\""+num+"\""; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_TextoArea",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // parametros_TextoArea ::= ROWS IGUAL COMILLAS NUMERO COMILLAS 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "rows=\""+num+"\""; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_TextoArea",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // parametros_TextoArea ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_TextoArea",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // paramsInput ::= CORCHETE_IZQ parametros_input CORCHETE_DER 
            {
              Object RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = params; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramsInput",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // paramsInput ::= paramsInput CORCHETE_IZQ parametros_input CORCHETE_DER 
            {
              Object RESULT =null;
		int prevleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int prevright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object prev = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = prev + " " + params; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramsInput",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // parametros_input ::= TYPE IGUAL COMILLAS type_input COMILLAS 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "type=\""+type+"\""; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_input",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // parametros_input ::= ID IGUAL COMILLAS IDENTIFICADOR COMILLAS 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = "id=\""+ide+"\""; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_input",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // parametros_input ::= FONT_SIZE IGUAL COMILLAS PIXEL COMILLAS 
            {
              Object RESULT =null;
		int pixleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pixright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object pix = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = " font-size: \" "+ pix   +"; \" "   ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_input",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // parametros_input ::= FONT_FAMI IGUAL COMILLAS font COMILLAS 
            {
              Object RESULT =null;
		int fonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fonright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object fon = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = " font-family: \" "+ fon +"; \" "   ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_input",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // parametros_input ::= TEXT_ALIGN IGUAL COMILLAS align COMILLAS 
            {
              Object RESULT =null;
		int alileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aliright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ali = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = " text-align: \" "+ ali  +"; \" "   ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_input",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // parametros_input ::= COLOR IGUAL COMILLAS colors COMILLAS 
            {
              Object RESULT =null;
		int colleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object col = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = " color: \" "+ col+"  \"; "  ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_input",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // parametros_input ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_input",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // type_input ::= TEXT 
            {
              Object RESULT =null;
		 RESULT = "text"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_input",74, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // type_input ::= NUMBER 
            {
              Object RESULT =null;
		 RESULT = "number"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_input",74, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // type_input ::= RADIO 
            {
              Object RESULT =null;
		 RESULT = "radio"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_input",74, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // type_input ::= CHECKBOX 
            {
              Object RESULT =null;
		 RESULT = "checkbox"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_input",74, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // type_input ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_input",74, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // paramsSpam ::= CORCHETE_IZQ parametros_spam CORCHETE_DER 
            {
              Object RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = params; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramsSpam",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // paramsSpam ::= paramsSpam CORCHETE_IZQ parametros_spam CORCHETE_DER 
            {
              Object RESULT =null;
		int prevleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int prevright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object prev = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = prev + " " + params; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramsSpam",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // parametros_spam ::= COLOR IGUAL COMILLAS colors COMILLAS 
            {
              Object RESULT =null;
		int colleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object col = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = " color: \" "+ col        +"  \"; "  ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_spam",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // parametros_spam ::= FONT_SIZE IGUAL COMILLAS PIXEL COMILLAS 
            {
              Object RESULT =null;
		int pixleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pixright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object pix = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = " font-size: \" "+ pix   +"; \" "  ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_spam",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // parametros_spam ::= FONT_FAMI IGUAL COMILLAS font COMILLAS 
            {
              Object RESULT =null;
		int fonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fonright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object fon = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = " font-family: \" "+ fon +"; \" "  ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_spam",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // parametros_spam ::= TEXT_ALIGN IGUAL COMILLAS align COMILLAS 
            {
              Object RESULT =null;
		int alileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aliright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ali = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = " text-align: \" "+ ali  +"; \" "  ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_spam",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // parametros_spam ::= ID IGUAL COMILLAS IDENTIFICADOR COMILLAS 
            {
              Object RESULT =null;
		int ideleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ideright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ide = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = " id = \" "+ ide +" \" "  ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_spam",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // parametros_spam ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros_spam",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // colors ::= BLACK 
            {
              Object RESULT =null;
		int blackleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blackright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object black = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =black ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("colors",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // colors ::= OLIVE 
            {
              Object RESULT =null;
		int oliveleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oliveright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object olive = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =olive ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("colors",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // colors ::= TEAL 
            {
              Object RESULT =null;
		int tealleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tealright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object teal = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =teal ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("colors",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // colors ::= RED 
            {
              Object RESULT =null;
		int redleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int redright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object red = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =red ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("colors",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // colors ::= BLUE 
            {
              Object RESULT =null;
		int blueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object blue = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =blue ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("colors",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // colors ::= MARRON 
            {
              Object RESULT =null;
		int marronleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int marronright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object marron = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT ="brown" ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("colors",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // colors ::= NAVY 
            {
              Object RESULT =null;
		int navyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int navyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object navy = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =navy ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("colors",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // colors ::= GRAY 
            {
              Object RESULT =null;
		int grayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int grayright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object gray = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =gray ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("colors",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // colors ::= LIME 
            {
              Object RESULT =null;
		int limeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int limeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lime = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =lime ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("colors",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // colors ::= FUCHSIA 
            {
              Object RESULT =null;
		int fuchsialeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fuchsiaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fuchsia = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =fuchsia ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("colors",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // colors ::= GREEN 
            {
              Object RESULT =null;
		int greenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int greenright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object green = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =green ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("colors",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // colors ::= WHITE 
            {
              Object RESULT =null;
		int whiteleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int whiteright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object white = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =white ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("colors",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // colors ::= PURPLE 
            {
              Object RESULT =null;
		int purpleleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int purpleright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object purple = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =purple ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("colors",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // colors ::= SILVER 
            {
              Object RESULT =null;
		int silverleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int silverright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object silver = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =silver ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("colors",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // colors ::= YELLOW 
            {
              Object RESULT =null;
		int yellowleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yellowright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object yellow = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =yellow ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("colors",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // colors ::= AQUA 
            {
              Object RESULT =null;
		int aqualeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aquaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object aqua = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =aqua ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("colors",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // colors ::= HEXADECIMAL 
            {
              Object RESULT =null;
		int hexaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hexaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object hexa = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =hexa ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("colors",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // colors ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("colors",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // align ::= LEFT 
            {
              Object RESULT =null;
		int lefleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lefright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lef = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= lef; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("align",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // align ::= RIGHT 
            {
              Object RESULT =null;
		int rigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rigright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rig = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= rig; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("align",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // align ::= CENTER 
            {
              Object RESULT =null;
		int cenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cenright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cen = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= cen; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("align",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // align ::= JUSTIFY 
            {
              Object RESULT =null;
		int jusleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int jusright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object jus = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= jus; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("align",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // align ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("align",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // font ::= COURIER 
            {
              Object RESULT =null;
		int couleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int couright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cou = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= cou ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("font",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // font ::= VERDANA 
            {
              Object RESULT =null;
		int verleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int verright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ver = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= ver ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("font",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // font ::= ARIAL 
            {
              Object RESULT =null;
		int arileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ariright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ari = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= ari ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("font",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // font ::= GENEVA 
            {
              Object RESULT =null;
		int genleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int genright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object gen = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= gen ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("font",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // font ::= SANS_SERIF 
            {
              Object RESULT =null;
		int sanleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sanright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object san = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= san ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("font",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // font ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("font",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
