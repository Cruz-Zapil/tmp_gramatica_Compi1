package com.CruzZapil.CompiFinal.gramatica;
// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/main/jflex/LexerCC.lex


import java_cup.runtime.Symbol;


@SuppressWarnings("fallthrough")
public class LexerCC implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\247\u0100"+
    "\10\u0500\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\3\3\22\0\1\1\1\4\1\5"+
    "\1\6\2\0\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\1\1\15\1\16\1\17\1\20\1\21\10\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\1\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\42\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\42"+
    "\1\61\1\0\1\62\1\0\1\63\1\0\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75"+
    "\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105"+
    "\1\106\1\107\1\110\1\111\1\112\1\113\1\114\1\115"+
    "\1\116\1\117\1\120\7\0\1\3\32\0\1\1\40\0"+
    "\1\1\7\0\1\1\3\0\1\1\3\0\1\1\1\0"+
    "\1\1\6\0\1\1\1\0\1\1\4\0\1\1\7\0"+
    "\1\1\3\0\1\1\3\0\1\1\1\0\1\1\6\0"+
    "\1\1\1\0\1\1\u0183\0\1\1\177\0\13\1\35\0"+
    "\2\3\5\0\1\1\57\0\1\1\240\0\1\1\377\0"+
    "\u0100\121";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\2\1\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\2\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\1\20\2\1\22\1\23"+
    "\23\2\1\24\1\1\1\25\1\11\1\12\1\26\1\14"+
    "\1\2\1\27\1\1\1\30\1\1\1\31\1\1\2\2"+
    "\1\1\1\32\1\33\1\34\1\1\2\2\1\35\2\2"+
    "\1\35\10\2\1\36\30\2\1\37\30\2\1\40\2\26"+
    "\1\2\1\26\1\41\1\1\1\42\1\1\1\43\2\1"+
    "\1\2\1\44\2\2\7\35\1\45\2\35\3\2\1\46"+
    "\10\2\1\35\6\2\1\47\36\2\1\50\1\2\1\51"+
    "\2\2\1\52\10\2\2\26\1\53\1\26\1\54\7\1"+
    "\1\55\4\1\3\2\1\35\1\56\1\35\1\57\1\35"+
    "\1\60\12\35\1\2\1\61\1\62\1\63\3\2\1\64"+
    "\3\2\2\35\3\2\1\65\2\2\1\66\2\2\1\67"+
    "\2\2\1\70\3\2\1\71\5\2\1\72\2\2\1\73"+
    "\2\2\1\74\1\75\1\2\1\76\1\77\6\2\1\100"+
    "\3\2\1\101\1\102\1\103\1\104\3\2\2\26\1\53"+
    "\1\26\2\1\1\105\1\1\1\106\1\1\1\107\14\1"+
    "\1\2\1\110\1\2\2\35\1\111\1\35\1\112\10\35"+
    "\7\2\2\35\5\2\1\113\1\2\1\114\3\2\1\115"+
    "\1\116\2\2\1\117\2\2\1\120\5\2\1\121\2\2"+
    "\1\122\1\123\4\2\1\124\1\125\1\2\2\26\1\53"+
    "\3\1\1\126\1\1\1\127\12\1\1\35\1\2\1\130"+
    "\1\35\1\131\1\35\1\132\3\35\1\133\2\35\2\2"+
    "\1\134\1\135\1\136\2\2\2\35\1\2\1\137\5\2"+
    "\1\140\1\2\1\141\4\2\1\142\2\2\1\143\1\144"+
    "\1\2\1\145\1\2\1\146\1\147\1\2\1\150\1\2"+
    "\1\53\1\54\1\151\1\1\1\152\1\1\1\153\3\1"+
    "\1\154\2\1\1\41\1\155\1\35\1\2\1\35\1\156"+
    "\4\35\1\157\1\160\2\2\3\35\1\2\1\161\1\2"+
    "\1\162\1\2\1\163\1\2\1\164\2\2\1\165\1\166"+
    "\1\167\1\170\2\2\2\1\1\171\4\1\1\172\1\35"+
    "\1\2\1\173\1\174\1\35\1\175\2\35\1\2\2\35"+
    "\1\1\1\176\2\2\1\177\4\2\1\54\1\200\1\201"+
    "\1\1\1\202\1\1\4\35\1\1\3\35\1\203\1\204"+
    "\2\2\1\205\2\2\2\1\1\206\2\35\1\207\1\210"+
    "\1\35\1\211\1\35\1\212\1\2\1\213\1\214\1\1"+
    "\1\215\1\35\1\216\2\35\1\217\1\220\1\35\1\221"+
    "\2\35\1\222\4\35\1\223";

  private static int [] zzUnpackAction() {
    int [] result = new int[613];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\122\0\244\0\366\0\u0148\0\u019a\0\u01ec\0\u023e"+
    "\0\u0290\0\366\0\366\0\366\0\366\0\366\0\u02e2\0\u0334"+
    "\0\u0386\0\366\0\366\0\u03d8\0\u042a\0\u047c\0\u04ce\0\u0520"+
    "\0\u0572\0\u05c4\0\u0616\0\u0668\0\u06ba\0\u070c\0\u075e\0\u07b0"+
    "\0\u0802\0\u0854\0\u08a6\0\u08f8\0\u094a\0\u099c\0\u09ee\0\244"+
    "\0\244\0\u0a40\0\u0a92\0\u0ae4\0\u0b36\0\u0b88\0\u0bda\0\u0c2c"+
    "\0\u0c7e\0\u0cd0\0\u0d22\0\u0d74\0\u0dc6\0\u0e18\0\u0e6a\0\u0ebc"+
    "\0\u0f0e\0\u0f60\0\u0fb2\0\u1004\0\244\0\u1056\0\244\0\u10a8"+
    "\0\u10a8\0\u10fa\0\u114c\0\u119e\0\366\0\u019a\0\u019a\0\u11f0"+
    "\0\244\0\u1242\0\u1294\0\u12e6\0\u1338\0\244\0\366\0\244"+
    "\0\u138a\0\u13dc\0\u142e\0\u1480\0\u14d2\0\u1524\0\u1576\0\u15c8"+
    "\0\u161a\0\u166c\0\u16be\0\u1710\0\u1762\0\u17b4\0\u1806\0\u0572"+
    "\0\u1858\0\u18aa\0\u18fc\0\u194e\0\u19a0\0\u19f2\0\u1a44\0\u1a96"+
    "\0\u1ae8\0\u1b3a\0\u1b8c\0\u1bde\0\u1c30\0\u1c82\0\u1cd4\0\u1d26"+
    "\0\u1d78\0\u1dca\0\u1e1c\0\u1e6e\0\u1ec0\0\u1f12\0\u1f64\0\u1fb6"+
    "\0\u0572\0\u2008\0\u205a\0\u20ac\0\u20fe\0\u2150\0\u21a2\0\u21f4"+
    "\0\u2246\0\u2298\0\u22ea\0\u233c\0\u238e\0\u23e0\0\u2432\0\u2484"+
    "\0\u24d6\0\u2528\0\u257a\0\u25cc\0\u261e\0\u2670\0\u26c2\0\u2714"+
    "\0\u2766\0\244\0\u27b8\0\u280a\0\u285c\0\u28ae\0\u2900\0\u2952"+
    "\0\244\0\u29a4\0\366\0\u29f6\0\u2a48\0\u2a9a\0\u0572\0\u2aec"+
    "\0\u2b3e\0\u2b90\0\u2be2\0\u2c34\0\u2c86\0\u2cd8\0\u2d2a\0\u2d7c"+
    "\0\u1480\0\u2dce\0\u2e20\0\u2e72\0\u2ec4\0\u2f16\0\u0572\0\u2f68"+
    "\0\u2fba\0\u300c\0\u305e\0\u30b0\0\u3102\0\u3154\0\u31a6\0\u31f8"+
    "\0\u324a\0\u329c\0\u32ee\0\u3340\0\u3392\0\u33e4\0\u0572\0\u3436"+
    "\0\u3488\0\u34da\0\u352c\0\u357e\0\u35d0\0\u3622\0\u3674\0\u36c6"+
    "\0\u3718\0\u376a\0\u37bc\0\u380e\0\u3860\0\u38b2\0\u3904\0\u3956"+
    "\0\u39a8\0\u39fa\0\u3a4c\0\u3a9e\0\u3af0\0\u3b42\0\u3b94\0\u3be6"+
    "\0\u3c38\0\u3c8a\0\u3cdc\0\u3d2e\0\u3d80\0\u0572\0\u3dd2\0\u3e24"+
    "\0\u3e76\0\u3ec8\0\u0572\0\u3f1a\0\u3f6c\0\u3fbe\0\u4010\0\u4062"+
    "\0\u40b4\0\u4106\0\u4158\0\u41aa\0\u41fc\0\u424e\0\u42a0\0\u42f2"+
    "\0\u4344\0\u4396\0\u43e8\0\u443a\0\u448c\0\u44de\0\u4530\0\244"+
    "\0\u4582\0\u45d4\0\u4626\0\u4678\0\u46ca\0\u471c\0\u476e\0\u47c0"+
    "\0\u1480\0\u4812\0\u1480\0\u4864\0\u1480\0\u48b6\0\u4908\0\u495a"+
    "\0\u49ac\0\u49fe\0\u4a50\0\u4aa2\0\u4af4\0\u4b46\0\u4b98\0\u4bea"+
    "\0\u0572\0\u0572\0\u0572\0\u4c3c\0\u4c8e\0\u4ce0\0\u0572\0\u4d32"+
    "\0\u4d84\0\u4dd6\0\u4e28\0\u4e7a\0\u4ecc\0\u4f1e\0\u4f70\0\u4fc2"+
    "\0\u5014\0\u5066\0\u0572\0\u50b8\0\u510a\0\u0572\0\u515c\0\u51ae"+
    "\0\u0572\0\u5200\0\u5252\0\u52a4\0\u0572\0\u52f6\0\u5348\0\u539a"+
    "\0\u53ec\0\u543e\0\u0572\0\u5490\0\u54e2\0\u0572\0\u5534\0\u5586"+
    "\0\u0572\0\u0572\0\u55d8\0\u0572\0\u0572\0\u562a\0\u567c\0\u56ce"+
    "\0\u5720\0\u5772\0\u57c4\0\u0572\0\u5816\0\u5868\0\u58ba\0\u0572"+
    "\0\u590c\0\u0572\0\u0572\0\u595e\0\u59b0\0\u5a02\0\u5a54\0\u5aa6"+
    "\0\u5af8\0\u0334\0\u5b4a\0\u5b9c\0\244\0\u5bee\0\244\0\u5c40"+
    "\0\244\0\u5c92\0\u5ce4\0\u5d36\0\u5d88\0\u5dda\0\u5e2c\0\u5e7e"+
    "\0\u5ed0\0\u5f22\0\u5f74\0\u5fc6\0\u6018\0\u606a\0\u0572\0\u60bc"+
    "\0\u610e\0\u6160\0\u1480\0\u61b2\0\u1480\0\u6204\0\u6256\0\u62a8"+
    "\0\u62fa\0\u634c\0\u639e\0\u63f0\0\u6442\0\u6494\0\u64e6\0\u6538"+
    "\0\u658a\0\u65dc\0\u662e\0\u6680\0\u66d2\0\u6724\0\u6776\0\u67c8"+
    "\0\u681a\0\u686c\0\u68be\0\u0572\0\u6910\0\u0572\0\u6962\0\u69b4"+
    "\0\u6a06\0\u0572\0\u0572\0\u6a58\0\u6aaa\0\u0572\0\u6afc\0\u6b4e"+
    "\0\u0572\0\u6ba0\0\u6bf2\0\u6c44\0\u6c96\0\u6ce8\0\u0572\0\u6d3a"+
    "\0\u6d8c\0\u0572\0\u0572\0\u6dde\0\u6e30\0\u6e82\0\u6ed4\0\u0572"+
    "\0\u0572\0\u6f26\0\366\0\u6f78\0\u6fca\0\u701c\0\u706e\0\u70c0"+
    "\0\244\0\u7112\0\244\0\u7164\0\u71b6\0\u7208\0\u725a\0\u72ac"+
    "\0\u72fe\0\u7350\0\u73a2\0\u73f4\0\u7446\0\u7498\0\u74ea\0\u1480"+
    "\0\u753c\0\u1480\0\u758e\0\u1480\0\u75e0\0\u7632\0\u7684\0\u1480"+
    "\0\u76d6\0\u7728\0\u777a\0\u77cc\0\u0572\0\u0572\0\u0572\0\u781e"+
    "\0\u7870\0\u78c2\0\u7914\0\u7966\0\u0572\0\u79b8\0\u7a0a\0\u7a5c"+
    "\0\u7aae\0\u7b00\0\u0572\0\u7b52\0\u0572\0\u7ba4\0\u7bf6\0\u7c48"+
    "\0\u7c9a\0\u0572\0\u7cec\0\u7d3e\0\u0572\0\u0572\0\u7d90\0\u0572"+
    "\0\u7de2\0\u0572\0\u0572\0\u7e34\0\u0572\0\u6f78\0\366\0\u7e86"+
    "\0\244\0\u7ed8\0\244\0\u7f2a\0\244\0\u7f7c\0\u7fce\0\u8020"+
    "\0\244\0\u8072\0\u80c4\0\u4626\0\244\0\u8116\0\u8168\0\u81ba"+
    "\0\u1480\0\u820c\0\u825e\0\u82b0\0\u8302\0\u1480\0\u0572\0\u8354"+
    "\0\u83a6\0\u83f8\0\u844a\0\u849c\0\u84ee\0\u0572\0\u8540\0\u0572"+
    "\0\u8592\0\u0572\0\u85e4\0\u0572\0\u8636\0\u8688\0\u0572\0\u0572"+
    "\0\u0572\0\u0572\0\u86da\0\u872c\0\u877e\0\u87d0\0\244\0\u8822"+
    "\0\u8874\0\u88c6\0\u8918\0\244\0\u896a\0\u89bc\0\u1480\0\u1480"+
    "\0\u8a0e\0\u1480\0\u8a60\0\u8ab2\0\u8b04\0\u8b56\0\u8ba8\0\u8bfa"+
    "\0\u0572\0\u8c4c\0\u8c9e\0\u0572\0\u8cf0\0\u8d42\0\u8d94\0\u8de6"+
    "\0\244\0\244\0\244\0\u8e38\0\244\0\u8e8a\0\u8edc\0\u8f2e"+
    "\0\u8f80\0\u8fd2\0\u9024\0\u9076\0\u90c8\0\u911a\0\244\0\u0572"+
    "\0\u916c\0\u91be\0\366\0\u9210\0\u9262\0\u92b4\0\u9306\0\u1480"+
    "\0\u9358\0\u93aa\0\u1480\0\244\0\u93fc\0\u1480\0\u944e\0\u0572"+
    "\0\u94a0\0\366\0\366\0\u94f2\0\244\0\u9544\0\u1480\0\u9596"+
    "\0\u95e8\0\366\0\244\0\u963a\0\u1480\0\u968c\0\u96de\0\u1480"+
    "\0\u9730\0\u9782\0\u97d4\0\u9826\0\u1480";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[613];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\3\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\4\1\17\1\20\2\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\2\31"+
    "\1\41\1\31\1\42\1\43\1\31\1\44\1\31\1\45"+
    "\1\31\1\46\1\47\2\31\1\50\1\51\1\3\1\52"+
    "\1\53\1\54\1\55\1\31\1\56\1\57\1\60\1\61"+
    "\1\62\1\31\1\63\1\64\1\65\1\66\1\67\1\31"+
    "\1\70\1\71\1\72\2\31\1\73\1\31\1\74\1\31"+
    "\1\75\1\76\1\77\2\3\3\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\100\1\101\1\4"+
    "\1\17\1\102\2\103\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\2\31\1\41\1\31\1\42\1\43\1\31"+
    "\1\44\1\31\1\45\1\31\1\46\1\47\2\31\1\50"+
    "\1\51\1\3\1\52\1\53\1\54\1\55\1\31\1\56"+
    "\1\57\1\60\1\61\1\62\1\31\1\63\1\64\1\65"+
    "\1\66\1\67\1\31\1\70\1\71\1\72\2\31\1\73"+
    "\1\31\1\74\1\31\1\75\1\76\1\77\124\3\4\4"+
    "\4\3\14\4\1\3\1\4\2\3\30\4\3\3\32\4"+
    "\5\3\3\4\1\104\4\3\14\4\1\3\1\105\2\3"+
    "\30\4\3\3\32\4\4\3\5\106\1\107\114\106\20\3"+
    "\3\110\6\3\6\110\25\3\6\110\37\3\1\111\112\3"+
    "\122\112\1\3\4\4\4\3\14\4\1\3\1\4\2\3"+
    "\2\4\1\113\25\4\3\3\32\4\5\3\4\4\4\3"+
    "\7\4\3\20\2\4\1\3\1\4\2\3\30\4\3\3"+
    "\17\4\1\114\12\4\5\3\4\4\4\3\7\4\3\21"+
    "\2\4\1\3\1\4\2\3\30\4\3\3\17\4\1\114"+
    "\12\4\10\3\1\115\21\3\1\116\74\3\4\4\4\3"+
    "\14\4\1\3\1\117\2\3\30\4\3\3\32\4\32\3"+
    "\1\120\165\3\1\121\30\3\4\4\4\3\7\4\3\31"+
    "\2\4\1\3\1\4\2\3\13\31\1\122\5\31\1\123"+
    "\6\31\2\3\1\124\21\31\1\125\10\31\5\3\4\4"+
    "\4\3\7\4\3\31\2\4\1\3\1\4\2\3\30\31"+
    "\2\3\1\124\32\31\5\3\4\4\4\3\7\4\3\31"+
    "\2\4\1\3\1\4\2\3\1\126\27\31\2\3\1\127"+
    "\16\31\1\130\13\31\5\3\4\4\4\3\7\4\3\31"+
    "\2\4\1\3\1\4\2\3\4\31\1\131\23\31\2\3"+
    "\1\124\32\31\5\3\4\4\4\3\7\4\3\31\2\4"+
    "\1\3\1\4\2\3\13\31\1\132\1\31\1\133\10\31"+
    "\1\134\1\31\2\3\1\124\32\31\5\3\4\4\4\3"+
    "\7\4\3\31\2\4\1\3\1\4\2\3\23\31\1\135"+
    "\4\31\2\3\1\124\32\31\5\3\4\4\4\3\7\4"+
    "\3\31\2\4\1\3\1\4\2\3\30\31\2\3\1\124"+
    "\4\31\1\136\25\31\5\3\4\4\4\3\7\4\3\31"+
    "\2\4\1\3\1\4\2\3\23\31\1\137\4\31\2\3"+
    "\1\124\32\31\5\3\4\4\4\3\7\4\3\31\2\4"+
    "\1\3\1\4\2\3\5\31\1\140\7\31\1\141\12\31"+
    "\2\3\1\124\32\31\5\3\4\4\4\3\7\4\3\31"+
    "\2\4\1\3\1\4\2\3\4\31\1\142\23\31\2\3"+
    "\1\124\32\31\5\3\4\4\4\3\7\4\3\31\2\4"+
    "\1\3\1\4\2\3\23\31\1\143\4\31\2\3\1\124"+
    "\32\31\5\3\4\4\4\3\7\4\3\31\2\4\1\3"+
    "\1\4\2\3\15\31\1\144\12\31\2\3\1\124\32\31"+
    "\5\3\4\4\4\3\7\4\3\31\2\4\1\3\1\4"+
    "\2\3\4\31\1\145\23\31\2\3\1\124\32\31\5\3"+
    "\4\4\4\3\7\4\3\31\2\4\1\3\1\4\2\3"+
    "\7\31\1\146\20\31\2\3\1\124\32\31\5\3\4\4"+
    "\4\3\7\4\3\31\2\4\1\3\1\4\2\3\30\31"+
    "\2\3\1\124\4\31\1\147\25\31\5\3\4\4\4\3"+
    "\7\4\3\31\2\4\1\3\1\4\2\3\7\31\1\150"+
    "\20\31\2\3\1\124\32\31\5\3\4\4\4\3\7\4"+
    "\3\31\2\4\1\3\1\4\2\3\30\31\2\3\1\124"+
    "\13\31\1\151\4\31\1\152\11\31\5\3\4\4\4\3"+
    "\7\4\3\31\2\4\1\3\1\4\2\3\30\31\2\3"+
    "\1\124\1\153\12\31\1\154\2\31\1\155\13\31\5\3"+
    "\4\4\4\3\7\4\3\31\2\4\1\3\1\4\2\3"+
    "\30\31\2\3\1\124\4\31\1\156\2\31\1\157\3\31"+
    "\1\160\2\31\1\161\13\31\5\3\4\4\4\3\7\4"+
    "\3\31\2\4\1\3\1\4\2\3\30\31\2\3\1\124"+
    "\4\31\1\162\25\31\5\3\4\4\4\3\7\4\3\31"+
    "\2\4\1\3\1\4\2\3\30\31\2\3\1\124\1\163"+
    "\15\31\1\164\5\31\1\165\5\31\5\3\4\4\4\3"+
    "\7\4\3\31\2\4\1\3\1\4\2\3\30\31\2\3"+
    "\1\124\21\31\1\166\10\31\5\3\4\4\4\3\7\4"+
    "\3\31\2\4\1\3\1\4\2\3\30\31\2\3\1\124"+
    "\4\31\1\167\14\31\1\170\10\31\5\3\4\4\4\3"+
    "\7\4\3\31\2\4\1\3\1\4\2\3\30\31\2\3"+
    "\1\124\3\31\1\171\11\31\1\172\14\31\5\3\4\4"+
    "\4\3\7\4\3\31\2\4\1\3\1\4\2\3\30\31"+
    "\2\3\1\124\24\31\1\173\5\31\5\3\4\4\4\3"+
    "\7\4\3\31\2\4\1\3\1\4\2\3\30\31\2\3"+
    "\1\124\4\31\1\174\3\31\1\175\21\31\5\3\4\4"+
    "\4\3\7\4\3\31\2\4\1\3\1\4\2\3\30\31"+
    "\2\3\1\124\1\176\31\31\5\3\4\4\4\3\7\4"+
    "\3\31\2\4\1\3\1\4\2\3\30\31\2\3\1\124"+
    "\1\177\23\31\1\200\5\31\5\3\4\4\4\3\7\4"+
    "\3\31\2\4\1\3\1\4\2\3\30\31\2\3\1\124"+
    "\13\31\1\201\1\31\1\202\14\31\5\3\4\4\4\3"+
    "\7\4\3\31\2\4\1\3\1\4\2\3\30\31\2\3"+
    "\1\124\24\31\1\203\5\31\5\3\4\4\4\3\7\4"+
    "\3\31\2\4\1\3\1\4\2\3\30\31\2\3\1\124"+
    "\1\204\3\31\1\205\3\31\1\206\5\31\1\207\13\31"+
    "\5\3\4\4\4\3\7\4\3\31\2\4\1\3\1\4"+
    "\2\3\30\31\2\3\1\124\1\210\7\31\1\211\10\31"+
    "\1\212\1\31\1\213\6\31\5\3\4\4\4\3\7\4"+
    "\3\31\2\4\1\3\1\4\2\3\30\31\2\3\1\124"+
    "\4\31\1\214\14\31\1\215\6\31\1\216\1\31\5\3"+
    "\4\4\4\3\7\4\3\31\2\4\1\3\1\4\2\3"+
    "\30\31\2\3\1\124\7\31\1\217\1\220\21\31\5\3"+
    "\4\4\4\3\7\4\3\31\2\4\1\3\1\4\2\3"+
    "\30\31\2\3\1\124\4\31\1\221\25\31\123\3\1\222"+
    "\3\3\4\4\4\3\7\4\1\223\2\224\2\4\1\3"+
    "\1\4\2\3\30\4\3\3\32\4\5\3\4\4\4\3"+
    "\5\4\1\225\1\4\3\226\2\4\1\3\1\4\2\3"+
    "\30\4\3\3\17\4\1\114\12\4\5\3\4\4\4\3"+
    "\5\4\1\225\1\4\3\103\2\4\1\3\1\4\2\3"+
    "\30\4\3\3\17\4\1\114\12\4\4\3\1\227\1\104"+
    "\1\4\2\104\4\227\14\104\1\227\1\104\2\227\30\104"+
    "\3\227\32\104\4\227\20\3\3\230\6\3\6\230\25\3"+
    "\6\230\40\3\1\231\112\3\4\4\4\3\14\4\1\3"+
    "\1\4\2\3\30\4\2\3\1\232\32\4\5\3\4\4"+
    "\4\3\14\4\1\3\1\4\2\3\30\4\3\3\27\4"+
    "\1\233\2\4\21\3\1\234\203\3\1\235\23\3\4\4"+
    "\4\3\7\4\3\31\2\4\1\3\1\4\2\3\4\31"+
    "\1\236\23\31\2\3\1\124\32\31\5\3\4\4\4\3"+
    "\7\4\3\31\2\4\1\3\1\4\2\3\2\31\1\237"+
    "\25\31\2\3\1\124\32\31\24\3\3\124\6\3\30\124"+
    "\2\3\33\124\5\3\4\4\4\3\7\4\3\31\2\4"+
    "\1\3\1\4\2\3\30\31\2\3\1\124\10\31\1\240"+
    "\21\31\5\3\4\4\4\3\7\4\3\31\2\4\1\3"+
    "\1\4\2\3\20\31\1\241\7\31\2\3\1\124\32\31"+
    "\24\3\3\124\6\3\1\124\1\242\1\243\1\244\3\124"+
    "\1\245\1\246\2\124\1\247\2\124\1\250\1\251\1\124"+
    "\1\252\1\253\5\124\2\3\33\124\5\3\4\4\4\3"+
    "\7\4\3\31\2\4\1\3\1\4\2\3\30\31\2\3"+
    "\1\124\24\31\1\254\5\31\5\3\4\4\4\3\7\4"+
    "\3\31\2\4\1\3\1\4\2\3\21\31\1\255\6\31"+
    "\2\3\1\124\32\31\5\3\4\4\4\3\7\4\3\31"+
    "\2\4\1\3\1\4\2\3\21\31\1\256\6\31\2\3"+
    "\1\124\32\31\5\3\4\4\4\3\7\4\3\31\2\4"+
    "\1\3\1\4\2\3\3\31\1\257\24\31\2\3\1\124"+
    "\32\31\5\3\4\4\4\3\7\4\3\31\2\4\1\3"+
    "\1\4\2\3\10\31\1\260\17\31\2\3\1\124\32\31"+
    "\5\3\4\4\4\3\7\4\3\31\2\4\1\3\1\4"+
    "\2\3\15\31\1\261\12\31\2\3\1\124\32\31\5\3"+
    "\4\4\4\3\7\4\3\31\2\4\1\3\1\4\2\3"+
    "\30\31\2\3\1\124\15\31\1\262\14\31\5\3\4\4"+
    "\4\3\7\4\3\31\2\4\1\3\1\4\2\3\15\31"+
    "\1\263\12\31\2\3\1\124\32\31\5\3\4\4\4\3"+
    "\7\4\3\31\2\4\1\3\1\4\2\3\10\31\1\264"+
    "\10\31\1\265\6\31\2\3\1\124\32\31\5\3\4\4"+
    "\4\3\7\4\3\31\2\4\1\3\1\4\2\3\22\31"+
    "\1\266\5\31\2\3\1\124\32\31\5\3\4\4\4\3"+
    "\7\4\3\31\2\4\1\3\1\4\2\3\14\31\1\267"+
    "\13\31\2\3\1\124\32\31\5\3\4\4\4\3\7\4"+
    "\3\31\2\4\1\3\1\4\2\3\30\31\2\3\1\270"+
    "\32\31\5\3\4\4\4\3\7\4\3\31\2\4\1\3"+
    "\1\4\2\3\3\31\1\271\13\31\1\272\4\31\1\273"+
    "\3\31\2\3\1\124\32\31\5\3\4\4\4\3\7\4"+
    "\3\31\2\4\1\3\1\4\2\3\4\31\1\274\23\31"+
    "\2\3\1\124\32\31\5\3\4\4\4\3\7\4\3\31"+
    "\2\4\1\3\1\4\2\3\30\31\2\3\1\124\21\31"+
    "\1\275\10\31\5\3\4\4\4\3\7\4\3\31\2\4"+
    "\1\3\1\4\2\3\10\31\1\276\17\31\2\3\1\124"+
    "\32\31\5\3\4\4\4\3\7\4\3\31\2\4\1\3"+
    "\1\4\2\3\30\31\2\3\1\124\23\31\1\277\6\31"+
    "\5\3\4\4\4\3\7\4\3\31\2\4\1\3\1\4"+
    "\2\3\30\31\2\3\1\124\24\31\1\300\5\31\5\3"+
    "\4\4\4\3\7\4\3\31\2\4\1\3\1\4\2\3"+
    "\30\31\2\3\1\124\2\31\1\301\27\31\5\3\4\4"+
    "\4\3\7\4\3\31\2\4\1\3\1\4\2\3\30\31"+
    "\2\3\1\124\1\302\23\31\1\303\5\31\5\3\4\4"+
    "\4\3\7\4\3\31\2\4\1\3\1\4\2\3\30\31"+
    "\2\3\1\124\16\31\1\304\13\31\5\3\4\4\4\3"+
    "\7\4\3\31\2\4\1\3\1\4\2\3\30\31\2\3"+
    "\1\124\15\31\1\305\14\31\5\3\4\4\4\3\7\4"+
    "\3\31\2\4\1\3\1\4\2\3\30\31\2\3\1\124"+
    "\1\306\3\31\1\307\25\31\5\3\4\4\4\3\7\4"+
    "\3\31\2\4\1\3\1\4\2\3\30\31\2\3\1\124"+
    "\1\310\31\31\5\3\4\4\4\3\7\4\3\31\2\4"+
    "\1\3\1\4\2\3\30\31\2\3\1\124\13\31\1\311"+
    "\16\31\5\3\4\4\4\3\7\4\3\31\2\4\1\3"+
    "\1\4\2\3\30\31\2\3\1\124\2\31\1\312\27\31"+
    "\5\3\4\4\4\3\7\4\3\31\2\4\1\3\1\4"+
    "\2\3\30\31\2\3\1\124\13\31\1\313\16\31\5\3"+
    "\4\4\4\3\7\4\3\31\2\4\1\3\1\4\2\3"+
    "\30\31\2\3\1\124\15\31\1\314\14\31\5\3\4\4"+
    "\4\3\7\4\3\31\2\4\1\3\1\4\2\3\30\31"+
    "\2\3\1\124\2\31\1\315\27\31\5\3\4\4\4\3"+
    "\7\4\3\31\2\4\1\3\1\4\2\3\30\31\2\3"+
    "\1\124\1\316\3\31\1\317\25\31\5\3\4\4\4\3"+
    "\7\4\3\31\2\4\1\3\1\4\2\3\30\31\2\3"+
    "\1\124\10\31\1\320\21\31\5\3\4\4\4\3\7\4"+
    "\3\31\2\4\1\3\1\4\2\3\30\31\2\3\1\124"+
    "\4\31\1\321\25\31\5\3\4\4\4\3\7\4\3\31"+
    "\2\4\1\3\1\4\2\3\30\31\2\3\1\124\23\31"+
    "\1\322\6\31\5\3\4\4\4\3\7\4\3\31\2\4"+
    "\1\3\1\4\2\3\30\31\2\3\1\124\22\31\1\323"+
    "\7\31\5\3\4\4\4\3\7\4\3\31\2\4\1\3"+
    "\1\4\2\3\30\31\2\3\1\124\5\31\1\324\24\31"+
    "\5\3\4\4\4\3\7\4\3\31\2\4\1\3\1\4"+
    "\2\3\30\31\2\3\1\124\14\31\1\325\15\31\5\3"+
    "\4\4\4\3\7\4\3\31\2\4\1\3\1\4\2\3"+
    "\30\31\2\3\1\124\21\31\1\326\10\31\5\3\4\4"+
    "\4\3\7\4\3\31\2\4\1\3\1\4\2\3\30\31"+
    "\2\3\1\124\14\31\1\327\10\31\1\330\4\31\5\3"+
    "\4\4\4\3\7\4\3\31\2\4\1\3\1\4\2\3"+
    "\30\31\2\3\1\124\14\31\1\331\15\31\5\3\4\4"+
    "\4\3\7\4\3\31\2\4\1\3\1\4\2\3\30\31"+
    "\2\3\1\124\10\31\1\332\21\31\5\3\4\4\4\3"+
    "\7\4\3\31\2\4\1\3\1\4\2\3\30\31\2\3"+
    "\1\124\2\31\1\333\27\31\5\3\4\4\4\3\7\4"+
    "\3\31\2\4\1\3\1\4\2\3\30\31\2\3\1\124"+
    "\21\31\1\334\10\31\5\3\4\4\4\3\7\4\3\31"+
    "\2\4\1\3\1\4\2\3\30\31\2\3\1\124\3\31"+
    "\1\335\26\31\5\3\4\4\4\3\7\4\3\31\2\4"+
    "\1\3\1\4\2\3\30\31\2\3\1\124\3\31\1\336"+
    "\26\31\5\3\4\4\4\3\7\4\3\31\2\4\1\3"+
    "\1\4\2\3\30\31\2\3\1\124\6\31\1\337\23\31"+
    "\5\3\4\4\4\3\7\4\3\31\2\4\1\3\1\4"+
    "\2\3\30\31\2\3\1\124\26\31\1\340\3\31\5\3"+
    "\4\4\4\3\7\4\3\31\2\4\1\3\1\4\2\3"+
    "\30\31\2\3\1\124\15\31\1\341\14\31\5\3\4\4"+
    "\4\3\7\4\3\31\2\4\1\3\1\4\2\3\30\31"+
    "\2\3\1\124\13\31\1\342\16\31\5\3\4\4\4\3"+
    "\7\4\3\31\2\4\1\3\1\4\2\3\30\31\2\3"+
    "\1\124\2\31\1\343\27\31\5\3\4\4\4\3\7\4"+
    "\3\31\2\4\1\3\1\4\2\3\30\31\2\3\1\124"+
    "\21\31\1\344\10\31\5\3\4\4\4\3\7\4\3\31"+
    "\2\4\1\3\1\4\2\3\30\31\2\3\1\124\1\345"+
    "\26\31\1\346\2\31\5\3\4\4\4\3\7\4\3\31"+
    "\2\4\1\3\1\4\2\3\30\31\2\3\1\124\24\31"+
    "\1\347\5\31\5\3\4\4\4\3\7\4\3\31\2\4"+
    "\1\3\1\4\2\3\30\31\2\3\1\124\17\31\1\350"+
    "\12\31\5\3\4\4\4\3\7\4\3\31\2\4\1\3"+
    "\1\4\2\3\30\31\2\3\1\124\10\31\1\351\21\31"+
    "\5\3\4\4\4\3\7\4\3\31\2\4\1\3\1\4"+
    "\2\3\30\31\2\3\1\124\3\31\1\352\26\31\5\3"+
    "\4\4\4\3\7\4\3\31\2\4\1\3\1\4\2\3"+
    "\30\31\2\3\1\124\13\31\1\353\16\31\5\3\4\4"+
    "\4\3\5\4\1\225\1\4\3\354\2\4\1\3\1\4"+
    "\2\3\30\4\3\3\32\4\5\3\4\4\4\3\5\4"+
    "\1\225\1\4\3\355\2\4\1\3\1\4\2\3\30\4"+
    "\3\3\32\4\5\3\4\4\4\3\7\4\3\356\2\4"+
    "\1\3\1\4\2\3\30\4\3\3\32\4\5\3\4\4"+
    "\4\3\7\4\3\357\2\4\1\3\1\4\2\3\30\4"+
    "\3\3\17\4\1\114\12\4\4\3\2\227\1\3\117\227"+
    "\20\3\3\360\6\3\6\360\25\3\6\360\62\3\1\361"+
    "\1\362\1\363\3\3\1\364\1\365\2\3\1\366\2\3"+
    "\1\367\1\370\1\3\1\371\1\372\63\3\1\373\206\3"+
    "\1\374\20\3\4\4\4\3\7\4\3\31\2\4\1\3"+
    "\1\4\2\3\20\31\1\375\7\31\2\3\1\124\32\31"+
    "\5\3\4\4\4\3\7\4\3\31\2\4\1\3\1\4"+
    "\2\3\30\31\2\3\1\124\1\376\31\31\5\3\4\4"+
    "\4\3\7\4\3\31\2\4\1\3\1\4\2\3\1\377"+
    "\27\31\2\3\1\124\32\31\24\3\3\124\6\3\16\124"+
    "\1\u0100\1\124\1\u0101\2\124\1\u0102\4\124\2\3\33\124"+
    "\24\3\3\124\6\3\2\124\1\u0103\25\124\2\3\33\124"+
    "\24\3\3\124\6\3\10\124\1\u0104\17\124\2\3\33\124"+
    "\24\3\1\124\1\u0105\1\124\6\3\4\124\1\u0106\23\124"+
    "\2\3\33\124\24\3\3\124\6\3\14\124\1\u0107\1\u0108"+
    "\12\124\2\3\33\124\24\3\3\124\6\3\10\124\1\u0109"+
    "\17\124\2\3\33\124\24\3\3\124\6\3\17\124\1\u010a"+
    "\10\124\2\3\33\124\24\3\3\124\6\3\2\124\1\u010b"+
    "\1\124\1\u010c\12\124\1\u010d\10\124\2\3\33\124\24\3"+
    "\3\124\6\3\4\124\1\u010e\3\124\1\u010f\17\124\2\3"+
    "\33\124\5\3\4\4\4\3\7\4\3\31\2\4\1\3"+
    "\1\4\2\3\30\31\2\3\1\124\21\31\1\u0110\10\31"+
    "\5\3\4\4\4\3\7\4\3\31\2\4\1\3\1\4"+
    "\2\3\2\31\1\u0111\25\31\2\3\1\124\32\31\5\3"+
    "\4\4\4\3\7\4\3\31\2\4\1\3\1\4\2\3"+
    "\4\31\1\u0112\23\31\2\3\1\124\32\31\5\3\4\4"+
    "\4\3\7\4\3\31\2\4\1\3\1\4\2\3\22\31"+
    "\1\u0113\5\31\2\3\1\124\32\31\5\3\4\4\4\3"+
    "\7\4\3\31\2\4\1\3\1\4\2\3\22\31\1\u0114"+
    "\5\31\2\3\1\124\32\31\5\3\4\4\4\3\7\4"+
    "\3\31\2\4\1\3\1\4\2\3\30\31\2\3\1\124"+
    "\4\31\1\u0115\25\31\5\3\4\4\4\3\7\4\3\31"+
    "\2\4\1\3\1\4\2\3\22\31\1\u0116\5\31\2\3"+
    "\1\124\32\31\5\3\4\4\4\3\7\4\3\31\2\4"+
    "\1\3\1\4\2\3\22\31\1\u0117\5\31\2\3\1\124"+
    "\32\31\5\3\4\4\4\3\7\4\3\31\2\4\1\3"+
    "\1\4\2\3\4\31\1\u0118\23\31\2\3\1\124\32\31"+
    "\5\3\4\4\4\3\7\4\3\31\2\4\1\3\1\4"+
    "\2\3\10\31\1\u0119\6\31\1\u011a\10\31\2\3\1\124"+
    "\32\31\5\3\4\4\4\3\7\4\3\31\2\4\1\3"+
    "\1\4\2\3\30\31\2\3\1\u011b\32\31\24\3\3\124"+
    "\6\3\13\124\1\u011c\14\124\2\3\33\124\5\3\4\4"+
    "\4\3\7\4\3\31\2\4\1\3\1\4\2\3\10\31"+
    "\1\u011d\17\31\2\3\1\124\32\31\5\3\4\4\4\3"+
    "\7\4\3\31\2\4\1\3\1\4\2\3\4\31\1\u011e"+
    "\23\31\2\3\1\124\32\31\5\3\4\4\4\3\7\4"+
    "\3\31\2\4\1\3\1\4\2\3\4\31\1\u011f\23\31"+
    "\2\3\1\124\32\31\5\3\4\4\4\3\7\4\3\31"+
    "\2\4\1\3\1\4\2\3\15\31\1\u0120\12\31\2\3"+
    "\1\124\32\31\5\3\4\4\4\3\7\4\3\31\2\4"+
    "\1\3\1\4\2\3\30\31\2\3\1\124\3\31\1\u0121"+
    "\26\31\5\3\4\4\4\3\7\4\3\31\2\4\1\3"+
    "\1\4\2\3\13\31\1\u0122\14\31\2\3\1\124\32\31"+
    "\5\3\4\4\4\3\7\4\3\31\2\4\1\3\1\4"+
    "\2\3\30\31\2\3\1\124\1\u0123\31\31\5\3\4\4"+
    "\4\3\7\4\3\31\2\4\1\3\1\4\2\3\30\31"+
    "\2\3\1\124\12\31\1\u0124\17\31\5\3\4\4\4\3"+
    "\7\4\3\31\2\4\1\3\1\4\2\3\30\31\2\3"+
    "\1\124\2\31\1\u0125\27\31\5\3\4\4\4\3\7\4"+
    "\3\31\2\4\1\3\1\4\2\3\30\31\2\3\1\124"+
    "\4\31\1\u0126\25\31\5\3\4\4\4\3\7\4\3\31"+
    "\2\4\1\3\1\4\2\3\30\31\2\3\1\124\13\31"+
    "\1\u0127\16\31\5\3\4\4\4\3\7\4\3\31\2\4"+
    "\1\3\1\4\2\3\30\31\2\3\1\124\23\31\1\u0128"+
    "\6\31\5\3\4\4\4\3\7\4\3\31\2\4\1\3"+
    "\1\4\2\3\30\31\2\3\1\124\21\31\1\u0129\10\31"+
    "\5\3\4\4\4\3\7\4\3\31\2\4\1\3\1\4"+
    "\2\3\30\31\2\3\1\124\2\31\1\u012a\27\31\5\3"+
    "\4\4\4\3\7\4\3\31\2\4\1\3\1\4\2\3"+
    "\30\31\2\3\1\124\22\31\1\u012b\7\31\5\3\4\4"+
    "\4\3\7\4\3\31\2\4\1\3\1\4\2\3\30\31"+
    "\2\3\1\124\16\31\1\u012c\3\31\1\u012d\1\31\1\u012e"+
    "\5\31\5\3\4\4\4\3\7\4\3\31\2\4\1\3"+
    "\1\4\2\3\30\31\2\3\1\124\10\31\1\u012f\21\31"+
    "\5\3\4\4\4\3\7\4\3\31\2\4\1\3\1\4"+
    "\2\3\30\31\2\3\1\124\22\31\1\u0130\7\31\5\3"+
    "\4\4\4\3\7\4\3\31\2\4\1\3\1\4\2\3"+
    "\30\31\2\3\1\124\23\31\1\u0131\6\31\5\3\4\4"+
    "\4\3\7\4\3\31\2\4\1\3\1\4\2\3\30\31"+
    "\2\3\1\124\7\31\1\u0132\22\31\5\3\4\4\4\3"+
    "\7\4\3\31\2\4\1\3\1\4\2\3\30\31\2\3"+
    "\1\124\30\31\1\u0133\1\31\5\3\4\4\4\3\7\4"+
    "\3\31\2\4\1\3\1\4\2\3\30\31\2\3\1\124"+
    "\4\31\1\u0134\25\31\5\3\4\4\4\3\7\4\3\31"+
    "\2\4\1\3\1\4\2\3\30\31\2\3\1\124\6\31"+
    "\1\u0135\23\31\5\3\4\4\4\3\7\4\3\31\2\4"+
    "\1\3\1\4\2\3\30\31\2\3\1\124\5\31\1\u0136"+
    "\24\31\5\3\4\4\4\3\7\4\3\31\2\4\1\3"+
    "\1\4\2\3\30\31\2\3\1\124\4\31\1\u0137\25\31"+
    "\5\3\4\4\4\3\7\4\3\31\2\4\1\3\1\4"+
    "\2\3\30\31\2\3\1\124\23\31\1\u0138\6\31\5\3"+
    "\4\4\4\3\7\4\3\31\2\4\1\3\1\4\2\3"+
    "\30\31\2\3\1\124\23\31\1\u0139\6\31\5\3\4\4"+
    "\4\3\7\4\3\31\2\4\1\3\1\4\2\3\30\31"+
    "\2\3\1\124\4\31\1\u013a\25\31\5\3\4\4\4\3"+
    "\7\4\3\31\2\4\1\3\1\4\2\3\30\31\2\3"+
    "\1\124\21\31\1\u013b\10\31\5\3\4\4\4\3\7\4"+
    "\3\31\2\4\1\3\1\4\2\3\30\31\2\3\1\124"+
    "\4\31\1\u013c\25\31\5\3\4\4\4\3\7\4\3\31"+
    "\2\4\1\3\1\4\2\3\30\31\2\3\1\124\30\31"+
    "\1\u013d\1\31\5\3\4\4\4\3\7\4\3\31\2\4"+
    "\1\3\1\4\2\3\30\31\2\3\1\124\1\31\1\u013e"+
    "\30\31\5\3\4\4\4\3\7\4\3\31\2\4\1\3"+
    "\1\4\2\3\30\31\2\3\1\124\25\31\1\u013f\4\31"+
    "\5\3\4\4\4\3\7\4\3\31\2\4\1\3\1\4"+
    "\2\3\30\31\2\3\1\124\13\31\1\u0140\16\31\5\3"+
    "\4\4\4\3\7\4\3\31\2\4\1\3\1\4\2\3"+
    "\30\31\2\3\1\124\17\31\1\u0141\12\31\5\3\4\4"+
    "\4\3\7\4\3\31\2\4\1\3\1\4\2\3\30\31"+
    "\2\3\1\124\10\31\1\u0142\21\31\5\3\4\4\4\3"+
    "\7\4\3\31\2\4\1\3\1\4\2\3\30\31\2\3"+
    "\1\124\7\31\1\u0143\22\31\5\3\4\4\4\3\7\4"+
    "\3\31\2\4\1\3\1\4\2\3\30\31\2\3\1\124"+
    "\22\31\1\u0144\7\31\5\3\4\4\4\3\7\4\3\31"+
    "\2\4\1\3\1\4\2\3\30\31\2\3\1\124\22\31"+
    "\1\u0145\7\31\5\3\4\4\4\3\7\4\3\31\2\4"+
    "\1\3\1\4\2\3\30\31\2\3\1\124\25\31\1\u0146"+
    "\4\31\5\3\4\4\4\3\7\4\3\31\2\4\1\3"+
    "\1\4\2\3\30\31\2\3\1\124\10\31\1\u0147\21\31"+
    "\5\3\4\4\4\3\7\4\3\31\2\4\1\3\1\4"+
    "\2\3\30\31\2\3\1\124\13\31\1\u0148\16\31\5\3"+
    "\4\4\4\3\7\4\3\31\2\4\1\3\1\4\2\3"+
    "\30\31\2\3\1\124\23\31\1\u0149\6\31\5\3\4\4"+
    "\4\3\7\4\3\31\2\4\1\3\1\4\2\3\30\31"+
    "\2\3\1\124\4\31\1\u014a\25\31\5\3\4\4\4\3"+
    "\7\4\3\31\2\4\1\3\1\4\2\3\30\31\2\3"+
    "\1\124\4\31\1\u014b\25\31\5\3\4\4\4\3\7\4"+
    "\3\31\2\4\1\3\1\4\2\3\30\31\2\3\1\124"+
    "\23\31\1\u014c\6\31\5\3\4\4\4\3\7\4\3\31"+
    "\2\4\1\3\1\4\2\3\30\31\2\3\1\124\23\31"+
    "\1\u014d\6\31\5\3\4\4\4\3\7\4\3\31\2\4"+
    "\1\3\1\4\2\3\30\31\2\3\1\124\13\31\1\u014e"+
    "\16\31\5\3\4\4\4\3\7\4\3\u014f\2\4\1\3"+
    "\1\4\2\3\30\4\3\3\32\4\5\3\4\4\4\3"+
    "\5\4\1\225\1\4\3\u0150\2\4\1\3\1\4\2\3"+
    "\30\4\3\3\32\4\5\3\4\4\4\3\7\4\3\u0151"+
    "\2\4\1\3\1\4\2\3\30\4\3\3\32\4\5\3"+
    "\4\4\4\3\7\4\3\u0152\2\4\1\3\1\4\2\3"+
    "\30\4\3\3\17\4\1\114\12\4\24\3\3\u0153\6\3"+
    "\6\u0153\25\3\6\u0153\77\3\1\u0154\1\3\1\u0155\2\3"+
    "\1\u0156\100\3\1\u0157\127\3\1\u0158\101\3\1\u0159\13\3"+
    "\1\u015a\131\3\1\u015b\1\u015c\114\3\1\u015d\130\3\1\u015e"+
    "\104\3\1\u015f\1\3\1\u0160\12\3\1\u0161\106\3\1\u0162"+
    "\3\3\1\u0163\60\3\3\373\1\3\11\373\1\u0164\103\373"+
    "\66\3\1\u0165\35\3\4\4\4\3\7\4\3\31\2\4"+
    "\1\3\1\4\2\3\22\31\1\u0166\5\31\2\3\1\124"+
    "\32\31\5\3\4\4\4\3\7\4\3\31\2\4\1\3"+
    "\1\4\2\3\30\31\2\3\1\124\13\31\1\u0167\16\31"+
    "\5\3\4\4\4\3\7\4\3\31\2\4\1\3\1\4"+
    "\2\3\2\31\1\u0168\25\31\2\3\1\124\32\31\24\3"+
    "\3\124\6\3\3\124\1\u0169\24\124\2\3\33\124\24\3"+
    "\3\124\6\3\22\124\1\u016a\5\124\2\3\33\124\24\3"+
    "\3\124\6\3\24\124\1\u016b\3\124\2\3\33\124\24\3"+
    "\3\124\6\3\1\u016c\27\124\2\3\33\124\24\3\3\124"+
    "\6\3\6\124\1\u016d\21\124\2\3\33\124\24\3\3\124"+
    "\6\3\17\124\1\u016e\10\124\2\3\33\124\24\3\3\124"+
    "\6\3\15\124\1\u016f\12\124\2\3\33\124\24\3\3\124"+
    "\6\3\22\124\1\u0170\5\124\2\3\33\124\24\3\3\124"+
    "\6\3\20\124\1\u0171\7\124\2\3\33\124\24\3\3\124"+
    "\6\3\13\124\1\u0172\14\124\2\3\33\124\24\3\3\124"+
    "\6\3\1\u0173\27\124\2\3\33\124\24\3\3\124\6\3"+
    "\26\124\1\u0174\1\124\2\3\33\124\24\3\3\124\6\3"+
    "\22\124\1\u0175\5\124\2\3\33\124\5\3\4\4\4\3"+
    "\7\4\3\31\2\4\1\3\1\4\2\3\30\31\2\3"+
    "\1\124\10\31\1\u0176\21\31\5\3\4\4\4\3\7\4"+
    "\3\31\2\4\1\3\1\4\2\3\10\31\1\u0177\17\31"+
    "\2\3\1\124\32\31\5\3\4\4\4\3\7\4\3\31"+
    "\2\4\1\3\1\4\2\3\30\31\2\3\1\124\25\31"+
    "\1\u0178\4\31\5\3\4\4\4\3\7\4\3\31\2\4"+
    "\1\3\1\4\2\3\10\31\1\u0179\17\31\2\3\1\124"+
    "\32\31\5\3\4\4\4\3\7\4\3\31\2\4\1\3"+
    "\1\4\2\3\20\31\1\u017a\7\31\2\3\1\124\32\31"+
    "\5\3\4\4\4\3\7\4\3\31\2\4\1\3\1\4"+
    "\2\3\14\31\1\u017b\13\31\2\3\1\124\32\31\5\3"+
    "\4\4\4\3\7\4\3\31\2\4\1\3\1\4\2\3"+
    "\1\u017c\27\31\2\3\1\124\32\31\24\3\3\124\6\3"+
    "\1\u017d\27\124\2\3\33\124\24\3\3\124\6\3\16\124"+
    "\1\u017e\11\124\2\3\33\124\5\3\4\4\4\3\7\4"+
    "\3\31\2\4\1\3\1\4\2\3\20\31\1\u017f\7\31"+
    "\2\3\1\124\32\31\5\3\4\4\4\3\7\4\3\31"+
    "\2\4\1\3\1\4\2\3\1\u0180\27\31\2\3\1\124"+
    "\32\31\5\3\4\4\4\3\7\4\3\31\2\4\1\3"+
    "\1\4\2\3\20\31\1\u0181\7\31\2\3\1\124\32\31"+
    "\5\3\4\4\4\3\7\4\3\31\2\4\1\3\1\4"+
    "\2\3\25\31\1\u0182\2\31\2\3\1\124\32\31\5\3"+
    "\4\4\4\3\7\4\3\31\2\4\1\3\1\4\2\3"+
    "\30\31\2\3\1\124\1\u0183\31\31\5\3\4\4\4\3"+
    "\7\4\3\31\2\4\1\3\1\4\2\3\4\31\1\u0184"+
    "\23\31\2\3\1\124\32\31\5\3\4\4\4\3\7\4"+
    "\3\31\2\4\1\3\1\4\2\3\30\31\2\3\1\124"+
    "\6\31\1\u0185\23\31\5\3\4\4\4\3\7\4\3\31"+
    "\2\4\1\3\1\4\2\3\30\31\2\3\1\124\12\31"+
    "\1\u0186\17\31\5\3\4\4\4\3\7\4\3\31\2\4"+
    "\1\3\1\4\2\3\30\31\2\3\1\124\4\31\1\u0187"+
    "\25\31\5\3\4\4\4\3\7\4\3\31\2\4\1\3"+
    "\1\4\2\3\30\31\2\3\1\124\4\31\1\u0188\25\31"+
    "\5\3\4\4\4\3\7\4\3\31\2\4\1\3\1\4"+
    "\2\3\30\31\2\3\1\124\12\31\1\u0189\17\31\5\3"+
    "\4\4\4\3\7\4\3\31\2\4\1\3\1\4\2\3"+
    "\30\31\2\3\1\124\22\31\1\u018a\7\31\5\3\4\4"+
    "\4\3\7\4\3\31\2\4\1\3\1\4\2\3\30\31"+
    "\2\3\1\124\21\31\1\u018b\10\31\5\3\4\4\4\3"+
    "\7\4\3\31\2\4\1\3\1\4\2\3\30\31\2\3"+
    "\1\124\14\31\1\u018c\15\31\5\3\4\4\4\3\7\4"+
    "\3\31\2\4\1\3\1\4\2\3\30\31\2\3\1\124"+
    "\14\31\1\u018d\15\31\5\3\4\4\4\3\7\4\3\31"+
    "\2\4\1\3\1\4\2\3\30\31\2\3\1\124\4\31"+
    "\1\u018e\25\31\5\3\4\4\4\3\4\4\1\u018f\2\4"+
    "\3\31\2\4\1\3\1\4\2\3\30\31\2\3\1\124"+
    "\32\31\5\3\4\4\4\3\7\4\3\31\2\4\1\3"+
    "\1\4\2\3\30\31\2\3\1\124\22\31\1\u0190\7\31"+
    "\5\3\4\4\4\3\7\4\3\31\2\4\1\3\1\4"+
    "\2\3\30\31\2\3\1\124\15\31\1\u0191\14\31\5\3"+
    "\4\4\4\3\7\4\3\31\2\4\1\3\1\4\2\3"+
    "\30\31\2\3\1\124\7\31\1\u0192\22\31\5\3\4\4"+
    "\4\3\7\4\3\31\2\4\1\3\1\4\2\3\30\31"+
    "\2\3\1\124\6\31\1\u0193\23\31\5\3\4\4\4\3"+
    "\7\4\3\31\2\4\1\3\1\4\2\3\30\31\2\3"+
    "\1\124\10\31\1\u0194\21\31\5\3\4\4\4\3\7\4"+
    "\3\31\2\4\1\3\1\4\2\3\30\31\2\3\1\124"+
    "\16\31\1\u0195\13\31\5\3\4\4\4\3\7\4\3\31"+
    "\2\4\1\3\1\4\2\3\30\31\2\3\1\124\4\31"+
    "\1\u0196\25\31\5\3\4\4\4\3\7\4\3\31\2\4"+
    "\1\3\1\4\2\3\30\31\2\3\1\124\4\31\1\u0197"+
    "\25\31\5\3\4\4\4\3\7\4\3\31\2\4\1\3"+
    "\1\4\2\3\30\31\2\3\1\124\10\31\1\u0198\21\31"+
    "\5\3\4\4\4\3\7\4\3\31\2\4\1\3\1\4"+
    "\2\3\30\31\2\3\1\124\13\31\1\u0199\16\31\5\3"+
    "\4\4\4\3\7\4\3\31\2\4\1\3\1\4\2\3"+
    "\30\31\2\3\1\124\16\31\1\u019a\13\31\5\3\4\4"+
    "\4\3\7\4\3\31\2\4\1\3\1\4\2\3\30\31"+
    "\2\3\1\124\23\31\1\u019b\6\31\5\3\4\4\4\3"+
    "\4\4\1\u019c\2\4\3\31\2\4\1\3\1\4\2\3"+
    "\30\31\2\3\1\124\32\31\5\3\4\4\4\3\7\4"+
    "\3\31\2\4\1\3\1\4\2\3\30\31\2\3\1\124"+
    "\4\31\1\u019d\25\31\5\3\4\4\4\3\7\4\3\31"+
    "\2\4\1\3\1\4\2\3\30\31\2\3\1\124\15\31"+
    "\1\u019e\14\31\5\3\4\4\4\3\4\4\1\u019f\2\4"+
    "\3\31\2\4\1\3\1\4\2\3\30\31\2\3\1\124"+
    "\32\31\5\3\4\4\4\3\7\4\3\31\2\4\1\3"+
    "\1\4\2\3\30\31\2\3\1\124\4\31\1\u01a0\25\31"+
    "\5\3\4\4\4\3\7\4\3\31\2\4\1\3\1\4"+
    "\2\3\30\31\2\3\1\124\7\31\1\u01a1\22\31\5\3"+
    "\4\4\4\3\7\4\3\31\2\4\1\3\1\4\2\3"+
    "\30\31\2\3\1\124\16\31\1\u01a2\13\31\5\3\4\4"+
    "\4\3\7\4\3\u01a3\2\4\1\3\1\4\2\3\30\4"+
    "\3\3\32\4\5\3\4\4\4\3\5\4\1\225\1\4"+
    "\3\u01a4\2\4\1\3\1\4\2\3\30\4\3\3\32\4"+
    "\5\3\4\4\4\3\7\4\3\u01a5\2\4\1\3\1\4"+
    "\2\3\30\4\3\3\32\4\24\3\3\u01a6\6\3\6\u01a6"+
    "\25\3\6\u01a6\64\3\1\u01a7\140\3\1\u01a8\123\3\1\u01a9"+
    "\75\3\1\u01aa\127\3\1\u01ab\132\3\1\u01ac\117\3\1\u01ad"+
    "\126\3\1\u01ae\117\3\1\u01af\114\3\1\u01b0\106\3\1\u01b1"+
    "\147\3\1\u01b2\115\3\1\u01b3\46\3\3\373\1\3\11\373"+
    "\1\u01b4\103\373\65\3\1\u01b5\36\3\4\4\4\3\7\4"+
    "\3\31\2\4\1\3\1\4\2\3\30\31\2\3\1\u01b6"+
    "\32\31\5\3\4\4\4\3\7\4\3\31\2\4\1\3"+
    "\1\4\2\3\22\31\1\u01b7\5\31\2\3\1\124\32\31"+
    "\24\3\3\124\6\3\27\124\1\u01b8\2\3\33\124\24\3"+
    "\3\124\6\3\22\124\1\u01b9\5\124\2\3\33\124\24\3"+
    "\3\124\6\3\3\124\1\u01ba\24\124\2\3\33\124\24\3"+
    "\3\124\6\3\23\124\1\u01bb\4\124\2\3\33\124\24\3"+
    "\3\124\6\3\12\124\1\u01bc\15\124\2\3\33\124\24\3"+
    "\3\124\6\3\10\124\1\u01bd\17\124\2\3\33\124\24\3"+
    "\3\124\6\3\10\124\1\u01be\17\124\2\3\33\124\24\3"+
    "\3\124\6\3\4\124\1\u01bf\23\124\2\3\33\124\24\3"+
    "\3\124\6\3\14\124\1\u01c0\13\124\2\3\33\124\24\3"+
    "\3\124\6\3\22\124\1\u01c1\5\124\2\3\33\124\24\3"+
    "\3\124\6\3\13\124\1\u01c2\14\124\2\3\33\124\5\3"+
    "\4\4\4\3\7\4\3\31\2\4\1\3\1\4\2\3"+
    "\30\31\2\3\1\124\4\31\1\u01c3\25\31\5\3\4\4"+
    "\4\3\7\4\3\31\2\4\1\3\1\4\2\3\16\31"+
    "\1\u01c4\11\31\2\3\1\124\32\31\5\3\4\4\4\3"+
    "\7\4\3\31\2\4\1\3\1\4\2\3\30\31\2\3"+
    "\1\124\1\u01c5\31\31\5\3\4\4\4\3\7\4\3\31"+
    "\2\4\1\3\1\4\2\3\13\31\1\u01c6\14\31\2\3"+
    "\1\124\32\31\5\3\4\4\4\3\7\4\3\31\2\4"+
    "\1\3\1\4\2\3\22\31\1\u01c7\5\31\2\3\1\124"+
    "\32\31\5\3\4\4\4\3\7\4\3\31\2\4\1\3"+
    "\1\4\2\3\17\31\1\u01c8\10\31\2\3\1\124\32\31"+
    "\5\3\4\4\4\3\7\4\3\31\2\4\1\3\1\4"+
    "\2\3\20\31\1\u01c9\7\31\2\3\1\124\32\31\24\3"+
    "\3\124\6\3\13\124\1\u01ca\14\124\2\3\33\124\24\3"+
    "\3\124\6\3\1\u01cb\27\124\2\3\33\124\5\3\4\4"+
    "\4\3\7\4\3\31\2\4\1\3\1\4\2\3\4\31"+
    "\1\u01cc\23\31\2\3\1\124\32\31\5\3\4\4\4\3"+
    "\7\4\3\31\2\4\1\3\1\4\2\3\22\31\1\u01cd"+
    "\5\31\2\3\1\124\32\31\5\3\4\4\4\3\7\4"+
    "\3\31\2\4\1\3\1\4\2\3\21\31\1\u01ce\6\31"+
    "\2\3\1\124\32\31\5\3\4\4\4\3\7\4\3\31"+
    "\2\4\1\3\1\4\2\3\7\31\1\u01cf\20\31\2\3"+
    "\1\124\32\31\5\3\4\4\4\3\7\4\3\31\2\4"+
    "\1\3\1\4\2\3\30\31\2\3\1\124\15\31\1\u01d0"+
    "\14\31\5\3\4\4\4\3\7\4\3\31\2\4\1\3"+
    "\1\4\2\3\30\31\2\3\1\124\21\31\1\u01d1\10\31"+
    "\5\3\4\4\4\3\7\4\3\31\2\4\1\3\1\4"+
    "\2\3\30\31\2\3\1\124\1\u01d2\31\31\5\3\4\4"+
    "\4\3\7\4\3\31\2\4\1\3\1\4\2\3\30\31"+
    "\2\3\1\124\21\31\1\u01d3\10\31\5\3\4\4\4\3"+
    "\7\4\3\31\2\4\1\3\1\4\2\3\30\31\2\3"+
    "\1\124\1\31\1\u01d4\30\31\5\3\4\4\4\3\7\4"+
    "\3\31\2\4\1\3\1\4\2\3\30\31\2\3\1\124"+
    "\15\31\1\u01d5\14\31\5\3\4\4\4\3\7\4\3\31"+
    "\2\4\1\3\1\4\2\3\30\31\2\3\1\124\1\u01d6"+
    "\31\31\5\3\4\4\4\3\14\4\1\3\1\4\2\3"+
    "\30\4\3\3\5\4\1\u01d7\14\4\1\u01d8\7\4\5\3"+
    "\4\4\4\3\7\4\3\31\2\4\1\3\1\4\2\3"+
    "\30\31\2\3\1\124\10\31\1\u01d9\21\31\5\3\4\4"+
    "\4\3\7\4\3\31\2\4\1\3\1\4\2\3\30\31"+
    "\2\3\1\124\23\31\1\u01da\6\31\5\3\4\4\4\3"+
    "\7\4\3\31\2\4\1\3\1\4\2\3\30\31\2\3"+
    "\1\124\4\31\1\u01db\25\31\5\3\4\4\4\3\7\4"+
    "\3\31\2\4\1\3\1\4\2\3\30\31\2\3\1\124"+
    "\5\31\1\u01dc\24\31\5\3\4\4\4\3\7\4\3\31"+
    "\2\4\1\3\1\4\2\3\30\31\2\3\1\124\15\31"+
    "\1\u01dd\14\31\5\3\4\4\4\3\7\4\3\31\2\4"+
    "\1\3\1\4\2\3\30\31\2\3\1\124\21\31\1\u01de"+
    "\10\31\5\3\4\4\4\3\7\4\3\31\2\4\1\3"+
    "\1\4\2\3\30\31\2\3\1\124\2\31\1\u01df\27\31"+
    "\5\3\4\4\4\3\7\4\3\31\2\4\1\3\1\4"+
    "\2\3\30\31\2\3\1\124\4\31\1\u01e0\25\31\5\3"+
    "\4\4\4\3\14\4\1\3\1\4\2\3\30\4\3\3"+
    "\22\4\1\u01e1\7\4\5\3\4\4\4\3\7\4\3\31"+
    "\2\4\1\3\1\4\2\3\30\31\2\3\1\124\21\31"+
    "\1\u01e2\10\31\5\3\4\4\4\3\7\4\3\31\2\4"+
    "\1\3\1\4\2\3\30\31\2\3\1\124\6\31\1\u01e3"+
    "\23\31\5\3\4\4\4\3\14\4\1\3\1\4\2\3"+
    "\30\4\3\3\1\u01e4\31\4\5\3\4\4\4\3\7\4"+
    "\3\31\2\4\1\3\1\4\2\3\30\31\2\3\1\124"+
    "\26\31\1\u01e5\3\31\5\3\4\4\4\3\5\4\1\225"+
    "\1\4\3\u01e6\2\4\1\3\1\4\2\3\30\4\3\3"+
    "\32\4\5\3\4\4\4\3\7\4\3\u01e7\2\4\1\3"+
    "\1\4\2\3\30\4\3\3\32\4\24\3\3\u01e8\6\3"+
    "\6\u01e8\25\3\6\u01e8\110\3\1\u01e9\114\3\1\u01ea\102\3"+
    "\1\u01eb\141\3\1\u01ec\110\3\1\u01ed\117\3\1\u01ee\121\3"+
    "\1\u01ef\115\3\1\u01f0\131\3\1\u01f1\127\3\1\u01f2\112\3"+
    "\1\u01f3\55\3\3\373\1\3\11\373\1\u01b4\11\373\1\u01f4"+
    "\71\373\100\3\1\u01f5\42\3\3\124\6\3\10\124\1\u01f6"+
    "\17\124\2\3\33\124\5\3\4\4\4\3\7\4\3\31"+
    "\2\4\1\3\1\4\2\3\4\31\1\u01f7\23\31\2\3"+
    "\1\124\32\31\24\3\3\124\6\3\16\124\1\u01f8\11\124"+
    "\2\3\33\124\24\3\3\124\6\3\22\124\1\u01f9\5\124"+
    "\2\3\33\124\24\3\3\124\6\3\16\124\1\u01fa\11\124"+
    "\2\3\33\124\24\3\3\124\6\3\17\124\1\u01fb\10\124"+
    "\2\3\33\124\24\3\3\124\6\3\2\124\1\u01fc\25\124"+
    "\2\3\33\124\24\3\3\124\6\3\1\u01fd\27\124\2\3"+
    "\33\124\24\3\3\124\6\3\4\124\1\u01fe\23\124\2\3"+
    "\33\124\5\3\4\4\4\3\7\4\3\31\2\4\1\3"+
    "\1\4\2\3\30\31\2\3\1\124\21\31\1\u01ff\10\31"+
    "\5\3\4\4\4\3\7\4\3\31\2\4\1\3\1\4"+
    "\2\3\15\31\1\u0200\12\31\2\3\1\124\32\31\5\3"+
    "\4\4\4\3\7\4\3\31\2\4\1\3\1\4\2\3"+
    "\1\u0201\27\31\2\3\1\124\32\31\5\3\4\4\4\3"+
    "\7\4\3\31\2\4\1\3\1\4\2\3\30\31\2\3"+
    "\1\u0202\32\31\24\3\3\124\6\3\4\124\1\u0203\23\124"+
    "\2\3\33\124\24\3\3\124\6\3\3\124\1\u0204\24\124"+
    "\2\3\33\124\5\3\4\4\4\3\7\4\3\31\2\4"+
    "\1\3\1\4\2\3\2\31\1\u0205\25\31\2\3\1\124"+
    "\32\31\5\3\4\4\4\3\7\4\3\31\2\4\1\3"+
    "\1\4\2\3\4\31\1\u0206\23\31\2\3\1\124\32\31"+
    "\5\3\4\4\4\3\7\4\3\31\2\4\1\3\1\4"+
    "\2\3\10\31\1\u0207\17\31\2\3\1\124\32\31\5\3"+
    "\4\4\4\3\7\4\3\31\2\4\1\3\1\4\2\3"+
    "\30\31\2\3\1\124\1\u0208\31\31\5\3\4\4\4\3"+
    "\7\4\3\31\2\4\1\3\1\4\2\3\30\31\2\3"+
    "\1\124\16\31\1\u0209\13\31\5\3\4\4\4\3\7\4"+
    "\3\31\2\4\1\3\1\4\2\3\30\31\2\3\1\124"+
    "\15\31\1\u020a\14\31\5\3\4\4\4\3\7\4\3\31"+
    "\2\4\1\3\1\4\2\3\30\31\2\3\1\124\16\31"+
    "\1\u020b\13\31\5\3\4\4\4\3\7\4\3\31\2\4"+
    "\1\3\1\4\2\3\30\31\2\3\1\124\13\31\1\u020c"+
    "\16\31\5\3\4\4\4\3\14\4\1\3\1\4\2\3"+
    "\30\4\3\3\1\u020d\31\4\5\3\4\4\4\3\14\4"+
    "\1\3\1\4\2\3\30\4\3\3\10\4\1\u020e\21\4"+
    "\5\3\4\4\4\3\7\4\3\31\2\4\1\3\1\4"+
    "\2\3\30\31\2\3\1\124\1\u020f\31\31\5\3\4\4"+
    "\4\3\7\4\3\31\2\4\1\3\1\4\2\3\30\31"+
    "\2\3\1\124\21\31\1\u0210\10\31\5\3\4\4\4\3"+
    "\7\4\3\31\2\4\1\3\1\4\2\3\30\31\2\3"+
    "\1\124\30\31\1\u0211\1\31\5\3\4\4\4\3\7\4"+
    "\3\31\2\4\1\3\1\4\2\3\30\31\2\3\1\124"+
    "\12\31\1\u0212\17\31\5\3\4\4\4\3\14\4\1\3"+
    "\1\4\2\3\30\4\3\3\4\4\1\u0213\25\4\5\3"+
    "\4\4\4\3\14\4\1\3\1\4\2\3\30\4\3\3"+
    "\13\4\1\u0214\16\4\24\3\3\u0215\6\3\6\u0215\25\3"+
    "\6\u0215\77\3\1\u0216\125\3\1\u0217\115\3\1\u0218\122\3"+
    "\1\u0219\104\3\1\u021a\117\3\1\u021b\125\3\1\u021c\104\3"+
    "\3\124\6\3\15\124\1\u021d\12\124\2\3\33\124\5\3"+
    "\4\4\4\3\7\4\3\31\2\4\1\3\1\4\2\3"+
    "\20\31\1\u021e\7\31\2\3\1\124\32\31\24\3\3\124"+
    "\6\3\15\124\1\u021f\12\124\2\3\33\124\24\3\3\124"+
    "\6\3\15\124\1\u0220\12\124\2\3\33\124\24\3\3\124"+
    "\6\3\22\124\1\u0221\5\124\2\3\33\124\24\3\3\124"+
    "\6\3\22\124\1\u0222\5\124\2\3\33\124\24\3\3\124"+
    "\6\3\20\124\1\u0223\7\124\2\3\33\124\5\3\4\4"+
    "\4\3\7\4\3\31\2\4\1\3\1\4\2\3\30\31"+
    "\2\3\1\u0224\32\31\5\3\4\4\4\3\7\4\3\31"+
    "\2\4\1\3\1\4\2\3\20\31\1\u0225\7\31\2\3"+
    "\1\124\32\31\24\3\3\124\6\3\15\124\1\u0226\12\124"+
    "\2\3\33\124\24\3\3\124\6\3\1\u0227\27\124\2\3"+
    "\33\124\15\3\1\u0228\6\3\3\124\6\3\30\124\2\3"+
    "\33\124\5\3\4\4\4\3\7\4\3\31\2\4\1\3"+
    "\1\4\2\3\22\31\1\u0229\5\31\2\3\1\124\32\31"+
    "\5\3\4\4\4\3\7\4\3\31\2\4\1\3\1\4"+
    "\2\3\13\31\1\u022a\14\31\2\3\1\124\32\31\5\3"+
    "\4\4\4\3\7\4\3\31\2\4\1\3\1\4\2\3"+
    "\30\31\2\3\1\124\24\31\1\u022b\5\31\5\3\4\4"+
    "\4\3\7\4\3\31\2\4\1\3\1\4\2\3\30\31"+
    "\2\3\1\124\27\31\1\u022c\2\31\5\3\4\4\4\3"+
    "\14\4\1\3\1\4\2\3\30\4\3\3\14\4\1\u022d"+
    "\15\4\5\3\4\4\4\3\14\4\1\3\1\4\2\3"+
    "\30\4\3\3\31\4\1\u022e\5\3\4\4\4\3\14\4"+
    "\1\3\1\4\2\3\30\4\3\3\21\4\1\u022f\10\4"+
    "\5\3\4\4\4\3\14\4\1\3\1\4\2\3\30\4"+
    "\3\3\10\4\1\u0230\21\4\24\3\3\u0231\6\3\6\u0231"+
    "\25\3\6\u0231\76\3\1\u0232\121\3\1\u0233\126\3\1\u0234"+
    "\121\3\1\u0235\117\3\1\u0236\70\3\3\124\6\3\5\124"+
    "\1\u0237\22\124\2\3\33\124\5\3\4\4\4\3\7\4"+
    "\3\31\2\4\1\3\1\4\2\3\30\31\2\3\1\u0238"+
    "\32\31\24\3\3\124\6\3\10\124\1\u0239\17\124\2\3"+
    "\33\124\24\3\3\124\6\3\4\124\1\u023a\23\124\2\3"+
    "\33\124\15\3\1\u023b\6\3\3\u0224\6\3\30\u0224\2\3"+
    "\1\124\32\u0224\5\3\4\4\4\3\7\4\3\31\2\4"+
    "\1\3\1\4\2\3\30\31\2\3\1\u023c\32\31\24\3"+
    "\3\124\6\3\23\124\1\u023d\4\124\2\3\33\124\24\3"+
    "\3\124\6\3\22\124\1\u023e\5\124\2\3\33\124\16\3"+
    "\1\u023f\110\3\4\4\4\3\7\4\3\31\2\4\1\3"+
    "\1\4\2\3\4\31\1\u0240\23\31\2\3\1\124\32\31"+
    "\5\3\4\4\4\3\7\4\3\31\2\4\1\3\1\4"+
    "\2\3\30\31\2\3\1\124\15\31\1\u0241\14\31\5\3"+
    "\4\4\4\3\14\4\1\3\1\4\2\3\30\4\3\3"+
    "\10\4\1\u0242\21\4\5\3\4\4\4\3\14\4\1\3"+
    "\1\4\2\3\30\4\3\3\4\4\1\u0243\25\4\5\3"+
    "\4\4\4\3\14\4\1\3\1\4\2\3\30\4\3\3"+
    "\10\4\1\u0244\21\4\5\3\4\4\4\3\14\4\1\3"+
    "\1\4\2\3\30\4\3\3\6\4\1\u0245\23\4\45\3"+
    "\1\u0246\115\3\1\u0247\104\3\3\124\6\3\16\124\1\u0248"+
    "\11\124\2\3\33\124\24\3\3\124\6\3\1\u0249\27\124"+
    "\2\3\33\124\24\3\3\124\6\3\15\124\1\u024a\12\124"+
    "\2\3\33\124\24\3\3\124\6\3\1\u024b\27\124\2\3"+
    "\33\124\16\3\1\u024c\127\3\3\124\6\3\15\124\1\u024d"+
    "\12\124\2\3\33\124\24\3\3\124\6\3\14\124\1\u024e"+
    "\13\124\2\3\33\124\24\3\3\124\6\3\16\124\1\u024f"+
    "\11\124\2\3\33\124\5\3\4\4\4\3\7\4\3\31"+
    "\2\4\1\3\1\4\2\3\30\31\2\3\1\124\3\31"+
    "\1\u0250\26\31\5\3\4\4\4\3\14\4\1\3\1\4"+
    "\2\3\30\4\3\3\13\4\1\u0251\16\4\5\3\4\4"+
    "\4\3\14\4\1\3\1\4\2\3\30\4\3\3\5\4"+
    "\1\u0252\24\4\5\3\4\4\4\3\14\4\1\3\1\4"+
    "\2\3\30\4\3\3\15\4\1\u0253\14\4\52\3\1\u0254"+
    "\104\3\1\u0255\110\3\3\124\6\3\13\124\1\u0256\14\124"+
    "\2\3\33\124\24\3\3\124\6\3\6\124\1\u0257\21\124"+
    "\2\3\33\124\24\3\3\124\6\3\23\124\1\u0258\4\124"+
    "\2\3\33\124\24\3\3\124\6\3\20\124\1\u0259\7\124"+
    "\2\3\33\124\5\3\4\4\4\3\14\4\1\3\1\4"+
    "\2\3\30\4\3\3\30\4\1\u025a\1\4\43\3\1\u025b"+
    "\102\3\3\124\6\3\4\124\1\u025c\23\124\2\3\33\124"+
    "\24\3\3\124\6\3\14\124\1\u025d\13\124\2\3\33\124"+
    "\24\3\3\124\6\3\10\124\1\u025e\17\124\2\3\33\124"+
    "\24\3\3\124\6\3\1\u025f\27\124\2\3\33\124\24\3"+
    "\3\124\6\3\16\124\1\u0260\11\124\2\3\33\124\24\3"+
    "\3\124\6\3\22\124\1\u0261\5\124\2\3\33\124\24\3"+
    "\3\124\6\3\16\124\1\u0262\11\124\2\3\33\124\24\3"+
    "\3\124\6\3\20\124\1\u0263\7\124\2\3\33\124\24\3"+
    "\3\124\6\3\10\124\1\u0264\17\124\2\3\33\124\24\3"+
    "\3\124\6\3\16\124\1\u0265\11\124\2\3\33\124\4\3";

  private static int [] zzUnpacktrans() {
    int [] result = new int[39032];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\u0263\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[613];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
     int longitudToken=0;

  /* Declaración de tokens que serán reconocidos por el analizador sintáctico */
  private Symbol symbol(int type) {
    return new Symbol(type);
  }
  


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexerCC(java.io.Reader in) {
      yyline = 1; 
    yychar = 1; 
    
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':  // fall through
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { 
  return new Symbol(symbol.EOF, null);

 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { longitudToken = yytext().length(); yychar+=longitudToken; 
 System.out.println("Error de carácter: "+ yytext());
//ReporteError.agregarError(new Error("Lexico", yytext(), "Caracter no reconocido"+ yytext(), yyline, (int)yychar));
            }
          // fall through
          case 148: break;
          case 2:
            { longitudToken = yytext().length(); yychar+=longitudToken; System.out.println(yytext()); return new Symbol(symbol.TEXT, yyline, (int)yychar, yytext() );
            }
          // fall through
          case 149: break;
          case 3:
            { yychar+=1   ;  System.out.println(yytext()); return new Symbol(symbol.NOT           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 150: break;
          case 4:
            { yychar+=1  ; System.out.println(yytext());  return new Symbol(symbol.COMILLAS       ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 151: break;
          case 5:
            { yychar+=1  ; System.out.println(yytext());  return new Symbol(symbol.COMILLA_SIMPLE ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 152: break;
          case 6:
            { yychar+=1  ; System.out.println(yytext());  return new Symbol(symbol.PAR_IZQ ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 153: break;
          case 7:
            { yychar+=1  ; System.out.println(yytext());  return new Symbol(symbol.PAR_DER ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 154: break;
          case 8:
            { yychar+=1   ;  System.out.println(yytext()); return new Symbol(symbol.PLUS          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 155: break;
          case 9:
            { yychar+=1   ;  System.out.println(yytext()); return new Symbol(symbol.SUMA          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 156: break;
          case 10:
            { yychar+=1   ;  System.out.println(yytext()); return new Symbol(symbol.RESTA         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 157: break;
          case 11:
            { yychar+=1   ;  System.out.println(yytext()); return new Symbol(symbol.DIVISION      ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 158: break;
          case 12:
            { longitudToken = yytext().length();   yychar+=longitudToken;  System.out.println(yytext());       return new Symbol(symbol.NUMERO       , yyline  ,  (int)yychar, yytext() );
            }
          // fall through
          case 159: break;
          case 13:
            { yychar+=1  ; System.out.println(yytext());  return new Symbol(symbol.DOS_PUNTOS     ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 160: break;
          case 14:
            { yychar+=1  ; System.out.println(yytext());  return new Symbol(symbol.PUNTO_COMA     ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 161: break;
          case 15:
            { yychar+=1   ;  System.out.println(yytext()); return new Symbol(symbol.MENOR         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 162: break;
          case 16:
            { yychar+=1   ;  System.out.println(yytext()); return new Symbol(symbol.IGUAL         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 163: break;
          case 17:
            { yychar+=1   ;  System.out.println(yytext()); return new Symbol(symbol.MAYOR         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 164: break;
          case 18:
            { yychar+=1  ; System.out.println(yytext());  return new Symbol(symbol.CORCHETE_IZQ   ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 165: break;
          case 19:
            { yychar+=1  ; System.out.println(yytext());  return new Symbol(symbol.CORCHETE_DER   ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 166: break;
          case 20:
            { yychar+=1  ; System.out.println(yytext());  return new Symbol(symbol.LLAVE_IZQ      ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 167: break;
          case 21:
            { yychar+=1  ; System.out.println(yytext());  return new Symbol(symbol.LLAVE_DER      ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 168: break;
          case 22:
            { longitudToken = yytext().length();   yychar+=longitudToken;  System.out.println(yytext());       return new Symbol(symbol.ENTERO       , yyline  ,  (int)yychar, yytext() );
            }
          // fall through
          case 169: break;
          case 23:
            { yychar+=2   ;  System.out.println(yytext()); return new Symbol(symbol.DESIGUALDAD   ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 170: break;
          case 24:
            { longitudToken = yytext().length();   yychar+=longitudToken  ; System.out.println(yytext());  return new Symbol(symbol.CADENA         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 171: break;
          case 25:
            { yychar+=2   ;  System.out.println(yytext()); return new Symbol(symbol.AND           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 172: break;
          case 26:
            { yychar+=2   ;  System.out.println(yytext()); return new Symbol(symbol.MENOR_IGUAL   ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 173: break;
          case 27:
            { yychar+=2   ;  System.out.println(yytext()); return new Symbol(symbol.COMPARACION   ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 174: break;
          case 28:
            { yychar+=2   ;  System.out.println(yytext()); return new Symbol(symbol.MAYOR_IGUAL   ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 175: break;
          case 29:
            { longitudToken = yytext().length();   yychar+=longitudToken;  System.out.println(yytext());       return new Symbol(symbol.IDENTIFICADOR, yyline  ,  (int)yychar, yytext() );
            }
          // fall through
          case 176: break;
          case 30:
            { yychar+=2   ;  System.out.println(yytext()); return new Symbol(symbol.IF            ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 177: break;
          case 31:
            { yychar+=2   ;  System.out.println(yytext()); return new Symbol(symbol.ID            ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 178: break;
          case 32:
            { yychar+=2   ;  System.out.println(yytext()); return new Symbol(symbol.OR            ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 179: break;
          case 33:
            { longitudToken = yytext().length(); yychar+=longitudToken;
            }
          // fall through
          case 180: break;
          case 34:
            { longitudToken = yytext().length();   yychar+=longitudToken  ; System.out.println(yytext());  return new Symbol(symbol.CHARS           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 181: break;
          case 35:
            { yychar+=5   ;  System.out.println(yytext()); return new Symbol(symbol.PIXEL         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 182: break;
          case 36:
            { yychar+=3   ;  System.out.println(yytext()); return new Symbol(symbol.ASC           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 183: break;
          case 37:
            { yychar+=3  ; System.out.println(yytext());  return new Symbol(symbol.P              ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 184: break;
          case 38:
            { yychar+=3   ;  System.out.println(yytext()); return new Symbol(symbol.END           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 185: break;
          case 39:
            { yychar+=3   ;  System.out.println(yytext()); return new Symbol(symbol.ALT           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 186: break;
          case 40:
            { yychar+=3  ;  System.out.println(yytext()); return new Symbol(symbol.RED            ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 187: break;
          case 41:
            { yychar+=3   ;  System.out.println(yytext()); return new Symbol(symbol.ROW           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 188: break;
          case 42:
            { yychar+=3   ;  System.out.println(yytext()); return new Symbol(symbol.SRC           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 189: break;
          case 43:
            { longitudToken = yytext().length();   yychar+=longitudToken;  System.out.println(yytext());       return new Symbol(symbol.DECIMAL      , yyline  ,  (int)yychar, yytext() );
            }
          // fall through
          case 190: break;
          case 44:
            { longitudToken = yytext().length();  yychar+=longitudToken   ;  System.out.println(yytext()); return new Symbol(symbol.HEXADECIMAL  ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 191: break;
          case 45:
            { yychar+=4  ; System.out.println(yytext());  return new Symbol(symbol.P_C            ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 192: break;
          case 46:
            { yychar+=4  ; System.out.println(yytext());  return new Symbol(symbol.BR             ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 193: break;
          case 47:
            { yychar+=4  ; System.out.println(yytext());  return new Symbol(symbol.HTML           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 194: break;
          case 48:
            { yychar+=4  ; System.out.println(yytext());  return new Symbol(symbol.H1             ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 195: break;
          case 49:
            { yychar+=4   ;  System.out.println(yytext()); return new Symbol(symbol.DESC          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 196: break;
          case 50:
            { yychar+=4   ;  System.out.println(yytext()); return new Symbol(symbol.ELSE          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 197: break;
          case 51:
            { yychar+=4   ;  System.out.println(yytext()); return new Symbol(symbol.EXIT          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 198: break;
          case 52:
            { yychar+=4   ;  System.out.println(yytext()); return new Symbol(symbol.INIT          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 199: break;
          case 53:
            { yychar+=4   ;  System.out.println(yytext()); return new Symbol(symbol.THEN          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 200: break;
          case 54:
            { yychar+=4  ;  System.out.println(yytext()); return new Symbol(symbol.AQUA           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 201: break;
          case 55:
            { yychar+=4  ;  System.out.println(yytext()); return new Symbol(symbol.BLUE           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 202: break;
          case 56:
            { yychar+=4   ;  System.out.println(yytext()); return new Symbol(symbol.CHAR          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 203: break;
          case 57:
            { yychar+=4   ;  System.out.println(yytext()); return new Symbol(symbol.COLS          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 204: break;
          case 58:
            { yychar+=4  ;  System.out.println(yytext()); return new Symbol(symbol.GRAY           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 205: break;
          case 59:
            { yychar+=4  ;  System.out.println(yytext()); return new Symbol(symbol.HREF           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 206: break;
          case 60:
            { yychar+=4   ;  System.out.println(yytext()); return new Symbol(symbol.LEFT          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 207: break;
          case 61:
            { yychar+=4  ;  System.out.println(yytext()); return new Symbol(symbol.LIME           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 208: break;
          case 62:
            { yychar+=4   ;  System.out.println(yytext()); return new Symbol(symbol.NAME          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 209: break;
          case 63:
            { yychar+=4  ;  System.out.println(yytext()); return new Symbol(symbol.NAVY           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 210: break;
          case 64:
            { yychar+=4   ;  System.out.println(yytext()); return new Symbol(symbol.ROWS          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 211: break;
          case 65:
            { yychar+=5  ;  System.out.println(yytext()); return new Symbol(symbol.TEAL           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 212: break;
          case 66:
            { yychar+=4   ;  System.out.println(yytext()); return new Symbol(symbol.TEXT          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 213: break;
          case 67:
            { yychar+=4   ;  System.out.println(yytext()); return new Symbol(symbol.TRUE          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 214: break;
          case 68:
            { yychar+=4   ;  System.out.println(yytext()); return new Symbol(symbol.TYPE          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 215: break;
          case 69:
            { yychar+=5  ; System.out.println(yytext());  return new Symbol(symbol.BR_C           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 216: break;
          case 70:
            { yychar+=5  ; System.out.println(yytext());  return new Symbol(symbol.HTML_C         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 217: break;
          case 71:
            { yychar+=5  ; System.out.println(yytext());  return new Symbol(symbol.H1_C           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 218: break;
          case 72:
            { yychar+=5   ;  System.out.println(yytext()); return new Symbol(symbol.ARIAL         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 219: break;
          case 73:
            { yychar+=5  ; System.out.println(yytext());  return new Symbol(symbol.DIV            ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 220: break;
          case 74:
            { yychar+=5  ; System.out.println(yytext());  return new Symbol(symbol.IMG            ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 221: break;
          case 75:
            { yychar+=5   ;  System.out.println(yytext()); return new Symbol(symbol.WHILE         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 222: break;
          case 76:
            { yychar+=5  ;  System.out.println(yytext()); return new Symbol(symbol.BLACK          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 223: break;
          case 77:
            { yychar+=5   ;  System.out.println(yytext()); return new Symbol(symbol.CLASS         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 224: break;
          case 78:
            { yychar+=5   ;  System.out.println(yytext()); return new Symbol(symbol.COLOR         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 225: break;
          case 79:
            { yychar+=5   ;  System.out.println(yytext()); return new Symbol(symbol.FALSE         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 226: break;
          case 80:
            { yychar+=5  ;  System.out.println(yytext()); return new Symbol(symbol.GREEN          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 227: break;
          case 81:
            { yychar+=5  ;  System.out.println(yytext()); return new Symbol(symbol.OLIVE          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 228: break;
          case 82:
            { yychar+=5   ;  System.out.println(yytext()); return new Symbol(symbol.RADIO         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 229: break;
          case 83:
            { yychar+=5   ;  System.out.println(yytext()); return new Symbol(symbol.RIGHT         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 230: break;
          case 84:
            { yychar+=5  ;  System.out.println(yytext()); return new Symbol(symbol.WHITE          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 231: break;
          case 85:
            { yychar+=5   ;  System.out.println(yytext()); return new Symbol(symbol.WIDTH         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 232: break;
          case 86:
            { yychar+=6  ; System.out.println(yytext());  return new Symbol(symbol.DIV_C          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 233: break;
          case 87:
            { yychar+=6  ; System.out.println(yytext());  return new Symbol(symbol.IMG_C          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 234: break;
          case 88:
            { yychar+=6  ; System.out.println(yytext());  return new Symbol(symbol.BODY           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 235: break;
          case 89:
            { yychar+=6  ; System.out.println(yytext());  return new Symbol(symbol.HEAD           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 236: break;
          case 90:
            { yychar+=6  ; System.out.println(yytext());  return new Symbol(symbol.LINK           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 237: break;
          case 91:
            { yychar+=6  ; System.out.println(yytext());  return new Symbol(symbol.SPAM           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 238: break;
          case 92:
            { yychar+=6   ;  System.out.println(yytext()); return new Symbol(symbol.GENEVA        ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 239: break;
          case 93:
            { yychar+=6   ;  System.out.println(yytext()); return new Symbol(symbol.HUNTIL        ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 240: break;
          case 94:
            { yychar+=6   ;  System.out.println(yytext()); return new Symbol(symbol.INSERT        ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 241: break;
          case 95:
            { yychar+=4   ;  System.out.println(yytext()); return new Symbol(symbol.REPEAT        ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 242: break;
          case 96:
            { yychar+=6   ;  System.out.println(yytext()); return new Symbol(symbol.CENTER        ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 243: break;
          case 97:
            { yychar+=3   ;  System.out.println(yytext()); return new Symbol(symbol.COLUMN        ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 244: break;
          case 98:
            { yychar+=6   ;  System.out.println(yytext()); return new Symbol(symbol.HEIGHT        ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 245: break;
          case 99:
            { yychar+=6  ;  System.out.println(yytext()); return new Symbol(symbol.MARRON         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 246: break;
          case 100:
            { yychar+=6   ;  System.out.println(yytext()); return new Symbol(symbol.NUMBER        ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 247: break;
          case 101:
            { yychar+=6  ;  System.out.println(yytext()); return new Symbol(symbol.PURPLE         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 248: break;
          case 102:
            { yychar+=6  ;  System.out.println(yytext()); return new Symbol(symbol.SILVER         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 249: break;
          case 103:
            { yychar+=6   ;  System.out.println(yytext()); return new Symbol(symbol.STRING        ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 250: break;
          case 104:
            { yychar+=6  ;  System.out.println(yytext()); return new Symbol(symbol.YELLOW         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 251: break;
          case 105:
            { yychar+=7  ; System.out.println(yytext());  return new Symbol(symbol.BODY_C         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 252: break;
          case 106:
            { yychar+=7  ; System.out.println(yytext());  return new Symbol(symbol.HEAD_C         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 253: break;
          case 107:
            { yychar+=7  ; System.out.println(yytext());  return new Symbol(symbol.LINK_C         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 254: break;
          case 108:
            { yychar+=7  ; System.out.println(yytext());  return new Symbol(symbol.SPAN_C         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 255: break;
          case 109:
            { yychar+=7   ;  System.out.println(yytext()); return new Symbol(symbol.GLOBAL        ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 256: break;
          case 110:
            { yychar+=7  ; System.out.println(yytext());  return new Symbol(symbol.INPUT          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 257: break;
          case 111:
            { yychar+=7  ; System.out.println(yytext());  return new Symbol(symbol.TITLE          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 258: break;
          case 112:
            { yychar+=7   ;  System.out.println(yytext()); return new Symbol(symbol.COURIER       ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 259: break;
          case 113:
            { yychar+=7   ;  System.out.println(yytext()); return new Symbol(symbol.REVERSE       ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 260: break;
          case 114:
            { yychar+=7   ;  System.out.println(yytext()); return new Symbol(symbol.VERDANA       ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 261: break;
          case 115:
            { yychar+=7   ;  System.out.println(yytext()); return new Symbol(symbol.BOOLEAN       ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 262: break;
          case 116:
            { yychar+=7   ;  System.out.println(yytext()); return new Symbol(symbol.DECIMAL       ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 263: break;
          case 117:
            { yychar+=7  ;  System.out.println(yytext()); return new Symbol(symbol.FUCHSIA        ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 264: break;
          case 118:
            { yychar+=8   ;  System.out.println(yytext()); return new Symbol(symbol.INTEGER       ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 265: break;
          case 119:
            { yychar+=7   ;  System.out.println(yytext()); return new Symbol(symbol.JUSTIFY       ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 266: break;
          case 120:
            { yychar+=7   ;  System.out.println(yytext()); return new Symbol(symbol.ONCLICK       ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 267: break;
          case 121:
            { yychar+=8  ; System.out.println(yytext());  return new Symbol(symbol.INPUT_C        ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 268: break;
          case 122:
            { yychar+=8  ; System.out.println(yytext());  return new Symbol(symbol.TITLE_C        ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 269: break;
          case 123:
            { yychar+=8  ; System.out.println(yytext());  return new Symbol(symbol.BUTTON         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 270: break;
          case 124:
            { yychar+=8  ; System.out.println(yytext());  return new Symbol(symbol.OPTION         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 271: break;
          case 125:
            { yychar+=8  ; System.out.println(yytext());  return new Symbol(symbol.SELECTED       ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 272: break;
          case 126:
            { yychar+=9   ;  System.out.println(yytext()); return new Symbol(symbol.REDIRECT      ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 273: break;
          case 127:
            { yychar+=8   ;  System.out.println(yytext()); return new Symbol(symbol.CHECKBOX      ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 274: break;
          case 128:
            { yychar+=9  ; System.out.println(yytext());  return new Symbol(symbol.BUTTON_C       ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 275: break;
          case 129:
            { yychar+=9  ; System.out.println(yytext());  return new Symbol(symbol.OPTION_C       ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 276: break;
          case 130:
            { yychar+=9  ; System.out.println(yytext());  return new Symbol(symbol.SELECTED_C     ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 277: break;
          case 131:
            { yychar+= 9  ;  System.out.println(yytext()); return new Symbol(symbol.ON_LOAD       ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 278: break;
          case 132:
            { yychar+=9   ;  System.out.println(yytext()); return new Symbol(symbol.THENWHILE     ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 279: break;
          case 133:
            { yychar+=9   ;  System.out.println(yytext()); return new Symbol(symbol.FONT_SIZE     ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 280: break;
          case 134:
            { yychar+=10  ;  System.out.println(yytext()); return new Symbol(symbol.ALERT_INFO    ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 281: break;
          case 135:
            { yychar+=10 ; System.out.println(yytext());  return new Symbol(symbol.TEXTOAREA      ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 282: break;
          case 136:
            { longitudToken = yytext().length();   yychar+=longitudToken;  System.out.println(yytext());       return new Symbol(symbol.FUNTION      , yyline  ,  (int)yychar, yytext() );
            }
          // fall through
          case 283: break;
          case 137:
            { yychar+=10  ;  System.out.println(yytext()); return new Symbol(symbol.LETIMPAR_NUM  ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 284: break;
          case 138:
            { yychar+=10 ;  System.out.println(yytext()); return new Symbol(symbol.BACKGROUND     ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 285: break;
          case 139:
            { yychar+=10  ;  System.out.println(yytext()); return new Symbol(symbol.SANS_SERIF    ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 286: break;
          case 140:
            { yychar+=10  ;  System.out.println(yytext()); return new Symbol(symbol.TEXT_ALIGN    ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 287: break;
          case 141:
            { yychar+=11 ; System.out.println(yytext());  return new Symbol(symbol.TEXTOAREA_C    ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 288: break;
          case 142:
            { yychar+=11  ;  System.out.println(yytext()); return new Symbol(symbol.SCRIPTING     ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 289: break;
          case 143:
            { yychar+=11  ;  System.out.println(yytext()); return new Symbol(symbol.FONT_FAMI     ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 290: break;
          case 144:
            { yychar+=12  ;  System.out.println(yytext()); return new Symbol(symbol.SCRIPTING_C   ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 291: break;
          case 145:
            { yychar+=12  ;  System.out.println(yytext()); return new Symbol(symbol.LETIMPAR_NUM  ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 292: break;
          case 146:
            { yychar+=13  ;  System.out.println(yytext()); return new Symbol(symbol.NUM_ALEATORIO ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 293: break;
          case 147:
            { yychar+=18  ;  System.out.println(yytext()); return new Symbol(symbol.CARACTER_RAMD ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 294: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
