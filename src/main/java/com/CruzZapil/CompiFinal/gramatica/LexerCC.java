package com.CruzZapil.CompiFinal.gramatica;
// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/main/jflex/LexerCC.lex


import java_cup.runtime.Symbol;


@SuppressWarnings("fallthrough")
public class LexerCC implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\25\0\1\3\1\4\1\5\1\6"+
    "\2\0\1\7\1\10\1\11\1\12\1\13\1\14\1\1"+
    "\1\15\1\16\1\17\1\20\1\21\10\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\1\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\42\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\42\1\61"+
    "\1\0\1\62\1\0\1\63\1\0\1\64\1\65\1\66"+
    "\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76"+
    "\1\77\1\100\1\101\1\102\1\103\1\104\1\105\1\106"+
    "\1\107\1\110\1\111\1\112\1\113\1\114\1\115\1\116"+
    "\1\117\1\120\101\0\1\1\1\0\1\1\7\0\1\1"+
    "\3\0\1\1\3\0\1\1\1\0\1\1\6\0\1\1"+
    "\1\0\1\1\4\0\1\1\7\0\1\1\3\0\1\1"+
    "\3\0\1\1\1\0\1\1\6\0\1\1\1\0\1\1"+
    "\u0103\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\2\1"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\2"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\1\20\2"+
    "\1\24\1\25\23\2\1\26\1\1\1\27\1\13\1\14"+
    "\1\30\1\16\1\0\1\31\1\32\1\0\1\33\2\0"+
    "\1\2\1\0\1\34\1\35\1\36\1\0\2\2\1\37"+
    "\2\2\1\37\10\2\1\40\30\2\1\41\30\2\1\42"+
    "\2\30\1\2\1\30\2\0\1\43\1\0\1\44\2\0"+
    "\1\2\1\45\2\2\7\37\1\46\2\37\3\2\1\47"+
    "\10\2\1\37\6\2\1\50\36\2\1\51\1\2\1\52"+
    "\2\2\1\53\10\2\2\30\1\54\1\30\1\55\1\56"+
    "\7\0\1\57\4\0\3\2\1\37\1\60\1\37\1\61"+
    "\1\37\1\62\12\37\1\2\1\63\1\64\1\65\3\2"+
    "\1\66\3\2\2\37\3\2\1\67\2\2\1\70\2\2"+
    "\1\71\2\2\1\72\3\2\1\73\5\2\1\74\2\2"+
    "\1\75\2\2\1\76\1\77\1\2\1\100\1\101\6\2"+
    "\1\102\3\2\1\103\1\104\1\105\1\106\3\2\2\30"+
    "\1\54\1\30\1\55\2\0\1\107\1\0\1\110\1\0"+
    "\1\111\14\0\1\2\1\112\1\2\2\37\1\113\1\37"+
    "\1\114\10\37\7\2\2\37\5\2\1\115\1\2\1\116"+
    "\3\2\1\117\1\120\2\2\1\121\2\2\1\122\5\2"+
    "\1\123\2\2\1\124\1\125\4\2\1\126\1\127\1\2"+
    "\2\30\1\54\3\0\1\130\1\0\1\131\12\0\1\37"+
    "\1\2\1\132\1\37\1\133\1\37\1\134\3\37\1\135"+
    "\2\37\2\2\1\136\1\137\1\140\2\2\2\37\1\2"+
    "\1\141\5\2\1\142\1\2\1\143\4\2\1\144\2\2"+
    "\1\145\1\146\1\2\1\147\1\2\1\150\1\151\1\2"+
    "\1\152\1\2\1\54\1\56\1\153\1\0\1\154\1\0"+
    "\1\155\3\0\1\156\2\0\1\31\1\157\1\37\1\2"+
    "\1\37\1\160\4\37\1\161\1\162\2\2\3\37\1\2"+
    "\1\163\1\2\1\164\1\2\1\165\1\2\1\166\2\2"+
    "\1\167\1\170\1\171\1\172\2\2\2\0\1\173\4\0"+
    "\1\174\1\37\1\2\1\175\1\176\1\37\1\177\2\37"+
    "\1\2\2\37\1\0\1\200\2\2\1\201\4\2\1\56"+
    "\1\202\1\203\1\0\1\204\1\0\4\37\1\0\3\37"+
    "\1\205\1\206\2\2\1\207\2\2\2\0\1\210\2\37"+
    "\1\211\1\212\1\37\1\213\1\37\1\214\1\2\1\215"+
    "\1\216\1\0\1\217\1\37\1\220\2\37\1\221\1\222"+
    "\1\37\1\223\2\37\1\224\4\37\1\225";

  private static int [] zzUnpackAction() {
    int [] result = new int[616];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\121\0\242\0\363\0\242\0\u0144\0\u0195\0\242"+
    "\0\u01e6\0\u0237\0\u0288\0\363\0\363\0\363\0\363\0\363"+
    "\0\u02d9\0\u032a\0\u037b\0\363\0\363\0\u03cc\0\u041d\0\u046e"+
    "\0\u04bf\0\u0510\0\u0561\0\u05b2\0\u0603\0\u0654\0\u06a5\0\u06f6"+
    "\0\u0747\0\u0798\0\u07e9\0\u083a\0\u088b\0\u08dc\0\u092d\0\u097e"+
    "\0\u09cf\0\242\0\242\0\u0a20\0\u0a71\0\u0ac2\0\u0b13\0\u0b64"+
    "\0\u0bb5\0\u0c06\0\u0c57\0\u0ca8\0\u0cf9\0\u0d4a\0\u0d9b\0\u0dec"+
    "\0\u0e3d\0\u0e8e\0\u0edf\0\u0f30\0\u0f81\0\u0fd2\0\242\0\u1023"+
    "\0\242\0\u1074\0\u1074\0\u10c5\0\u1116\0\u1167\0\u11b8\0\242"+
    "\0\u1209\0\242\0\u125a\0\u12ab\0\u12fc\0\u134d\0\242\0\242"+
    "\0\242\0\u139e\0\u13ef\0\u1440\0\u1491\0\u14e2\0\u1533\0\u1584"+
    "\0\u15d5\0\u1626\0\u1677\0\u16c8\0\u1719\0\u176a\0\u17bb\0\u180c"+
    "\0\u0561\0\u185d\0\u18ae\0\u18ff\0\u1950\0\u19a1\0\u19f2\0\u1a43"+
    "\0\u1a94\0\u1ae5\0\u1b36\0\u1b87\0\u1bd8\0\u1c29\0\u1c7a\0\u1ccb"+
    "\0\u1d1c\0\u1d6d\0\u1dbe\0\u1e0f\0\u1e60\0\u1eb1\0\u1f02\0\u1f53"+
    "\0\u1fa4\0\u0561\0\u1ff5\0\u2046\0\u2097\0\u20e8\0\u2139\0\u218a"+
    "\0\u21db\0\u222c\0\u227d\0\u22ce\0\u231f\0\u2370\0\u23c1\0\u2412"+
    "\0\u2463\0\u24b4\0\u2505\0\u2556\0\u25a7\0\u25f8\0\u2649\0\u269a"+
    "\0\u26eb\0\u273c\0\242\0\u278d\0\u27de\0\u282f\0\u2880\0\u28d1"+
    "\0\u2922\0\242\0\u2973\0\363\0\u29c4\0\u2a15\0\u2a66\0\u0561"+
    "\0\u2ab7\0\u2b08\0\u2b59\0\u2baa\0\u2bfb\0\u2c4c\0\u2c9d\0\u2cee"+
    "\0\u2d3f\0\u1491\0\u2d90\0\u2de1\0\u2e32\0\u2e83\0\u2ed4\0\u0561"+
    "\0\u2f25\0\u2f76\0\u2fc7\0\u3018\0\u3069\0\u30ba\0\u310b\0\u315c"+
    "\0\u31ad\0\u31fe\0\u324f\0\u32a0\0\u32f1\0\u3342\0\u3393\0\u0561"+
    "\0\u33e4\0\u3435\0\u3486\0\u34d7\0\u3528\0\u3579\0\u35ca\0\u361b"+
    "\0\u366c\0\u36bd\0\u370e\0\u375f\0\u37b0\0\u3801\0\u3852\0\u38a3"+
    "\0\u38f4\0\u3945\0\u3996\0\u39e7\0\u3a38\0\u3a89\0\u3ada\0\u3b2b"+
    "\0\u3b7c\0\u3bcd\0\u3c1e\0\u3c6f\0\u3cc0\0\u3d11\0\u0561\0\u3d62"+
    "\0\u3db3\0\u3e04\0\u3e55\0\u0561\0\u3ea6\0\u3ef7\0\u3f48\0\u3f99"+
    "\0\u3fea\0\u403b\0\u408c\0\u40dd\0\u412e\0\u417f\0\u41d0\0\u4221"+
    "\0\u4272\0\u42c3\0\u4314\0\u4365\0\u43b6\0\u4407\0\u4458\0\u44a9"+
    "\0\u44fa\0\242\0\u454b\0\u459c\0\u45ed\0\u463e\0\u468f\0\u46e0"+
    "\0\u4731\0\u4782\0\u1491\0\u47d3\0\u1491\0\u4824\0\u1491\0\u4875"+
    "\0\u48c6\0\u4917\0\u4968\0\u49b9\0\u4a0a\0\u4a5b\0\u4aac\0\u4afd"+
    "\0\u4b4e\0\u4b9f\0\u0561\0\u0561\0\u0561\0\u4bf0\0\u4c41\0\u4c92"+
    "\0\u0561\0\u4ce3\0\u4d34\0\u4d85\0\u4dd6\0\u4e27\0\u4e78\0\u4ec9"+
    "\0\u4f1a\0\u4f6b\0\u4fbc\0\u500d\0\u0561\0\u505e\0\u50af\0\u0561"+
    "\0\u5100\0\u5151\0\u0561\0\u51a2\0\u51f3\0\u5244\0\u0561\0\u5295"+
    "\0\u52e6\0\u5337\0\u5388\0\u53d9\0\u0561\0\u542a\0\u547b\0\u0561"+
    "\0\u54cc\0\u551d\0\u0561\0\u0561\0\u556e\0\u0561\0\u0561\0\u55bf"+
    "\0\u5610\0\u5661\0\u56b2\0\u5703\0\u5754\0\u0561\0\u57a5\0\u57f6"+
    "\0\u5847\0\u0561\0\u5898\0\u0561\0\u0561\0\u58e9\0\u593a\0\u598b"+
    "\0\u59dc\0\u5a2d\0\u5a7e\0\u032a\0\u5acf\0\u5b20\0\u5b71\0\242"+
    "\0\u5bc2\0\242\0\u5c13\0\242\0\u5c64\0\u5cb5\0\u5d06\0\u5d57"+
    "\0\u5da8\0\u5df9\0\u5e4a\0\u5e9b\0\u5eec\0\u5f3d\0\u5f8e\0\u5fdf"+
    "\0\u6030\0\u0561\0\u6081\0\u60d2\0\u6123\0\u1491\0\u6174\0\u1491"+
    "\0\u61c5\0\u6216\0\u6267\0\u62b8\0\u6309\0\u635a\0\u63ab\0\u63fc"+
    "\0\u644d\0\u649e\0\u64ef\0\u6540\0\u6591\0\u65e2\0\u6633\0\u6684"+
    "\0\u66d5\0\u6726\0\u6777\0\u67c8\0\u6819\0\u686a\0\u0561\0\u68bb"+
    "\0\u0561\0\u690c\0\u695d\0\u69ae\0\u0561\0\u0561\0\u69ff\0\u6a50"+
    "\0\u0561\0\u6aa1\0\u6af2\0\u0561\0\u6b43\0\u6b94\0\u6be5\0\u6c36"+
    "\0\u6c87\0\u0561\0\u6cd8\0\u6d29\0\u0561\0\u0561\0\u6d7a\0\u6dcb"+
    "\0\u6e1c\0\u6e6d\0\u0561\0\u0561\0\u6ebe\0\363\0\u6f0f\0\u6f60"+
    "\0\u6fb1\0\u7002\0\u7053\0\242\0\u70a4\0\242\0\u70f5\0\u7146"+
    "\0\u7197\0\u71e8\0\u7239\0\u728a\0\u72db\0\u732c\0\u737d\0\u73ce"+
    "\0\u741f\0\u7470\0\u1491\0\u74c1\0\u1491\0\u7512\0\u1491\0\u7563"+
    "\0\u75b4\0\u7605\0\u1491\0\u7656\0\u76a7\0\u76f8\0\u7749\0\u0561"+
    "\0\u0561\0\u0561\0\u779a\0\u77eb\0\u783c\0\u788d\0\u78de\0\u0561"+
    "\0\u792f\0\u7980\0\u79d1\0\u7a22\0\u7a73\0\u0561\0\u7ac4\0\u0561"+
    "\0\u7b15\0\u7b66\0\u7bb7\0\u7c08\0\u0561\0\u7c59\0\u7caa\0\u0561"+
    "\0\u0561\0\u7cfb\0\u0561\0\u7d4c\0\u0561\0\u0561\0\u7d9d\0\u0561"+
    "\0\u6f0f\0\363\0\u7dee\0\242\0\u7e3f\0\242\0\u7e90\0\242"+
    "\0\u7ee1\0\u7f32\0\u7f83\0\242\0\u7fd4\0\u8025\0\u45ed\0\242"+
    "\0\u8076\0\u80c7\0\u8118\0\u1491\0\u8169\0\u81ba\0\u820b\0\u825c"+
    "\0\u1491\0\u0561\0\u82ad\0\u82fe\0\u834f\0\u83a0\0\u83f1\0\u8442"+
    "\0\u0561\0\u8493\0\u0561\0\u84e4\0\u0561\0\u8535\0\u0561\0\u8586"+
    "\0\u85d7\0\u0561\0\u0561\0\u0561\0\u0561\0\u8628\0\u8679\0\u86ca"+
    "\0\u871b\0\242\0\u876c\0\u87bd\0\u880e\0\u885f\0\242\0\u88b0"+
    "\0\u8901\0\u1491\0\u1491\0\u8952\0\u1491\0\u89a3\0\u89f4\0\u8a45"+
    "\0\u8a96\0\u8ae7\0\u8b38\0\u0561\0\u8b89\0\u8bda\0\u0561\0\u8c2b"+
    "\0\u8c7c\0\u8ccd\0\u8d1e\0\242\0\242\0\242\0\u8d6f\0\242"+
    "\0\u8dc0\0\u8e11\0\u8e62\0\u8eb3\0\u8f04\0\u8f55\0\u8fa6\0\u8ff7"+
    "\0\u9048\0\242\0\u0561\0\u9099\0\u90ea\0\363\0\u913b\0\u918c"+
    "\0\u91dd\0\u922e\0\u1491\0\u927f\0\u92d0\0\u1491\0\242\0\u9321"+
    "\0\u1491\0\u9372\0\u0561\0\u93c3\0\363\0\363\0\u9414\0\242"+
    "\0\u9465\0\u1491\0\u94b6\0\u9507\0\363\0\242\0\u9558\0\u1491"+
    "\0\u95a9\0\u95fa\0\u1491\0\u964b\0\u969c\0\u96ed\0\u973e\0\u1491";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[616];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\4\1\21"+
    "\1\22\2\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\2\33\1\43\1\33\1\44\1\45\1\33\1\46"+
    "\1\33\1\47\1\33\1\50\1\51\2\33\1\52\1\53"+
    "\1\3\1\54\1\55\1\56\1\57\1\33\1\60\1\61"+
    "\1\62\1\63\1\64\1\33\1\65\1\66\1\67\1\70"+
    "\1\71\1\33\1\72\1\73\1\74\2\33\1\75\1\33"+
    "\1\76\1\33\1\77\1\100\1\101\1\3\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\102\1\103\1\4\1\21\1\104\2\105\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\2\33\1\43"+
    "\1\33\1\44\1\45\1\33\1\46\1\33\1\47\1\33"+
    "\1\50\1\51\2\33\1\52\1\53\1\3\1\54\1\55"+
    "\1\56\1\57\1\33\1\60\1\61\1\62\1\63\1\64"+
    "\1\33\1\65\1\66\1\67\1\70\1\71\1\33\1\72"+
    "\1\73\1\74\2\33\1\75\1\33\1\76\1\33\1\77"+
    "\1\100\1\101\122\0\1\4\1\0\1\4\5\0\6\4"+
    "\1\106\5\4\4\0\30\4\3\0\32\4\4\0\1\4"+
    "\1\0\1\6\5\0\6\4\1\106\5\4\4\0\30\4"+
    "\3\0\32\4\7\0\1\107\21\0\1\110\112\0\3\111"+
    "\6\0\6\111\25\0\6\111\36\0\1\112\111\0\121\113"+
    "\33\0\1\114\66\0\1\4\1\0\1\4\5\0\6\4"+
    "\1\106\3\22\2\4\4\0\30\4\3\0\17\4\1\115"+
    "\12\4\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\23\2\4\4\0\30\4\3\0\17\4\1\115\12\4"+
    "\7\0\1\116\21\0\1\117\120\0\1\120\120\0\1\121"+
    "\164\0\1\122\27\0\1\4\1\0\1\4\5\0\6\4"+
    "\1\106\3\33\2\4\4\0\13\33\1\123\5\33\1\124"+
    "\6\33\2\0\1\125\21\33\1\126\10\33\4\0\1\4"+
    "\1\0\1\4\5\0\6\4\1\106\3\33\2\4\4\0"+
    "\30\33\2\0\1\125\32\33\4\0\1\4\1\0\1\4"+
    "\5\0\6\4\1\106\3\33\2\4\4\0\1\127\27\33"+
    "\2\0\1\130\16\33\1\131\13\33\4\0\1\4\1\0"+
    "\1\4\5\0\6\4\1\106\3\33\2\4\4\0\4\33"+
    "\1\132\23\33\2\0\1\125\32\33\4\0\1\4\1\0"+
    "\1\4\5\0\6\4\1\106\3\33\2\4\4\0\13\33"+
    "\1\133\1\33\1\134\10\33\1\135\1\33\2\0\1\125"+
    "\32\33\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\33\2\4\4\0\23\33\1\136\4\33\2\0\1\125"+
    "\32\33\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\33\2\4\4\0\30\33\2\0\1\125\4\33\1\137"+
    "\25\33\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\33\2\4\4\0\23\33\1\140\4\33\2\0\1\125"+
    "\32\33\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\33\2\4\4\0\5\33\1\141\7\33\1\142\12\33"+
    "\2\0\1\125\32\33\4\0\1\4\1\0\1\4\5\0"+
    "\6\4\1\106\3\33\2\4\4\0\4\33\1\143\23\33"+
    "\2\0\1\125\32\33\4\0\1\4\1\0\1\4\5\0"+
    "\6\4\1\106\3\33\2\4\4\0\23\33\1\144\4\33"+
    "\2\0\1\125\32\33\4\0\1\4\1\0\1\4\5\0"+
    "\6\4\1\106\3\33\2\4\4\0\15\33\1\145\12\33"+
    "\2\0\1\125\32\33\4\0\1\4\1\0\1\4\5\0"+
    "\6\4\1\106\3\33\2\4\4\0\4\33\1\146\23\33"+
    "\2\0\1\125\32\33\4\0\1\4\1\0\1\4\5\0"+
    "\6\4\1\106\3\33\2\4\4\0\7\33\1\147\20\33"+
    "\2\0\1\125\32\33\4\0\1\4\1\0\1\4\5\0"+
    "\6\4\1\106\3\33\2\4\4\0\30\33\2\0\1\125"+
    "\4\33\1\150\25\33\4\0\1\4\1\0\1\4\5\0"+
    "\6\4\1\106\3\33\2\4\4\0\7\33\1\151\20\33"+
    "\2\0\1\125\32\33\4\0\1\4\1\0\1\4\5\0"+
    "\6\4\1\106\3\33\2\4\4\0\30\33\2\0\1\125"+
    "\13\33\1\152\4\33\1\153\11\33\4\0\1\4\1\0"+
    "\1\4\5\0\6\4\1\106\3\33\2\4\4\0\30\33"+
    "\2\0\1\125\1\154\12\33\1\155\2\33\1\156\13\33"+
    "\4\0\1\4\1\0\1\4\5\0\6\4\1\106\3\33"+
    "\2\4\4\0\30\33\2\0\1\125\4\33\1\157\2\33"+
    "\1\160\3\33\1\161\2\33\1\162\13\33\4\0\1\4"+
    "\1\0\1\4\5\0\6\4\1\106\3\33\2\4\4\0"+
    "\30\33\2\0\1\125\4\33\1\163\25\33\4\0\1\4"+
    "\1\0\1\4\5\0\6\4\1\106\3\33\2\4\4\0"+
    "\30\33\2\0\1\125\1\164\15\33\1\165\5\33\1\166"+
    "\5\33\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\33\2\4\4\0\30\33\2\0\1\125\21\33\1\167"+
    "\10\33\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\33\2\4\4\0\30\33\2\0\1\125\4\33\1\170"+
    "\14\33\1\171\10\33\4\0\1\4\1\0\1\4\5\0"+
    "\6\4\1\106\3\33\2\4\4\0\30\33\2\0\1\125"+
    "\3\33\1\172\11\33\1\173\14\33\4\0\1\4\1\0"+
    "\1\4\5\0\6\4\1\106\3\33\2\4\4\0\30\33"+
    "\2\0\1\125\24\33\1\174\5\33\4\0\1\4\1\0"+
    "\1\4\5\0\6\4\1\106\3\33\2\4\4\0\30\33"+
    "\2\0\1\125\4\33\1\175\3\33\1\176\21\33\4\0"+
    "\1\4\1\0\1\4\5\0\6\4\1\106\3\33\2\4"+
    "\4\0\30\33\2\0\1\125\1\177\31\33\4\0\1\4"+
    "\1\0\1\4\5\0\6\4\1\106\3\33\2\4\4\0"+
    "\30\33\2\0\1\125\1\200\23\33\1\201\5\33\4\0"+
    "\1\4\1\0\1\4\5\0\6\4\1\106\3\33\2\4"+
    "\4\0\30\33\2\0\1\125\13\33\1\202\1\33\1\203"+
    "\14\33\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\33\2\4\4\0\30\33\2\0\1\125\24\33\1\204"+
    "\5\33\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\33\2\4\4\0\30\33\2\0\1\125\1\205\3\33"+
    "\1\206\3\33\1\207\5\33\1\210\13\33\4\0\1\4"+
    "\1\0\1\4\5\0\6\4\1\106\3\33\2\4\4\0"+
    "\30\33\2\0\1\125\1\211\7\33\1\212\10\33\1\213"+
    "\1\33\1\214\6\33\4\0\1\4\1\0\1\4\5\0"+
    "\6\4\1\106\3\33\2\4\4\0\30\33\2\0\1\125"+
    "\4\33\1\215\14\33\1\216\6\33\1\217\1\33\4\0"+
    "\1\4\1\0\1\4\5\0\6\4\1\106\3\33\2\4"+
    "\4\0\30\33\2\0\1\125\7\33\1\220\1\221\21\33"+
    "\4\0\1\4\1\0\1\4\5\0\6\4\1\106\3\33"+
    "\2\4\4\0\30\33\2\0\1\125\4\33\1\222\25\33"+
    "\122\0\1\223\2\0\1\4\1\0\1\4\5\0\6\4"+
    "\1\106\1\224\2\225\2\4\4\0\30\4\3\0\32\4"+
    "\4\0\1\4\1\0\1\4\5\0\5\4\1\226\1\106"+
    "\3\227\2\4\4\0\30\4\3\0\17\4\1\115\12\4"+
    "\4\0\1\4\1\0\1\4\5\0\5\4\1\226\1\106"+
    "\3\105\2\4\4\0\30\4\3\0\17\4\1\115\12\4"+
    "\22\0\1\230\101\0\2\107\1\0\116\107\20\0\3\231"+
    "\6\0\6\231\25\0\6\231\37\0\1\232\173\0\1\233"+
    "\36\0\1\4\1\0\1\4\5\0\6\4\1\106\5\4"+
    "\4\0\30\4\3\0\27\4\1\234\2\4\20\0\1\235"+
    "\202\0\1\236\22\0\1\4\1\0\1\4\5\0\6\4"+
    "\1\106\3\33\2\4\4\0\4\33\1\237\23\33\2\0"+
    "\1\125\32\33\4\0\1\4\1\0\1\4\5\0\6\4"+
    "\1\106\3\33\2\4\4\0\2\33\1\240\25\33\2\0"+
    "\1\125\32\33\23\0\3\125\6\0\30\125\2\0\33\125"+
    "\4\0\1\4\1\0\1\4\5\0\6\4\1\106\3\33"+
    "\2\4\4\0\30\33\2\0\1\125\10\33\1\241\21\33"+
    "\4\0\1\4\1\0\1\4\5\0\6\4\1\106\3\33"+
    "\2\4\4\0\20\33\1\242\7\33\2\0\1\125\32\33"+
    "\23\0\3\125\6\0\1\125\1\243\1\244\1\245\3\125"+
    "\1\246\1\247\2\125\1\250\2\125\1\251\1\252\1\125"+
    "\1\253\1\254\5\125\2\0\33\125\4\0\1\4\1\0"+
    "\1\4\5\0\6\4\1\106\3\33\2\4\4\0\30\33"+
    "\2\0\1\125\24\33\1\255\5\33\4\0\1\4\1\0"+
    "\1\4\5\0\6\4\1\106\3\33\2\4\4\0\21\33"+
    "\1\256\6\33\2\0\1\125\32\33\4\0\1\4\1\0"+
    "\1\4\5\0\6\4\1\106\3\33\2\4\4\0\21\33"+
    "\1\257\6\33\2\0\1\125\32\33\4\0\1\4\1\0"+
    "\1\4\5\0\6\4\1\106\3\33\2\4\4\0\3\33"+
    "\1\260\24\33\2\0\1\125\32\33\4\0\1\4\1\0"+
    "\1\4\5\0\6\4\1\106\3\33\2\4\4\0\10\33"+
    "\1\261\17\33\2\0\1\125\32\33\4\0\1\4\1\0"+
    "\1\4\5\0\6\4\1\106\3\33\2\4\4\0\15\33"+
    "\1\262\12\33\2\0\1\125\32\33\4\0\1\4\1\0"+
    "\1\4\5\0\6\4\1\106\3\33\2\4\4\0\30\33"+
    "\2\0\1\125\15\33\1\263\14\33\4\0\1\4\1\0"+
    "\1\4\5\0\6\4\1\106\3\33\2\4\4\0\15\33"+
    "\1\264\12\33\2\0\1\125\32\33\4\0\1\4\1\0"+
    "\1\4\5\0\6\4\1\106\3\33\2\4\4\0\10\33"+
    "\1\265\10\33\1\266\6\33\2\0\1\125\32\33\4\0"+
    "\1\4\1\0\1\4\5\0\6\4\1\106\3\33\2\4"+
    "\4\0\22\33\1\267\5\33\2\0\1\125\32\33\4\0"+
    "\1\4\1\0\1\4\5\0\6\4\1\106\3\33\2\4"+
    "\4\0\14\33\1\270\13\33\2\0\1\125\32\33\4\0"+
    "\1\4\1\0\1\4\5\0\6\4\1\106\3\33\2\4"+
    "\4\0\30\33\2\0\1\271\32\33\4\0\1\4\1\0"+
    "\1\4\5\0\6\4\1\106\3\33\2\4\4\0\3\33"+
    "\1\272\13\33\1\273\4\33\1\274\3\33\2\0\1\125"+
    "\32\33\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\33\2\4\4\0\4\33\1\275\23\33\2\0\1\125"+
    "\32\33\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\33\2\4\4\0\30\33\2\0\1\125\21\33\1\276"+
    "\10\33\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\33\2\4\4\0\10\33\1\277\17\33\2\0\1\125"+
    "\32\33\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\33\2\4\4\0\30\33\2\0\1\125\23\33\1\300"+
    "\6\33\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\33\2\4\4\0\30\33\2\0\1\125\24\33\1\301"+
    "\5\33\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\33\2\4\4\0\30\33\2\0\1\125\2\33\1\302"+
    "\27\33\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\33\2\4\4\0\30\33\2\0\1\125\1\303\23\33"+
    "\1\304\5\33\4\0\1\4\1\0\1\4\5\0\6\4"+
    "\1\106\3\33\2\4\4\0\30\33\2\0\1\125\16\33"+
    "\1\305\13\33\4\0\1\4\1\0\1\4\5\0\6\4"+
    "\1\106\3\33\2\4\4\0\30\33\2\0\1\125\15\33"+
    "\1\306\14\33\4\0\1\4\1\0\1\4\5\0\6\4"+
    "\1\106\3\33\2\4\4\0\30\33\2\0\1\125\1\307"+
    "\3\33\1\310\25\33\4\0\1\4\1\0\1\4\5\0"+
    "\6\4\1\106\3\33\2\4\4\0\30\33\2\0\1\125"+
    "\1\311\31\33\4\0\1\4\1\0\1\4\5\0\6\4"+
    "\1\106\3\33\2\4\4\0\30\33\2\0\1\125\13\33"+
    "\1\312\16\33\4\0\1\4\1\0\1\4\5\0\6\4"+
    "\1\106\3\33\2\4\4\0\30\33\2\0\1\125\2\33"+
    "\1\313\27\33\4\0\1\4\1\0\1\4\5\0\6\4"+
    "\1\106\3\33\2\4\4\0\30\33\2\0\1\125\13\33"+
    "\1\314\16\33\4\0\1\4\1\0\1\4\5\0\6\4"+
    "\1\106\3\33\2\4\4\0\30\33\2\0\1\125\15\33"+
    "\1\315\14\33\4\0\1\4\1\0\1\4\5\0\6\4"+
    "\1\106\3\33\2\4\4\0\30\33\2\0\1\125\2\33"+
    "\1\316\27\33\4\0\1\4\1\0\1\4\5\0\6\4"+
    "\1\106\3\33\2\4\4\0\30\33\2\0\1\125\1\317"+
    "\3\33\1\320\25\33\4\0\1\4\1\0\1\4\5\0"+
    "\6\4\1\106\3\33\2\4\4\0\30\33\2\0\1\125"+
    "\10\33\1\321\21\33\4\0\1\4\1\0\1\4\5\0"+
    "\6\4\1\106\3\33\2\4\4\0\30\33\2\0\1\125"+
    "\4\33\1\322\25\33\4\0\1\4\1\0\1\4\5\0"+
    "\6\4\1\106\3\33\2\4\4\0\30\33\2\0\1\125"+
    "\23\33\1\323\6\33\4\0\1\4\1\0\1\4\5\0"+
    "\6\4\1\106\3\33\2\4\4\0\30\33\2\0\1\125"+
    "\22\33\1\324\7\33\4\0\1\4\1\0\1\4\5\0"+
    "\6\4\1\106\3\33\2\4\4\0\30\33\2\0\1\125"+
    "\5\33\1\325\24\33\4\0\1\4\1\0\1\4\5\0"+
    "\6\4\1\106\3\33\2\4\4\0\30\33\2\0\1\125"+
    "\14\33\1\326\15\33\4\0\1\4\1\0\1\4\5\0"+
    "\6\4\1\106\3\33\2\4\4\0\30\33\2\0\1\125"+
    "\21\33\1\327\10\33\4\0\1\4\1\0\1\4\5\0"+
    "\6\4\1\106\3\33\2\4\4\0\30\33\2\0\1\125"+
    "\14\33\1\330\10\33\1\331\4\33\4\0\1\4\1\0"+
    "\1\4\5\0\6\4\1\106\3\33\2\4\4\0\30\33"+
    "\2\0\1\125\14\33\1\332\15\33\4\0\1\4\1\0"+
    "\1\4\5\0\6\4\1\106\3\33\2\4\4\0\30\33"+
    "\2\0\1\125\10\33\1\333\21\33\4\0\1\4\1\0"+
    "\1\4\5\0\6\4\1\106\3\33\2\4\4\0\30\33"+
    "\2\0\1\125\2\33\1\334\27\33\4\0\1\4\1\0"+
    "\1\4\5\0\6\4\1\106\3\33\2\4\4\0\30\33"+
    "\2\0\1\125\21\33\1\335\10\33\4\0\1\4\1\0"+
    "\1\4\5\0\6\4\1\106\3\33\2\4\4\0\30\33"+
    "\2\0\1\125\3\33\1\336\26\33\4\0\1\4\1\0"+
    "\1\4\5\0\6\4\1\106\3\33\2\4\4\0\30\33"+
    "\2\0\1\125\3\33\1\337\26\33\4\0\1\4\1\0"+
    "\1\4\5\0\6\4\1\106\3\33\2\4\4\0\30\33"+
    "\2\0\1\125\6\33\1\340\23\33\4\0\1\4\1\0"+
    "\1\4\5\0\6\4\1\106\3\33\2\4\4\0\30\33"+
    "\2\0\1\125\26\33\1\341\3\33\4\0\1\4\1\0"+
    "\1\4\5\0\6\4\1\106\3\33\2\4\4\0\30\33"+
    "\2\0\1\125\15\33\1\342\14\33\4\0\1\4\1\0"+
    "\1\4\5\0\6\4\1\106\3\33\2\4\4\0\30\33"+
    "\2\0\1\125\13\33\1\343\16\33\4\0\1\4\1\0"+
    "\1\4\5\0\6\4\1\106\3\33\2\4\4\0\30\33"+
    "\2\0\1\125\2\33\1\344\27\33\4\0\1\4\1\0"+
    "\1\4\5\0\6\4\1\106\3\33\2\4\4\0\30\33"+
    "\2\0\1\125\21\33\1\345\10\33\4\0\1\4\1\0"+
    "\1\4\5\0\6\4\1\106\3\33\2\4\4\0\30\33"+
    "\2\0\1\125\1\346\26\33\1\347\2\33\4\0\1\4"+
    "\1\0\1\4\5\0\6\4\1\106\3\33\2\4\4\0"+
    "\30\33\2\0\1\125\24\33\1\350\5\33\4\0\1\4"+
    "\1\0\1\4\5\0\6\4\1\106\3\33\2\4\4\0"+
    "\30\33\2\0\1\125\17\33\1\351\12\33\4\0\1\4"+
    "\1\0\1\4\5\0\6\4\1\106\3\33\2\4\4\0"+
    "\30\33\2\0\1\125\10\33\1\352\21\33\4\0\1\4"+
    "\1\0\1\4\5\0\6\4\1\106\3\33\2\4\4\0"+
    "\30\33\2\0\1\125\3\33\1\353\26\33\4\0\1\4"+
    "\1\0\1\4\5\0\6\4\1\106\3\33\2\4\4\0"+
    "\30\33\2\0\1\125\13\33\1\354\16\33\4\0\1\4"+
    "\1\0\1\4\5\0\5\4\1\226\1\106\3\355\2\4"+
    "\4\0\30\4\3\0\32\4\4\0\1\4\1\0\1\4"+
    "\5\0\5\4\1\226\1\106\3\356\2\4\4\0\30\4"+
    "\3\0\32\4\4\0\1\4\1\0\1\4\5\0\6\4"+
    "\1\106\3\357\2\4\4\0\30\4\3\0\32\4\4\0"+
    "\1\4\1\0\1\4\5\0\6\4\1\106\3\360\2\4"+
    "\4\0\30\4\3\0\17\4\1\115\12\4\4\0\1\361"+
    "\1\0\1\361\5\0\6\361\1\0\5\361\4\0\30\361"+
    "\3\0\32\361\23\0\3\362\6\0\6\362\25\0\6\362"+
    "\61\0\1\363\1\364\1\365\3\0\1\366\1\367\2\0"+
    "\1\370\2\0\1\371\1\372\1\0\1\373\1\374\62\0"+
    "\1\375\205\0\1\376\17\0\1\4\1\0\1\4\5\0"+
    "\6\4\1\106\3\33\2\4\4\0\20\33\1\377\7\33"+
    "\2\0\1\125\32\33\4\0\1\4\1\0\1\4\5\0"+
    "\6\4\1\106\3\33\2\4\4\0\30\33\2\0\1\125"+
    "\1\u0100\31\33\4\0\1\4\1\0\1\4\5\0\6\4"+
    "\1\106\3\33\2\4\4\0\1\u0101\27\33\2\0\1\125"+
    "\32\33\23\0\3\125\6\0\16\125\1\u0102\1\125\1\u0103"+
    "\2\125\1\u0104\4\125\2\0\33\125\23\0\3\125\6\0"+
    "\2\125\1\u0105\25\125\2\0\33\125\23\0\3\125\6\0"+
    "\10\125\1\u0106\17\125\2\0\33\125\23\0\1\125\1\u0107"+
    "\1\125\6\0\4\125\1\u0108\23\125\2\0\33\125\23\0"+
    "\3\125\6\0\14\125\1\u0109\1\u010a\12\125\2\0\33\125"+
    "\23\0\3\125\6\0\10\125\1\u010b\17\125\2\0\33\125"+
    "\23\0\3\125\6\0\17\125\1\u010c\10\125\2\0\33\125"+
    "\23\0\3\125\6\0\2\125\1\u010d\1\125\1\u010e\12\125"+
    "\1\u010f\10\125\2\0\33\125\23\0\3\125\6\0\4\125"+
    "\1\u0110\3\125\1\u0111\17\125\2\0\33\125\4\0\1\4"+
    "\1\0\1\4\5\0\6\4\1\106\3\33\2\4\4\0"+
    "\30\33\2\0\1\125\21\33\1\u0112\10\33\4\0\1\4"+
    "\1\0\1\4\5\0\6\4\1\106\3\33\2\4\4\0"+
    "\2\33\1\u0113\25\33\2\0\1\125\32\33\4\0\1\4"+
    "\1\0\1\4\5\0\6\4\1\106\3\33\2\4\4\0"+
    "\4\33\1\u0114\23\33\2\0\1\125\32\33\4\0\1\4"+
    "\1\0\1\4\5\0\6\4\1\106\3\33\2\4\4\0"+
    "\22\33\1\u0115\5\33\2\0\1\125\32\33\4\0\1\4"+
    "\1\0\1\4\5\0\6\4\1\106\3\33\2\4\4\0"+
    "\22\33\1\u0116\5\33\2\0\1\125\32\33\4\0\1\4"+
    "\1\0\1\4\5\0\6\4\1\106\3\33\2\4\4\0"+
    "\30\33\2\0\1\125\4\33\1\u0117\25\33\4\0\1\4"+
    "\1\0\1\4\5\0\6\4\1\106\3\33\2\4\4\0"+
    "\22\33\1\u0118\5\33\2\0\1\125\32\33\4\0\1\4"+
    "\1\0\1\4\5\0\6\4\1\106\3\33\2\4\4\0"+
    "\22\33\1\u0119\5\33\2\0\1\125\32\33\4\0\1\4"+
    "\1\0\1\4\5\0\6\4\1\106\3\33\2\4\4\0"+
    "\4\33\1\u011a\23\33\2\0\1\125\32\33\4\0\1\4"+
    "\1\0\1\4\5\0\6\4\1\106\3\33\2\4\4\0"+
    "\10\33\1\u011b\6\33\1\u011c\10\33\2\0\1\125\32\33"+
    "\4\0\1\4\1\0\1\4\5\0\6\4\1\106\3\33"+
    "\2\4\4\0\30\33\2\0\1\u011d\32\33\23\0\3\125"+
    "\6\0\13\125\1\u011e\14\125\2\0\33\125\4\0\1\4"+
    "\1\0\1\4\5\0\6\4\1\106\3\33\2\4\4\0"+
    "\10\33\1\u011f\17\33\2\0\1\125\32\33\4\0\1\4"+
    "\1\0\1\4\5\0\6\4\1\106\3\33\2\4\4\0"+
    "\4\33\1\u0120\23\33\2\0\1\125\32\33\4\0\1\4"+
    "\1\0\1\4\5\0\6\4\1\106\3\33\2\4\4\0"+
    "\4\33\1\u0121\23\33\2\0\1\125\32\33\4\0\1\4"+
    "\1\0\1\4\5\0\6\4\1\106\3\33\2\4\4\0"+
    "\15\33\1\u0122\12\33\2\0\1\125\32\33\4\0\1\4"+
    "\1\0\1\4\5\0\6\4\1\106\3\33\2\4\4\0"+
    "\30\33\2\0\1\125\3\33\1\u0123\26\33\4\0\1\4"+
    "\1\0\1\4\5\0\6\4\1\106\3\33\2\4\4\0"+
    "\13\33\1\u0124\14\33\2\0\1\125\32\33\4\0\1\4"+
    "\1\0\1\4\5\0\6\4\1\106\3\33\2\4\4\0"+
    "\30\33\2\0\1\125\1\u0125\31\33\4\0\1\4\1\0"+
    "\1\4\5\0\6\4\1\106\3\33\2\4\4\0\30\33"+
    "\2\0\1\125\12\33\1\u0126\17\33\4\0\1\4\1\0"+
    "\1\4\5\0\6\4\1\106\3\33\2\4\4\0\30\33"+
    "\2\0\1\125\2\33\1\u0127\27\33\4\0\1\4\1\0"+
    "\1\4\5\0\6\4\1\106\3\33\2\4\4\0\30\33"+
    "\2\0\1\125\4\33\1\u0128\25\33\4\0\1\4\1\0"+
    "\1\4\5\0\6\4\1\106\3\33\2\4\4\0\30\33"+
    "\2\0\1\125\13\33\1\u0129\16\33\4\0\1\4\1\0"+
    "\1\4\5\0\6\4\1\106\3\33\2\4\4\0\30\33"+
    "\2\0\1\125\23\33\1\u012a\6\33\4\0\1\4\1\0"+
    "\1\4\5\0\6\4\1\106\3\33\2\4\4\0\30\33"+
    "\2\0\1\125\21\33\1\u012b\10\33\4\0\1\4\1\0"+
    "\1\4\5\0\6\4\1\106\3\33\2\4\4\0\30\33"+
    "\2\0\1\125\2\33\1\u012c\27\33\4\0\1\4\1\0"+
    "\1\4\5\0\6\4\1\106\3\33\2\4\4\0\30\33"+
    "\2\0\1\125\22\33\1\u012d\7\33\4\0\1\4\1\0"+
    "\1\4\5\0\6\4\1\106\3\33\2\4\4\0\30\33"+
    "\2\0\1\125\16\33\1\u012e\3\33\1\u012f\1\33\1\u0130"+
    "\5\33\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\33\2\4\4\0\30\33\2\0\1\125\10\33\1\u0131"+
    "\21\33\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\33\2\4\4\0\30\33\2\0\1\125\22\33\1\u0132"+
    "\7\33\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\33\2\4\4\0\30\33\2\0\1\125\23\33\1\u0133"+
    "\6\33\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\33\2\4\4\0\30\33\2\0\1\125\7\33\1\u0134"+
    "\22\33\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\33\2\4\4\0\30\33\2\0\1\125\30\33\1\u0135"+
    "\1\33\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\33\2\4\4\0\30\33\2\0\1\125\4\33\1\u0136"+
    "\25\33\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\33\2\4\4\0\30\33\2\0\1\125\6\33\1\u0137"+
    "\23\33\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\33\2\4\4\0\30\33\2\0\1\125\5\33\1\u0138"+
    "\24\33\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\33\2\4\4\0\30\33\2\0\1\125\4\33\1\u0139"+
    "\25\33\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\33\2\4\4\0\30\33\2\0\1\125\23\33\1\u013a"+
    "\6\33\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\33\2\4\4\0\30\33\2\0\1\125\23\33\1\u013b"+
    "\6\33\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\33\2\4\4\0\30\33\2\0\1\125\4\33\1\u013c"+
    "\25\33\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\33\2\4\4\0\30\33\2\0\1\125\21\33\1\u013d"+
    "\10\33\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\33\2\4\4\0\30\33\2\0\1\125\4\33\1\u013e"+
    "\25\33\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\33\2\4\4\0\30\33\2\0\1\125\30\33\1\u013f"+
    "\1\33\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\33\2\4\4\0\30\33\2\0\1\125\1\33\1\u0140"+
    "\30\33\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\33\2\4\4\0\30\33\2\0\1\125\25\33\1\u0141"+
    "\4\33\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\33\2\4\4\0\30\33\2\0\1\125\13\33\1\u0142"+
    "\16\33\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\33\2\4\4\0\30\33\2\0\1\125\17\33\1\u0143"+
    "\12\33\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\33\2\4\4\0\30\33\2\0\1\125\10\33\1\u0144"+
    "\21\33\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\33\2\4\4\0\30\33\2\0\1\125\7\33\1\u0145"+
    "\22\33\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\33\2\4\4\0\30\33\2\0\1\125\22\33\1\u0146"+
    "\7\33\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\33\2\4\4\0\30\33\2\0\1\125\22\33\1\u0147"+
    "\7\33\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\33\2\4\4\0\30\33\2\0\1\125\25\33\1\u0148"+
    "\4\33\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\33\2\4\4\0\30\33\2\0\1\125\10\33\1\u0149"+
    "\21\33\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\33\2\4\4\0\30\33\2\0\1\125\13\33\1\u014a"+
    "\16\33\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\33\2\4\4\0\30\33\2\0\1\125\23\33\1\u014b"+
    "\6\33\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\33\2\4\4\0\30\33\2\0\1\125\4\33\1\u014c"+
    "\25\33\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\33\2\4\4\0\30\33\2\0\1\125\4\33\1\u014d"+
    "\25\33\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\33\2\4\4\0\30\33\2\0\1\125\23\33\1\u014e"+
    "\6\33\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\33\2\4\4\0\30\33\2\0\1\125\23\33\1\u014f"+
    "\6\33\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\33\2\4\4\0\30\33\2\0\1\125\13\33\1\u0150"+
    "\16\33\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\u0151\2\4\4\0\30\4\3\0\32\4\4\0\1\4"+
    "\1\0\1\4\5\0\5\4\1\226\1\106\3\u0152\2\4"+
    "\4\0\30\4\3\0\32\4\4\0\1\4\1\0\1\4"+
    "\5\0\6\4\1\106\3\u0153\2\4\4\0\30\4\3\0"+
    "\32\4\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\u0154\2\4\4\0\30\4\3\0\17\4\1\115\12\4"+
    "\4\0\1\u0155\1\0\1\u0155\5\0\6\u0155\1\0\5\u0155"+
    "\4\0\30\u0155\3\0\32\u0155\23\0\3\u0156\6\0\6\u0156"+
    "\25\0\6\u0156\76\0\1\u0157\1\0\1\u0158\2\0\1\u0159"+
    "\77\0\1\u015a\126\0\1\u015b\100\0\1\u015c\13\0\1\u015d"+
    "\130\0\1\u015e\1\u015f\113\0\1\u0160\127\0\1\u0161\103\0"+
    "\1\u0162\1\0\1\u0163\12\0\1\u0164\105\0\1\u0165\3\0"+
    "\1\u0166\57\0\15\375\1\u0167\103\375\65\0\1\u0168\34\0"+
    "\1\4\1\0\1\4\5\0\6\4\1\106\3\33\2\4"+
    "\4\0\22\33\1\u0169\5\33\2\0\1\125\32\33\4\0"+
    "\1\4\1\0\1\4\5\0\6\4\1\106\3\33\2\4"+
    "\4\0\30\33\2\0\1\125\13\33\1\u016a\16\33\4\0"+
    "\1\4\1\0\1\4\5\0\6\4\1\106\3\33\2\4"+
    "\4\0\2\33\1\u016b\25\33\2\0\1\125\32\33\23\0"+
    "\3\125\6\0\3\125\1\u016c\24\125\2\0\33\125\23\0"+
    "\3\125\6\0\22\125\1\u016d\5\125\2\0\33\125\23\0"+
    "\3\125\6\0\24\125\1\u016e\3\125\2\0\33\125\23\0"+
    "\3\125\6\0\1\u016f\27\125\2\0\33\125\23\0\3\125"+
    "\6\0\6\125\1\u0170\21\125\2\0\33\125\23\0\3\125"+
    "\6\0\17\125\1\u0171\10\125\2\0\33\125\23\0\3\125"+
    "\6\0\15\125\1\u0172\12\125\2\0\33\125\23\0\3\125"+
    "\6\0\22\125\1\u0173\5\125\2\0\33\125\23\0\3\125"+
    "\6\0\20\125\1\u0174\7\125\2\0\33\125\23\0\3\125"+
    "\6\0\13\125\1\u0175\14\125\2\0\33\125\23\0\3\125"+
    "\6\0\1\u0176\27\125\2\0\33\125\23\0\3\125\6\0"+
    "\26\125\1\u0177\1\125\2\0\33\125\23\0\3\125\6\0"+
    "\22\125\1\u0178\5\125\2\0\33\125\4\0\1\4\1\0"+
    "\1\4\5\0\6\4\1\106\3\33\2\4\4\0\30\33"+
    "\2\0\1\125\10\33\1\u0179\21\33\4\0\1\4\1\0"+
    "\1\4\5\0\6\4\1\106\3\33\2\4\4\0\10\33"+
    "\1\u017a\17\33\2\0\1\125\32\33\4\0\1\4\1\0"+
    "\1\4\5\0\6\4\1\106\3\33\2\4\4\0\30\33"+
    "\2\0\1\125\25\33\1\u017b\4\33\4\0\1\4\1\0"+
    "\1\4\5\0\6\4\1\106\3\33\2\4\4\0\10\33"+
    "\1\u017c\17\33\2\0\1\125\32\33\4\0\1\4\1\0"+
    "\1\4\5\0\6\4\1\106\3\33\2\4\4\0\20\33"+
    "\1\u017d\7\33\2\0\1\125\32\33\4\0\1\4\1\0"+
    "\1\4\5\0\6\4\1\106\3\33\2\4\4\0\14\33"+
    "\1\u017e\13\33\2\0\1\125\32\33\4\0\1\4\1\0"+
    "\1\4\5\0\6\4\1\106\3\33\2\4\4\0\1\u017f"+
    "\27\33\2\0\1\125\32\33\23\0\3\125\6\0\1\u0180"+
    "\27\125\2\0\33\125\23\0\3\125\6\0\16\125\1\u0181"+
    "\11\125\2\0\33\125\4\0\1\4\1\0\1\4\5\0"+
    "\6\4\1\106\3\33\2\4\4\0\20\33\1\u0182\7\33"+
    "\2\0\1\125\32\33\4\0\1\4\1\0\1\4\5\0"+
    "\6\4\1\106\3\33\2\4\4\0\1\u0183\27\33\2\0"+
    "\1\125\32\33\4\0\1\4\1\0\1\4\5\0\6\4"+
    "\1\106\3\33\2\4\4\0\20\33\1\u0184\7\33\2\0"+
    "\1\125\32\33\4\0\1\4\1\0\1\4\5\0\6\4"+
    "\1\106\3\33\2\4\4\0\25\33\1\u0185\2\33\2\0"+
    "\1\125\32\33\4\0\1\4\1\0\1\4\5\0\6\4"+
    "\1\106\3\33\2\4\4\0\30\33\2\0\1\125\1\u0186"+
    "\31\33\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\33\2\4\4\0\4\33\1\u0187\23\33\2\0\1\125"+
    "\32\33\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\33\2\4\4\0\30\33\2\0\1\125\6\33\1\u0188"+
    "\23\33\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\33\2\4\4\0\30\33\2\0\1\125\12\33\1\u0189"+
    "\17\33\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\33\2\4\4\0\30\33\2\0\1\125\4\33\1\u018a"+
    "\25\33\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\33\2\4\4\0\30\33\2\0\1\125\4\33\1\u018b"+
    "\25\33\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\33\2\4\4\0\30\33\2\0\1\125\12\33\1\u018c"+
    "\17\33\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\33\2\4\4\0\30\33\2\0\1\125\22\33\1\u018d"+
    "\7\33\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\33\2\4\4\0\30\33\2\0\1\125\21\33\1\u018e"+
    "\10\33\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\33\2\4\4\0\30\33\2\0\1\125\14\33\1\u018f"+
    "\15\33\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\33\2\4\4\0\30\33\2\0\1\125\14\33\1\u0190"+
    "\15\33\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\33\2\4\4\0\30\33\2\0\1\125\4\33\1\u0191"+
    "\25\33\4\0\1\4\1\0\1\4\5\0\4\4\1\u0192"+
    "\1\4\1\106\3\33\2\4\4\0\30\33\2\0\1\125"+
    "\32\33\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\33\2\4\4\0\30\33\2\0\1\125\22\33\1\u0193"+
    "\7\33\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\33\2\4\4\0\30\33\2\0\1\125\15\33\1\u0194"+
    "\14\33\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\33\2\4\4\0\30\33\2\0\1\125\7\33\1\u0195"+
    "\22\33\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\33\2\4\4\0\30\33\2\0\1\125\6\33\1\u0196"+
    "\23\33\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\33\2\4\4\0\30\33\2\0\1\125\10\33\1\u0197"+
    "\21\33\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\33\2\4\4\0\30\33\2\0\1\125\16\33\1\u0198"+
    "\13\33\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\33\2\4\4\0\30\33\2\0\1\125\4\33\1\u0199"+
    "\25\33\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\33\2\4\4\0\30\33\2\0\1\125\4\33\1\u019a"+
    "\25\33\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\33\2\4\4\0\30\33\2\0\1\125\10\33\1\u019b"+
    "\21\33\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\33\2\4\4\0\30\33\2\0\1\125\13\33\1\u019c"+
    "\16\33\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\33\2\4\4\0\30\33\2\0\1\125\16\33\1\u019d"+
    "\13\33\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\33\2\4\4\0\30\33\2\0\1\125\23\33\1\u019e"+
    "\6\33\4\0\1\4\1\0\1\4\5\0\4\4\1\u019f"+
    "\1\4\1\106\3\33\2\4\4\0\30\33\2\0\1\125"+
    "\32\33\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\33\2\4\4\0\30\33\2\0\1\125\4\33\1\u01a0"+
    "\25\33\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\33\2\4\4\0\30\33\2\0\1\125\15\33\1\u01a1"+
    "\14\33\4\0\1\4\1\0\1\4\5\0\4\4\1\u01a2"+
    "\1\4\1\106\3\33\2\4\4\0\30\33\2\0\1\125"+
    "\32\33\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\33\2\4\4\0\30\33\2\0\1\125\4\33\1\u01a3"+
    "\25\33\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\33\2\4\4\0\30\33\2\0\1\125\7\33\1\u01a4"+
    "\22\33\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\33\2\4\4\0\30\33\2\0\1\125\16\33\1\u01a5"+
    "\13\33\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\u01a6\2\4\4\0\30\4\3\0\32\4\4\0\1\4"+
    "\1\0\1\4\5\0\5\4\1\226\1\106\3\u01a7\2\4"+
    "\4\0\30\4\3\0\32\4\4\0\1\4\1\0\1\4"+
    "\5\0\6\4\1\106\3\u01a8\2\4\4\0\30\4\3\0"+
    "\32\4\4\0\1\u0155\1\0\1\u0155\5\0\6\u0155\1\230"+
    "\5\u0155\4\0\30\u0155\3\0\32\u0155\23\0\3\u01a9\6\0"+
    "\6\u01a9\25\0\6\u01a9\63\0\1\u01aa\137\0\1\u01ab\122\0"+
    "\1\u01ac\74\0\1\u01ad\126\0\1\u01ae\131\0\1\u01af\116\0"+
    "\1\u01b0\125\0\1\u01b1\116\0\1\u01b2\113\0\1\u01b3\105\0"+
    "\1\u01b4\146\0\1\u01b5\114\0\1\u01b6\45\0\15\375\1\u01b7"+
    "\103\375\64\0\1\u01b8\35\0\1\4\1\0\1\4\5\0"+
    "\6\4\1\106\3\33\2\4\4\0\30\33\2\0\1\u01b9"+
    "\32\33\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\33\2\4\4\0\22\33\1\u01ba\5\33\2\0\1\125"+
    "\32\33\23\0\3\125\6\0\27\125\1\u01bb\2\0\33\125"+
    "\23\0\3\125\6\0\22\125\1\u01bc\5\125\2\0\33\125"+
    "\23\0\3\125\6\0\3\125\1\u01bd\24\125\2\0\33\125"+
    "\23\0\3\125\6\0\23\125\1\u01be\4\125\2\0\33\125"+
    "\23\0\3\125\6\0\12\125\1\u01bf\15\125\2\0\33\125"+
    "\23\0\3\125\6\0\10\125\1\u01c0\17\125\2\0\33\125"+
    "\23\0\3\125\6\0\10\125\1\u01c1\17\125\2\0\33\125"+
    "\23\0\3\125\6\0\4\125\1\u01c2\23\125\2\0\33\125"+
    "\23\0\3\125\6\0\14\125\1\u01c3\13\125\2\0\33\125"+
    "\23\0\3\125\6\0\22\125\1\u01c4\5\125\2\0\33\125"+
    "\23\0\3\125\6\0\13\125\1\u01c5\14\125\2\0\33\125"+
    "\4\0\1\4\1\0\1\4\5\0\6\4\1\106\3\33"+
    "\2\4\4\0\30\33\2\0\1\125\4\33\1\u01c6\25\33"+
    "\4\0\1\4\1\0\1\4\5\0\6\4\1\106\3\33"+
    "\2\4\4\0\16\33\1\u01c7\11\33\2\0\1\125\32\33"+
    "\4\0\1\4\1\0\1\4\5\0\6\4\1\106\3\33"+
    "\2\4\4\0\30\33\2\0\1\125\1\u01c8\31\33\4\0"+
    "\1\4\1\0\1\4\5\0\6\4\1\106\3\33\2\4"+
    "\4\0\13\33\1\u01c9\14\33\2\0\1\125\32\33\4\0"+
    "\1\4\1\0\1\4\5\0\6\4\1\106\3\33\2\4"+
    "\4\0\22\33\1\u01ca\5\33\2\0\1\125\32\33\4\0"+
    "\1\4\1\0\1\4\5\0\6\4\1\106\3\33\2\4"+
    "\4\0\17\33\1\u01cb\10\33\2\0\1\125\32\33\4\0"+
    "\1\4\1\0\1\4\5\0\6\4\1\106\3\33\2\4"+
    "\4\0\20\33\1\u01cc\7\33\2\0\1\125\32\33\23\0"+
    "\3\125\6\0\13\125\1\u01cd\14\125\2\0\33\125\23\0"+
    "\3\125\6\0\1\u01ce\27\125\2\0\33\125\4\0\1\4"+
    "\1\0\1\4\5\0\6\4\1\106\3\33\2\4\4\0"+
    "\4\33\1\u01cf\23\33\2\0\1\125\32\33\4\0\1\4"+
    "\1\0\1\4\5\0\6\4\1\106\3\33\2\4\4\0"+
    "\22\33\1\u01d0\5\33\2\0\1\125\32\33\4\0\1\4"+
    "\1\0\1\4\5\0\6\4\1\106\3\33\2\4\4\0"+
    "\21\33\1\u01d1\6\33\2\0\1\125\32\33\4\0\1\4"+
    "\1\0\1\4\5\0\6\4\1\106\3\33\2\4\4\0"+
    "\7\33\1\u01d2\20\33\2\0\1\125\32\33\4\0\1\4"+
    "\1\0\1\4\5\0\6\4\1\106\3\33\2\4\4\0"+
    "\30\33\2\0\1\125\15\33\1\u01d3\14\33\4\0\1\4"+
    "\1\0\1\4\5\0\6\4\1\106\3\33\2\4\4\0"+
    "\30\33\2\0\1\125\21\33\1\u01d4\10\33\4\0\1\4"+
    "\1\0\1\4\5\0\6\4\1\106\3\33\2\4\4\0"+
    "\30\33\2\0\1\125\1\u01d5\31\33\4\0\1\4\1\0"+
    "\1\4\5\0\6\4\1\106\3\33\2\4\4\0\30\33"+
    "\2\0\1\125\21\33\1\u01d6\10\33\4\0\1\4\1\0"+
    "\1\4\5\0\6\4\1\106\3\33\2\4\4\0\30\33"+
    "\2\0\1\125\1\33\1\u01d7\30\33\4\0\1\4\1\0"+
    "\1\4\5\0\6\4\1\106\3\33\2\4\4\0\30\33"+
    "\2\0\1\125\15\33\1\u01d8\14\33\4\0\1\4\1\0"+
    "\1\4\5\0\6\4\1\106\3\33\2\4\4\0\30\33"+
    "\2\0\1\125\1\u01d9\31\33\4\0\1\4\1\0\1\4"+
    "\5\0\6\4\1\106\5\4\4\0\30\4\3\0\5\4"+
    "\1\u01da\14\4\1\u01db\7\4\4\0\1\4\1\0\1\4"+
    "\5\0\6\4\1\106\3\33\2\4\4\0\30\33\2\0"+
    "\1\125\10\33\1\u01dc\21\33\4\0\1\4\1\0\1\4"+
    "\5\0\6\4\1\106\3\33\2\4\4\0\30\33\2\0"+
    "\1\125\23\33\1\u01dd\6\33\4\0\1\4\1\0\1\4"+
    "\5\0\6\4\1\106\3\33\2\4\4\0\30\33\2\0"+
    "\1\125\4\33\1\u01de\25\33\4\0\1\4\1\0\1\4"+
    "\5\0\6\4\1\106\3\33\2\4\4\0\30\33\2\0"+
    "\1\125\5\33\1\u01df\24\33\4\0\1\4\1\0\1\4"+
    "\5\0\6\4\1\106\3\33\2\4\4\0\30\33\2\0"+
    "\1\125\15\33\1\u01e0\14\33\4\0\1\4\1\0\1\4"+
    "\5\0\6\4\1\106\3\33\2\4\4\0\30\33\2\0"+
    "\1\125\21\33\1\u01e1\10\33\4\0\1\4\1\0\1\4"+
    "\5\0\6\4\1\106\3\33\2\4\4\0\30\33\2\0"+
    "\1\125\2\33\1\u01e2\27\33\4\0\1\4\1\0\1\4"+
    "\5\0\6\4\1\106\3\33\2\4\4\0\30\33\2\0"+
    "\1\125\4\33\1\u01e3\25\33\4\0\1\4\1\0\1\4"+
    "\5\0\6\4\1\106\5\4\4\0\30\4\3\0\22\4"+
    "\1\u01e4\7\4\4\0\1\4\1\0\1\4\5\0\6\4"+
    "\1\106\3\33\2\4\4\0\30\33\2\0\1\125\21\33"+
    "\1\u01e5\10\33\4\0\1\4\1\0\1\4\5\0\6\4"+
    "\1\106\3\33\2\4\4\0\30\33\2\0\1\125\6\33"+
    "\1\u01e6\23\33\4\0\1\4\1\0\1\4\5\0\6\4"+
    "\1\106\5\4\4\0\30\4\3\0\1\u01e7\31\4\4\0"+
    "\1\4\1\0\1\4\5\0\6\4\1\106\3\33\2\4"+
    "\4\0\30\33\2\0\1\125\26\33\1\u01e8\3\33\4\0"+
    "\1\4\1\0\1\4\5\0\5\4\1\226\1\106\3\u01e9"+
    "\2\4\4\0\30\4\3\0\32\4\4\0\1\4\1\0"+
    "\1\4\5\0\6\4\1\106\3\u01ea\2\4\4\0\30\4"+
    "\3\0\32\4\23\0\3\u01eb\6\0\6\u01eb\25\0\6\u01eb"+
    "\107\0\1\u01ec\113\0\1\u01ed\101\0\1\u01ee\140\0\1\u01ef"+
    "\107\0\1\u01f0\116\0\1\u01f1\120\0\1\u01f2\114\0\1\u01f3"+
    "\130\0\1\u01f4\126\0\1\u01f5\111\0\1\u01f6\54\0\15\375"+
    "\1\u01b7\11\375\1\u01f7\71\375\77\0\1\u01f8\41\0\3\125"+
    "\6\0\10\125\1\u01f9\17\125\2\0\33\125\4\0\1\4"+
    "\1\0\1\4\5\0\6\4\1\106\3\33\2\4\4\0"+
    "\4\33\1\u01fa\23\33\2\0\1\125\32\33\23\0\3\125"+
    "\6\0\16\125\1\u01fb\11\125\2\0\33\125\23\0\3\125"+
    "\6\0\22\125\1\u01fc\5\125\2\0\33\125\23\0\3\125"+
    "\6\0\16\125\1\u01fd\11\125\2\0\33\125\23\0\3\125"+
    "\6\0\17\125\1\u01fe\10\125\2\0\33\125\23\0\3\125"+
    "\6\0\2\125\1\u01ff\25\125\2\0\33\125\23\0\3\125"+
    "\6\0\1\u0200\27\125\2\0\33\125\23\0\3\125\6\0"+
    "\4\125\1\u0201\23\125\2\0\33\125\4\0\1\4\1\0"+
    "\1\4\5\0\6\4\1\106\3\33\2\4\4\0\30\33"+
    "\2\0\1\125\21\33\1\u0202\10\33\4\0\1\4\1\0"+
    "\1\4\5\0\6\4\1\106\3\33\2\4\4\0\15\33"+
    "\1\u0203\12\33\2\0\1\125\32\33\4\0\1\4\1\0"+
    "\1\4\5\0\6\4\1\106\3\33\2\4\4\0\1\u0204"+
    "\27\33\2\0\1\125\32\33\4\0\1\4\1\0\1\4"+
    "\5\0\6\4\1\106\3\33\2\4\4\0\30\33\2\0"+
    "\1\u0205\32\33\23\0\3\125\6\0\4\125\1\u0206\23\125"+
    "\2\0\33\125\23\0\3\125\6\0\3\125\1\u0207\24\125"+
    "\2\0\33\125\4\0\1\4\1\0\1\4\5\0\6\4"+
    "\1\106\3\33\2\4\4\0\2\33\1\u0208\25\33\2\0"+
    "\1\125\32\33\4\0\1\4\1\0\1\4\5\0\6\4"+
    "\1\106\3\33\2\4\4\0\4\33\1\u0209\23\33\2\0"+
    "\1\125\32\33\4\0\1\4\1\0\1\4\5\0\6\4"+
    "\1\106\3\33\2\4\4\0\10\33\1\u020a\17\33\2\0"+
    "\1\125\32\33\4\0\1\4\1\0\1\4\5\0\6\4"+
    "\1\106\3\33\2\4\4\0\30\33\2\0\1\125\1\u020b"+
    "\31\33\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\33\2\4\4\0\30\33\2\0\1\125\16\33\1\u020c"+
    "\13\33\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\33\2\4\4\0\30\33\2\0\1\125\15\33\1\u020d"+
    "\14\33\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\33\2\4\4\0\30\33\2\0\1\125\16\33\1\u020e"+
    "\13\33\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\33\2\4\4\0\30\33\2\0\1\125\13\33\1\u020f"+
    "\16\33\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\5\4\4\0\30\4\3\0\1\u0210\31\4\4\0\1\4"+
    "\1\0\1\4\5\0\6\4\1\106\5\4\4\0\30\4"+
    "\3\0\10\4\1\u0211\21\4\4\0\1\4\1\0\1\4"+
    "\5\0\6\4\1\106\3\33\2\4\4\0\30\33\2\0"+
    "\1\125\1\u0212\31\33\4\0\1\4\1\0\1\4\5\0"+
    "\6\4\1\106\3\33\2\4\4\0\30\33\2\0\1\125"+
    "\21\33\1\u0213\10\33\4\0\1\4\1\0\1\4\5\0"+
    "\6\4\1\106\3\33\2\4\4\0\30\33\2\0\1\125"+
    "\30\33\1\u0214\1\33\4\0\1\4\1\0\1\4\5\0"+
    "\6\4\1\106\3\33\2\4\4\0\30\33\2\0\1\125"+
    "\12\33\1\u0215\17\33\4\0\1\4\1\0\1\4\5\0"+
    "\6\4\1\106\5\4\4\0\30\4\3\0\4\4\1\u0216"+
    "\25\4\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\5\4\4\0\30\4\3\0\13\4\1\u0217\16\4\23\0"+
    "\3\u0218\6\0\6\u0218\25\0\6\u0218\76\0\1\u0219\124\0"+
    "\1\u021a\114\0\1\u021b\121\0\1\u021c\103\0\1\u021d\116\0"+
    "\1\u021e\124\0\1\u021f\103\0\3\125\6\0\15\125\1\u0220"+
    "\12\125\2\0\33\125\4\0\1\4\1\0\1\4\5\0"+
    "\6\4\1\106\3\33\2\4\4\0\20\33\1\u0221\7\33"+
    "\2\0\1\125\32\33\23\0\3\125\6\0\15\125\1\u0222"+
    "\12\125\2\0\33\125\23\0\3\125\6\0\15\125\1\u0223"+
    "\12\125\2\0\33\125\23\0\3\125\6\0\22\125\1\u0224"+
    "\5\125\2\0\33\125\23\0\3\125\6\0\22\125\1\u0225"+
    "\5\125\2\0\33\125\23\0\3\125\6\0\20\125\1\u0226"+
    "\7\125\2\0\33\125\4\0\1\4\1\0\1\4\5\0"+
    "\6\4\1\106\3\33\2\4\4\0\30\33\2\0\1\u0227"+
    "\32\33\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\3\33\2\4\4\0\20\33\1\u0228\7\33\2\0\1\125"+
    "\32\33\23\0\3\125\6\0\15\125\1\u0229\12\125\2\0"+
    "\33\125\23\0\3\125\6\0\1\u022a\27\125\2\0\33\125"+
    "\14\0\1\u022b\6\0\3\125\6\0\30\125\2\0\33\125"+
    "\4\0\1\4\1\0\1\4\5\0\6\4\1\106\3\33"+
    "\2\4\4\0\22\33\1\u022c\5\33\2\0\1\125\32\33"+
    "\4\0\1\4\1\0\1\4\5\0\6\4\1\106\3\33"+
    "\2\4\4\0\13\33\1\u022d\14\33\2\0\1\125\32\33"+
    "\4\0\1\4\1\0\1\4\5\0\6\4\1\106\3\33"+
    "\2\4\4\0\30\33\2\0\1\125\24\33\1\u022e\5\33"+
    "\4\0\1\4\1\0\1\4\5\0\6\4\1\106\3\33"+
    "\2\4\4\0\30\33\2\0\1\125\27\33\1\u022f\2\33"+
    "\4\0\1\4\1\0\1\4\5\0\6\4\1\106\5\4"+
    "\4\0\30\4\3\0\14\4\1\u0230\15\4\4\0\1\4"+
    "\1\0\1\4\5\0\6\4\1\106\5\4\4\0\30\4"+
    "\3\0\31\4\1\u0231\4\0\1\4\1\0\1\4\5\0"+
    "\6\4\1\106\5\4\4\0\30\4\3\0\21\4\1\u0232"+
    "\10\4\4\0\1\4\1\0\1\4\5\0\6\4\1\106"+
    "\5\4\4\0\30\4\3\0\10\4\1\u0233\21\4\23\0"+
    "\3\u0234\6\0\6\u0234\25\0\6\u0234\75\0\1\u0235\120\0"+
    "\1\u0236\125\0\1\u0237\120\0\1\u0238\116\0\1\u0239\67\0"+
    "\3\125\6\0\5\125\1\u023a\22\125\2\0\33\125\4\0"+
    "\1\4\1\0\1\4\5\0\6\4\1\106\3\33\2\4"+
    "\4\0\30\33\2\0\1\u023b\32\33\23\0\3\125\6\0"+
    "\10\125\1\u023c\17\125\2\0\33\125\23\0\3\125\6\0"+
    "\4\125\1\u023d\23\125\2\0\33\125\14\0\1\u023e\6\0"+
    "\3\u0227\6\0\30\u0227\2\0\1\125\32\u0227\4\0\1\4"+
    "\1\0\1\4\5\0\6\4\1\106\3\33\2\4\4\0"+
    "\30\33\2\0\1\u023f\32\33\23\0\3\125\6\0\23\125"+
    "\1\u0240\4\125\2\0\33\125\23\0\3\125\6\0\22\125"+
    "\1\u0241\5\125\2\0\33\125\15\0\1\u0242\107\0\1\4"+
    "\1\0\1\4\5\0\6\4\1\106\3\33\2\4\4\0"+
    "\4\33\1\u0243\23\33\2\0\1\125\32\33\4\0\1\4"+
    "\1\0\1\4\5\0\6\4\1\106\3\33\2\4\4\0"+
    "\30\33\2\0\1\125\15\33\1\u0244\14\33\4\0\1\4"+
    "\1\0\1\4\5\0\6\4\1\106\5\4\4\0\30\4"+
    "\3\0\10\4\1\u0245\21\4\4\0\1\4\1\0\1\4"+
    "\5\0\6\4\1\106\5\4\4\0\30\4\3\0\4\4"+
    "\1\u0246\25\4\4\0\1\4\1\0\1\4\5\0\6\4"+
    "\1\106\5\4\4\0\30\4\3\0\10\4\1\u0247\21\4"+
    "\4\0\1\4\1\0\1\4\5\0\6\4\1\106\5\4"+
    "\4\0\30\4\3\0\6\4\1\u0248\23\4\44\0\1\u0249"+
    "\114\0\1\u024a\103\0\3\125\6\0\16\125\1\u024b\11\125"+
    "\2\0\33\125\23\0\3\125\6\0\1\u024c\27\125\2\0"+
    "\33\125\23\0\3\125\6\0\15\125\1\u024d\12\125\2\0"+
    "\33\125\23\0\3\125\6\0\1\u024e\27\125\2\0\33\125"+
    "\15\0\1\u024f\126\0\3\125\6\0\15\125\1\u0250\12\125"+
    "\2\0\33\125\23\0\3\125\6\0\14\125\1\u0251\13\125"+
    "\2\0\33\125\23\0\3\125\6\0\16\125\1\u0252\11\125"+
    "\2\0\33\125\4\0\1\4\1\0\1\4\5\0\6\4"+
    "\1\106\3\33\2\4\4\0\30\33\2\0\1\125\3\33"+
    "\1\u0253\26\33\4\0\1\4\1\0\1\4\5\0\6\4"+
    "\1\106\5\4\4\0\30\4\3\0\13\4\1\u0254\16\4"+
    "\4\0\1\4\1\0\1\4\5\0\6\4\1\106\5\4"+
    "\4\0\30\4\3\0\5\4\1\u0255\24\4\4\0\1\4"+
    "\1\0\1\4\5\0\6\4\1\106\5\4\4\0\30\4"+
    "\3\0\15\4\1\u0256\14\4\51\0\1\u0257\103\0\1\u0258"+
    "\107\0\3\125\6\0\13\125\1\u0259\14\125\2\0\33\125"+
    "\23\0\3\125\6\0\6\125\1\u025a\21\125\2\0\33\125"+
    "\23\0\3\125\6\0\23\125\1\u025b\4\125\2\0\33\125"+
    "\23\0\3\125\6\0\20\125\1\u025c\7\125\2\0\33\125"+
    "\4\0\1\4\1\0\1\4\5\0\6\4\1\106\5\4"+
    "\4\0\30\4\3\0\30\4\1\u025d\1\4\42\0\1\u025e"+
    "\101\0\3\125\6\0\4\125\1\u025f\23\125\2\0\33\125"+
    "\23\0\3\125\6\0\14\125\1\u0260\13\125\2\0\33\125"+
    "\23\0\3\125\6\0\10\125\1\u0261\17\125\2\0\33\125"+
    "\23\0\3\125\6\0\1\u0262\27\125\2\0\33\125\23\0"+
    "\3\125\6\0\16\125\1\u0263\11\125\2\0\33\125\23\0"+
    "\3\125\6\0\22\125\1\u0264\5\125\2\0\33\125\23\0"+
    "\3\125\6\0\16\125\1\u0265\11\125\2\0\33\125\23\0"+
    "\3\125\6\0\20\125\1\u0266\7\125\2\0\33\125\23\0"+
    "\3\125\6\0\10\125\1\u0267\17\125\2\0\33\125\23\0"+
    "\3\125\6\0\16\125\1\u0268\11\125\2\0\33\125\3\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[38799];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\2\1\1\11\41\1\2\11"+
    "\23\1\1\11\1\1\1\11\4\1\1\0\1\1\1\11"+
    "\1\0\1\11\2\0\1\1\1\0\3\11\1\0\100\1"+
    "\1\11\4\1\2\0\1\11\1\0\1\1\2\0\124\1"+
    "\7\0\1\11\4\0\127\1\2\0\1\11\1\0\1\11"+
    "\1\0\1\11\14\0\100\1\3\0\1\11\1\0\1\11"+
    "\12\0\63\1\1\11\1\0\1\11\1\0\1\11\3\0"+
    "\1\11\2\0\1\1\1\11\37\1\2\0\1\11\4\0"+
    "\1\11\13\1\1\0\10\1\3\11\1\0\1\11\1\0"+
    "\4\1\1\0\3\1\1\11\6\1\2\0\4\1\1\11"+
    "\7\1\1\0\1\11\5\1\1\11\12\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[616];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
     int longitudToken=0;

  /* Declaración de tokens que serán reconocidos por el analizador sintáctico */
  private Symbol symbol(int type) {
    return new Symbol(type);
  }
  


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexerCC(java.io.Reader in) {
      yyline = 1; 
    yychar = 1; 
    
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':  // fall through
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { 
  return new Symbol(symbol.EOF, null);

 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { longitudToken = yytext().length(); yychar+=longitudToken; 
 System.out.println("Error de carácter: "+ yytext());
//ReporteError.agregarError(new Error("Lexico", yytext(), "Caracter no reconocido"+ yytext(), yyline, (int)yychar));
            }
          // fall through
          case 150: break;
          case 2:
            { longitudToken = yytext().length(); yychar+=longitudToken; System.out.println(" txt "+yytext()); return new Symbol(symbol.TEXT, yyline, (int)yychar, yytext() );
            }
          // fall through
          case 151: break;
          case 3:
            { yychar=0; yyline=+1;
            }
          // fall through
          case 152: break;
          case 4:
            { longitudToken = yytext().length();   yychar+=longitudToken  ;
            }
          // fall through
          case 153: break;
          case 5:
            { yychar+=1   ;  System.out.println(yytext()); return new Symbol(symbol.NOT           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 154: break;
          case 6:
            { yychar+=1  ; System.out.println(yytext());  return new Symbol(symbol.COMILLAS       ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 155: break;
          case 7:
            { yychar+=1  ; System.out.println(yytext());  return new Symbol(symbol.COMILLA_SIMPLE ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 156: break;
          case 8:
            { yychar+=1  ; System.out.println(yytext());  return new Symbol(symbol.PAR_IZQ ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 157: break;
          case 9:
            { yychar+=1  ; System.out.println(yytext());  return new Symbol(symbol.PAR_DER ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 158: break;
          case 10:
            { yychar+=1   ;  System.out.println(yytext()); return new Symbol(symbol.PLUS          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 159: break;
          case 11:
            { yychar+=1   ;  System.out.println(yytext()); return new Symbol(symbol.SUMA          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 160: break;
          case 12:
            { yychar+=1   ;  System.out.println(yytext()); return new Symbol(symbol.RESTA         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 161: break;
          case 13:
            { yychar+=1   ;  System.out.println(yytext()); return new Symbol(symbol.DIVISION      ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 162: break;
          case 14:
            { longitudToken = yytext().length();   yychar+=longitudToken;  System.out.println(yytext());       return new Symbol(symbol.NUMERO       , yyline  ,  (int)yychar, yytext() );
            }
          // fall through
          case 163: break;
          case 15:
            { yychar+=1  ; System.out.println(yytext());  return new Symbol(symbol.DOS_PUNTOS     ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 164: break;
          case 16:
            { yychar+=1  ; System.out.println(yytext());  return new Symbol(symbol.PUNTO_COMA     ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 165: break;
          case 17:
            { yychar+=1   ;  System.out.println(yytext()); return new Symbol(symbol.MENOR         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 166: break;
          case 18:
            { yychar+=1   ;  System.out.println(yytext()); return new Symbol(symbol.IGUAL         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 167: break;
          case 19:
            { yychar+=1   ;  System.out.println(yytext()); return new Symbol(symbol.MAYOR         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 168: break;
          case 20:
            { yychar+=1  ; System.out.println(yytext());  return new Symbol(symbol.CORCHETE_IZQ   ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 169: break;
          case 21:
            { yychar+=1  ; System.out.println(yytext());  return new Symbol(symbol.CORCHETE_DER   ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 170: break;
          case 22:
            { yychar+=1  ; System.out.println(yytext());  return new Symbol(symbol.LLAVE_IZQ      ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 171: break;
          case 23:
            { yychar+=1  ; System.out.println(yytext());  return new Symbol(symbol.LLAVE_DER      ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 172: break;
          case 24:
            { longitudToken = yytext().length();   yychar+=longitudToken;  System.out.println(yytext());       return new Symbol(symbol.ENTERO       , yyline  ,  (int)yychar, yytext() );
            }
          // fall through
          case 173: break;
          case 25:
            { longitudToken = yytext().length(); yychar+=longitudToken;
            }
          // fall through
          case 174: break;
          case 26:
            { yychar+=2   ;  System.out.println(yytext()); return new Symbol(symbol.DESIGUALDAD   ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 175: break;
          case 27:
            { yychar+=2   ;  System.out.println(yytext()); return new Symbol(symbol.AND           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 176: break;
          case 28:
            { yychar+=2   ;  System.out.println(yytext()); return new Symbol(symbol.MENOR_IGUAL   ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 177: break;
          case 29:
            { yychar+=2   ;  System.out.println(yytext()); return new Symbol(symbol.COMPARACION   ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 178: break;
          case 30:
            { yychar+=2   ;  System.out.println(yytext()); return new Symbol(symbol.MAYOR_IGUAL   ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 179: break;
          case 31:
            { longitudToken = yytext().length();   yychar+=longitudToken;  System.out.println("id " +yytext());       return new Symbol(symbol.IDENTIFICADOR, yyline  ,  (int)yychar, yytext() );
            }
          // fall through
          case 180: break;
          case 32:
            { yychar+=2   ;  System.out.println(yytext()); return new Symbol(symbol.IF            ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 181: break;
          case 33:
            { yychar+=2   ;  System.out.println(yytext()); return new Symbol(symbol.ID            ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 182: break;
          case 34:
            { yychar+=2   ;  System.out.println(yytext()); return new Symbol(symbol.OR            ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 183: break;
          case 35:
            { longitudToken = yytext().length();   yychar+=longitudToken  ; System.out.println(yytext());  return new Symbol(symbol.CHARS           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 184: break;
          case 36:
            { yychar+=5   ;  System.out.println(yytext()); return new Symbol(symbol.PIXEL         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 185: break;
          case 37:
            { yychar+=3   ;  System.out.println(yytext()); return new Symbol(symbol.ASC           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 186: break;
          case 38:
            { yychar+=3  ; System.out.println(yytext());  return new Symbol(symbol.P              ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 187: break;
          case 39:
            { yychar+=3   ;  System.out.println(yytext()); return new Symbol(symbol.END           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 188: break;
          case 40:
            { yychar+=3   ;  System.out.println(yytext()); return new Symbol(symbol.ALT           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 189: break;
          case 41:
            { yychar+=3  ;  System.out.println(yytext()); return new Symbol(symbol.RED            ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 190: break;
          case 42:
            { yychar+=3   ;  System.out.println(yytext()); return new Symbol(symbol.ROW           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 191: break;
          case 43:
            { yychar+=3   ;  System.out.println(yytext()); return new Symbol(symbol.SRC           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 192: break;
          case 44:
            { longitudToken = yytext().length();   yychar+=longitudToken;  System.out.println(yytext());       return new Symbol(symbol.DECIMAL      , yyline  ,  (int)yychar, yytext() );
            }
          // fall through
          case 193: break;
          case 45:
            { longitudToken = yytext().length(); yychar+=longitudToken; System.out.println(" url "+yytext()); return new Symbol(symbol.URL, yyline, (int)yychar, yytext() );
            }
          // fall through
          case 194: break;
          case 46:
            { longitudToken = yytext().length();  yychar+=longitudToken   ;  System.out.println(yytext()); return new Symbol(symbol.HEXADECIMAL  ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 195: break;
          case 47:
            { yychar+=4  ; System.out.println(yytext());  return new Symbol(symbol.P_C            ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 196: break;
          case 48:
            { yychar+=4  ; System.out.println(yytext());  return new Symbol(symbol.BR             ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 197: break;
          case 49:
            { yychar+=4  ; System.out.println(yytext());  return new Symbol(symbol.HTML           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 198: break;
          case 50:
            { yychar+=4  ; System.out.println(yytext());  return new Symbol(symbol.H1             ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 199: break;
          case 51:
            { yychar+=4   ;  System.out.println(yytext()); return new Symbol(symbol.DESC          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 200: break;
          case 52:
            { yychar+=4   ;  System.out.println(yytext()); return new Symbol(symbol.ELSE          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 201: break;
          case 53:
            { yychar+=4   ;  System.out.println(yytext()); return new Symbol(symbol.EXIT          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 202: break;
          case 54:
            { yychar+=4   ;  System.out.println(yytext()); return new Symbol(symbol.INIT          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 203: break;
          case 55:
            { yychar+=4   ;  System.out.println(yytext()); return new Symbol(symbol.THEN          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 204: break;
          case 56:
            { yychar+=4  ;  System.out.println(yytext()); return new Symbol(symbol.AQUA           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 205: break;
          case 57:
            { yychar+=4  ;  System.out.println(yytext()); return new Symbol(symbol.BLUE           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 206: break;
          case 58:
            { yychar+=4   ;  System.out.println(yytext()); return new Symbol(symbol.CHAR          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 207: break;
          case 59:
            { yychar+=4   ;  System.out.println(yytext()); return new Symbol(symbol.COLS          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 208: break;
          case 60:
            { yychar+=4  ;  System.out.println(yytext()); return new Symbol(symbol.GRAY           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 209: break;
          case 61:
            { yychar+=4  ;  System.out.println(yytext()); return new Symbol(symbol.HREF           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 210: break;
          case 62:
            { yychar+=4   ;  System.out.println(yytext()); return new Symbol(symbol.LEFT          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 211: break;
          case 63:
            { yychar+=4  ;  System.out.println(yytext()); return new Symbol(symbol.LIME           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 212: break;
          case 64:
            { yychar+=4   ;  System.out.println(yytext()); return new Symbol(symbol.NAME          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 213: break;
          case 65:
            { yychar+=4  ;  System.out.println(yytext()); return new Symbol(symbol.NAVY           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 214: break;
          case 66:
            { yychar+=4   ;  System.out.println(yytext()); return new Symbol(symbol.ROWS          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 215: break;
          case 67:
            { yychar+=5  ;  System.out.println(yytext()); return new Symbol(symbol.TEAL           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 216: break;
          case 68:
            { yychar+=4   ;  System.out.println(yytext()); return new Symbol(symbol.TEXT          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 217: break;
          case 69:
            { yychar+=4   ;  System.out.println(yytext()); return new Symbol(symbol.TRUE          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 218: break;
          case 70:
            { yychar+=4   ;  System.out.println(yytext()); return new Symbol(symbol.TYPE          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 219: break;
          case 71:
            { yychar+=5  ; System.out.println(yytext());  return new Symbol(symbol.BR_C           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 220: break;
          case 72:
            { yychar+=5  ; System.out.println(yytext());  return new Symbol(symbol.HTML_C         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 221: break;
          case 73:
            { yychar+=5  ; System.out.println(yytext());  return new Symbol(symbol.H1_C           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 222: break;
          case 74:
            { yychar+=5   ;  System.out.println(yytext()); return new Symbol(symbol.ARIAL         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 223: break;
          case 75:
            { yychar+=5  ; System.out.println(yytext());  return new Symbol(symbol.DIV            ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 224: break;
          case 76:
            { yychar+=5  ; System.out.println(yytext());  return new Symbol(symbol.IMG            ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 225: break;
          case 77:
            { yychar+=5   ;  System.out.println(yytext()); return new Symbol(symbol.WHILE         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 226: break;
          case 78:
            { yychar+=5  ;  System.out.println(yytext()); return new Symbol(symbol.BLACK          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 227: break;
          case 79:
            { yychar+=5   ;  System.out.println(yytext()); return new Symbol(symbol.CLASS         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 228: break;
          case 80:
            { yychar+=5   ;  System.out.println(yytext()); return new Symbol(symbol.COLOR         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 229: break;
          case 81:
            { yychar+=5   ;  System.out.println(yytext()); return new Symbol(symbol.FALSE         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 230: break;
          case 82:
            { yychar+=5  ;  System.out.println(yytext()); return new Symbol(symbol.GREEN          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 231: break;
          case 83:
            { yychar+=5  ;  System.out.println(yytext()); return new Symbol(symbol.OLIVE          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 232: break;
          case 84:
            { yychar+=5   ;  System.out.println(yytext()); return new Symbol(symbol.RADIO         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 233: break;
          case 85:
            { yychar+=5   ;  System.out.println(yytext()); return new Symbol(symbol.RIGHT         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 234: break;
          case 86:
            { yychar+=5  ;  System.out.println(yytext()); return new Symbol(symbol.WHITE          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 235: break;
          case 87:
            { yychar+=5   ;  System.out.println(yytext()); return new Symbol(symbol.WIDTH         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 236: break;
          case 88:
            { yychar+=6  ; System.out.println(yytext());  return new Symbol(symbol.DIV_C          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 237: break;
          case 89:
            { yychar+=6  ; System.out.println(yytext());  return new Symbol(symbol.IMG_C          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 238: break;
          case 90:
            { yychar+=6  ; System.out.println(yytext());  return new Symbol(symbol.BODY           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 239: break;
          case 91:
            { yychar+=6  ; System.out.println(yytext());  return new Symbol(symbol.HEAD           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 240: break;
          case 92:
            { yychar+=6  ; System.out.println("link " + yytext());  return new Symbol(symbol.LINK           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 241: break;
          case 93:
            { yychar+=6  ; System.out.println(yytext());  return new Symbol(symbol.SPAM           ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 242: break;
          case 94:
            { yychar+=6   ;  System.out.println(yytext()); return new Symbol(symbol.GENEVA        ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 243: break;
          case 95:
            { yychar+=6   ;  System.out.println(yytext()); return new Symbol(symbol.HUNTIL        ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 244: break;
          case 96:
            { yychar+=6   ;  System.out.println(yytext()); return new Symbol(symbol.INSERT        ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 245: break;
          case 97:
            { yychar+=4   ;  System.out.println(yytext()); return new Symbol(symbol.REPEAT        ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 246: break;
          case 98:
            { yychar+=6   ;  System.out.println(yytext()); return new Symbol(symbol.CENTER        ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 247: break;
          case 99:
            { yychar+=3   ;  System.out.println(yytext()); return new Symbol(symbol.COLUMN        ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 248: break;
          case 100:
            { yychar+=6   ;  System.out.println(yytext()); return new Symbol(symbol.HEIGHT        ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 249: break;
          case 101:
            { yychar+=6  ;  System.out.println(yytext()); return new Symbol(symbol.MARRON         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 250: break;
          case 102:
            { yychar+=6   ;  System.out.println(yytext()); return new Symbol(symbol.NUMBER        ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 251: break;
          case 103:
            { yychar+=6  ;  System.out.println(yytext()); return new Symbol(symbol.PURPLE         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 252: break;
          case 104:
            { yychar+=6  ;  System.out.println(yytext()); return new Symbol(symbol.SILVER         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 253: break;
          case 105:
            { yychar+=6   ;  System.out.println(yytext()); return new Symbol(symbol.STRING        ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 254: break;
          case 106:
            { yychar+=6  ;  System.out.println(yytext()); return new Symbol(symbol.YELLOW         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 255: break;
          case 107:
            { yychar+=7  ; System.out.println(yytext());  return new Symbol(symbol.BODY_C         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 256: break;
          case 108:
            { yychar+=7  ; System.out.println(yytext());  return new Symbol(symbol.HEAD_C         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 257: break;
          case 109:
            { yychar+=7  ; System.out.println(yytext());  return new Symbol(symbol.LINK_C         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 258: break;
          case 110:
            { yychar+=7  ; System.out.println(yytext());  return new Symbol(symbol.SPAN_C         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 259: break;
          case 111:
            { yychar+=7   ;  System.out.println(yytext()); return new Symbol(symbol.GLOBAL        ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 260: break;
          case 112:
            { yychar+=7  ; System.out.println(yytext());  return new Symbol(symbol.INPUT          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 261: break;
          case 113:
            { yychar+=7  ; System.out.println(yytext());  return new Symbol(symbol.TITLE          ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 262: break;
          case 114:
            { yychar+=7   ;  System.out.println(yytext()); return new Symbol(symbol.COURIER       ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 263: break;
          case 115:
            { yychar+=7   ;  System.out.println(yytext()); return new Symbol(symbol.REVERSE       ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 264: break;
          case 116:
            { yychar+=7   ;  System.out.println(yytext()); return new Symbol(symbol.VERDANA       ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 265: break;
          case 117:
            { yychar+=7   ;  System.out.println(yytext()); return new Symbol(symbol.BOOLEAN       ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 266: break;
          case 118:
            { yychar+=7   ;  System.out.println(yytext()); return new Symbol(symbol.DECIMAL       ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 267: break;
          case 119:
            { yychar+=7  ;  System.out.println(yytext()); return new Symbol(symbol.FUCHSIA        ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 268: break;
          case 120:
            { yychar+=8   ;  System.out.println(yytext()); return new Symbol(symbol.INTEGER       ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 269: break;
          case 121:
            { yychar+=7   ;  System.out.println(yytext()); return new Symbol(symbol.JUSTIFY       ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 270: break;
          case 122:
            { yychar+=7   ;  System.out.println(yytext()); return new Symbol(symbol.ONCLICK       ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 271: break;
          case 123:
            { yychar+=8  ; System.out.println(yytext());  return new Symbol(symbol.INPUT_C        ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 272: break;
          case 124:
            { yychar+=8  ; System.out.println(yytext());  return new Symbol(symbol.TITLE_C        ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 273: break;
          case 125:
            { yychar+=8  ; System.out.println(yytext());  return new Symbol(symbol.BUTTON         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 274: break;
          case 126:
            { yychar+=8  ; System.out.println(yytext());  return new Symbol(symbol.OPTION         ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 275: break;
          case 127:
            { yychar+=8  ; System.out.println(yytext());  return new Symbol(symbol.SELECTED       ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 276: break;
          case 128:
            { yychar+=9   ;  System.out.println(yytext()); return new Symbol(symbol.REDIRECT      ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 277: break;
          case 129:
            { yychar+=8   ;  System.out.println(yytext()); return new Symbol(symbol.CHECKBOX      ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 278: break;
          case 130:
            { yychar+=9  ; System.out.println(yytext());  return new Symbol(symbol.BUTTON_C       ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 279: break;
          case 131:
            { yychar+=9  ; System.out.println(yytext());  return new Symbol(symbol.OPTION_C       ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 280: break;
          case 132:
            { yychar+=9  ; System.out.println(yytext());  return new Symbol(symbol.SELECTED_C     ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 281: break;
          case 133:
            { yychar+= 9  ;  System.out.println(yytext()); return new Symbol(symbol.ON_LOAD       ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 282: break;
          case 134:
            { yychar+=9   ;  System.out.println(yytext()); return new Symbol(symbol.THENWHILE     ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 283: break;
          case 135:
            { yychar+=9   ;  System.out.println(yytext()); return new Symbol(symbol.FONT_SIZE     ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 284: break;
          case 136:
            { yychar+=10  ;  System.out.println(yytext()); return new Symbol(symbol.ALERT_INFO    ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 285: break;
          case 137:
            { yychar+=10 ; System.out.println(yytext());  return new Symbol(symbol.TEXTOAREA      ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 286: break;
          case 138:
            { longitudToken = yytext().length();   yychar+=longitudToken;  System.out.println(yytext());       return new Symbol(symbol.FUNTION      , yyline  ,  (int)yychar, yytext() );
            }
          // fall through
          case 287: break;
          case 139:
            { yychar+=10  ;  System.out.println(yytext()); return new Symbol(symbol.LETIMPAR_NUM  ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 288: break;
          case 140:
            { yychar+=10 ;  System.out.println(yytext()); return new Symbol(symbol.BACKGROUND     ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 289: break;
          case 141:
            { yychar+=10  ;  System.out.println(yytext()); return new Symbol(symbol.SANS_SERIF    ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 290: break;
          case 142:
            { yychar+=10  ;  System.out.println(yytext()); return new Symbol(symbol.TEXT_ALIGN    ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 291: break;
          case 143:
            { yychar+=11 ; System.out.println(yytext());  return new Symbol(symbol.TEXTOAREA_C    ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 292: break;
          case 144:
            { yychar+=11  ;  System.out.println(yytext()); return new Symbol(symbol.SCRIPTING     ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 293: break;
          case 145:
            { yychar+=11  ;  System.out.println(yytext()); return new Symbol(symbol.FONT_FAMI     ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 294: break;
          case 146:
            { yychar+=12  ;  System.out.println(yytext()); return new Symbol(symbol.SCRIPTING_C   ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 295: break;
          case 147:
            { yychar+=12  ;  System.out.println(yytext()); return new Symbol(symbol.LETIMPAR_NUM  ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 296: break;
          case 148:
            { yychar+=13  ;  System.out.println(yytext()); return new Symbol(symbol.NUM_ALEATORIO ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 297: break;
          case 149:
            { yychar+=18  ;  System.out.println(yytext()); return new Symbol(symbol.CARACTER_RAMD ,  yyline , (int)yychar, yytext() );
            }
          // fall through
          case 298: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
